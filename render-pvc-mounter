#!/bin/bash

set -euo pipefail

timestamp()
{
	/usr/bin/date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

ok()
{
	say "✅ ${@}"
}

fail()
{
	say "❌ ${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

[ -v POD_NAME ] || POD_NAME=""
[ -n "${POD_NAME}" ] || POD_NAME="pvc-mounter"

[ -v NAMESPACE ] || NAMESPACE=""

[ -v IMAGE ] || IMAGE=""
[ -n "${IMAGE}" ] || IMAGE="public.ecr.aws/arkcase/nettest:latest"

KUBECTL="$(type -P kubectl)" || fail "Could not find 'kubectl' in the path"

if [ ${#} -gt 0 ] ; then
	readarray -t PVC < <(echo -n "${@}" | tr ' ' '\n' | sort -u)
else
	readarray -t PVC < <("${KUBECTL}" get pvc -o name | sed -e 's;^.*/;;g' | sort -u)
fi

[ ${#PVC[@]} -gt 0 ] || fail "No PVCs to mount, cannot continue"

say "Will mount the following ${#PVC[@]} PVCS:"
for n in "${PVC[@]}" ; do
	echo "${n}"
done | sort | sed -e 's;^;\t;g'

render_volume_mounts()
{
	for PVC in "${@}" ; do
		cat <<-EOF
		      - mountPath: "/pvc/${PVC}"
		        name: "${PVC}"
		EOF
	done
}

render_volumes()
{
	for PVC in "${@}" ; do
		cat <<-EOF
		    - name: &pvc "${PVC}"
		      persistentVolumeClaim:
		        claimName: *pvc
		EOF
	done
}

render_rsync_folders()
{
	for PVC in "${@}" ; do
		cat <<-EOF
		    
		    [${PVC}]
		    path = /pvc/${PVC}
		    comment = ${PVC}
		    exclude = lost+found/
		    transfer logging = yes
		    timeout = 300
		EOF
	done
}

render_namespace()
{
	[ -n "${NAMESPACE}" ] && echo "  namespace: ${NAMESPACE}"
}

render_resources()
{
	cat <<-EOF
	apiVersion: v1
	kind: ConfigMap
	metadata:
	  labels:
	    armedia.com/pvc-mounter-name: "${POD_NAME}"
	  name: ${POD_NAME}
	$(render_namespace)
	data:
	  rsyncd.conf: |
	    pid file = /tmp/rsyncd.pid
	    lock file = /tmp/rsync.lock
	$(render_rsync_folders "${@}")
	---
	apiVersion: v1
	kind: Pod
	metadata:
	  labels:
	    armedia.com/pvc-mounter-name: "${POD_NAME}"
	  name: ${POD_NAME}
	$(render_namespace)
	spec:
	  containers:
	  - name: main
	    image: "${IMAGE}"
	    command: [ "rsync", "--daemon", "--no-detach", "--log-file=/dev/stdout", "--port=873" ]
	    imagePullPolicy: Always
	    ports:
	      - name: rsync
	        containerPort: 873
	        protocol: TCP
	    resources:
	      limits:
	        cpu: 8000m
	        memory: 24Gi
	    volumeMounts:
	      - mountPath: /etc/rsyncd.conf
	        name: config-map
	        readOnly: true
	        subPath: &rsyncdConf rsyncd.conf
	$(render_volume_mounts "${@}")
	  volumes:
	    - name: config-map
	      configMap:
	        name: ${POD_NAME}
	        items:
	          - key: *rsyncdConf
	            path: *rsyncdConf
	        defaultMode: 0640
	        optional: false
	$(render_volumes "${@}")
	  restartPolicy: Never
	---
	apiVersion: v1
	kind: Service
	metadata:
	  labels:
	    armedia.com/pvc-mounter-name: "${POD_NAME}"
	  name: ${POD_NAME}
	$(render_namespace)
	spec:
	  type: LoadBalancer
	  ports:
	    - name: rsync
	      port: 873
	      protocol: TCP
	      targetPort: 873
	  selector:
	    armedia.com/pvc-mounter-name: "${POD_NAME}"
	EOF
}

render_resources "${PVC[@]}" | "${KUBECTL}" apply -f -
