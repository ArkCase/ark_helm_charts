{{- if (include "arkcase.subsystem.enabled" .) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "common.fullname" . | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels" . | nindent 4 }}
    {{- with (.Values.labels).common }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    timestamp: {{ date "20060102150405" now | quote }}
    {{- with (.Values.annotations).common }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
type: Opaque
stringData: {{- (.Files.Glob "files/secrets/txt/*").AsConfig | nindent 2 }}

  #
  # Add items that require template processing
  #
  dbconfig.json: |
    {
      "db"   : {{- (.Values.configuration).db   | mustToPrettyJson | nindent 8 }},
      "jdbc" : {{- (.Values.configuration).jdbc | mustToPrettyJson | nindent 8 }}
    }

  context.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <Context path="/pentaho" docbase="webapps/pentaho/">
      <Resource name="jdbc/Hibernate" auth="Container" type="javax.sql.DataSource"
                factory="org.pentaho.di.core.database.util.DecryptingDataSourceFactory"
                {{- include "arkcase.pentaho.datasource.params" ((.Values.configuration).jdbc).hibernate | nindent 16 -}}
                />
    
      <Resource name="jdbc/Audit" auth="Container" type="javax.sql.DataSource"
                factory="org.pentaho.di.core.database.util.DecryptingDataSourceFactory"
                {{- include "arkcase.pentaho.datasource.params" ((.Values.configuration).jdbc).audit | nindent 16 -}}
                />
    
      <Resource name="jdbc/Quartz" auth="Container" type="javax.sql.DataSource"
                factory="org.pentaho.di.core.database.util.DecryptingDataSourceFactory"
                {{- include "arkcase.pentaho.datasource.params" ((.Values.configuration).jdbc).quartz | nindent 16 -}}
                />
    
      <Resource name="jdbc/PDI_Operations_Mart" auth="Container" type="javax.sql.DataSource"
                factory="org.pentaho.di.core.database.util.DecryptingDataSourceFactory"
                {{- include "arkcase.pentaho.datasource.params" ((.Values.configuration).jdbc).pdiOperationsMart | nindent 16 -}}
                />
    
      <Resource name="jdbc/pentaho_operations_mart" auth="Container" type="javax.sql.DataSource"
                factory="org.pentaho.di.core.database.util.DecryptingDataSourceFactory"
                {{- include "arkcase.pentaho.datasource.params" ((.Values.configuration).jdbc).pentahoOperationsMart | nindent 16 -}}
                />
    
     <Resource name="jdbc/live_logging_info" auth="Container" type="javax.sql.DataSource"
                factory="org.pentaho.di.core.database.util.DecryptingDataSourceFactory"
                {{- include "arkcase.pentaho.datasource.params" ((.Values.configuration).jdbc).liveLogging | nindent 16 -}}
                />
    
      <Resource name="jdbc/SampleData" auth="Container" type="javax.sql.DataSource"
                factory="org.pentaho.di.core.database.util.DecryptingDataSourceFactory"
                {{- include "arkcase.pentaho.datasource.params" ((.Values.configuration).jdbc).sampleData | nindent 16 -}}
                />
    
      <Resource name="jdbc/SampleDataAdmin" auth="Container" type="javax.sql.DataSource"
                factory="org.pentaho.di.core.database.util.DecryptingDataSourceFactory"
                {{- include "arkcase.pentaho.datasource.params" ((.Values.configuration).jdbc).sampleDataAdmin | nindent 16 -}}
                />
    
      <Resource name="jdbc/jackrabbit" auth="Container" type="javax.sql.DataSource"
                factory="org.pentaho.di.core.database.util.DecryptingDataSourceFactory"
                {{- include "arkcase.pentaho.datasource.params" ((.Values.configuration).jdbc).jcr | nindent 16 -}}
                />
    </Context>

  repository.xml: |
    <?xml version="1.0"?>
    <!--
       Licensed to the Apache Software Foundation (ASF) under one or more
       contributor license agreements.  See the NOTICE file distributed with
       this work for additional information regarding copyright ownership.
       The ASF licenses this file to You under the Apache License, Version 2.0
       (the "License"); you may not use this file except in compliance with
       the License.  You may obtain a copy of the License at
    
           http://www.apache.org/licenses/LICENSE-2.0
    
       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.
    -->
    
    <!DOCTYPE Repository
        PUBLIC "-//The Apache Software Foundation//DTD Jackrabbit 2.0//EN"
        "http://jackrabbit.apache.org/dtd/repository-2.0.dtd">
    
    <Repository>
      <!--
        virtual file system where the repository stores global state
        (e.g. registered namespaces, custom node types, etc.).
    
        ALERT: If you make changes to the Repository XML ensure that you delete
        all files is {solution_folder}/system/jackrabbit/repository and drop all
        the the tables in associated dbs to ensure you start with a pristine
        repository.  If you leave artifacts you may run into errors resulting from
        an "inconsistent" repository!
      -->
      <!--
        Replace the following "FileSystem" XML node to use supported databases as
        the repository file system.  Change the url, user, password and other parameters
        to suit your db installation.  The schemaObjectPrefix should
        be a unique prefix that will be prepended to the table names.
        NOTE: The database must be pre-created in and match the parameters.  See Jackrabbit
        documentation for further explanation.
      -->
    
      <FileSystem class="{{ (((.Values.configuration).jcr).repository).class }}">
        <param name="driver" value="javax.naming.InitialContext"/>
        <param name="url" value="{{ (((.Values.configuration).jcr).repository).url }}"/>
        <param name="schema" value="{{ (((.Values.configuration).jcr).repository).db }}"/>
        <param name="schemaObjectPrefix" value="fs_repos_"/>
      </FileSystem>
    
      <!--
        data store configuration
      -->
      <!--
        Replace the following "DataStore" XML node to use supported databases as the data
        store for the repository.  Change the url, user, password and other parameters
        to suit your db installation.  The schemaObjectPrefix should
        be a unique prefix that will be prepended to the table names.
        NOTE: The database must be pre-created in and match the parameters.  See Jackrabbit
        documentation for further explanation.
      -->
    
      <DataStore class="{{ (((.Values.configuration).jcr).dataStore).class }}">
        <param name="driver" value="javax.naming.InitialContext"/>
        <param name="url" value="{{ (((.Values.configuration).jcr).dataStore).url }}"/>
        <param name="databaseType" value="{{ (((.Values.configuration).jcr).dataStore).db }}"/>
        <param name="minRecordLength" value="1024"/>
        <param name="maxConnections" value="3"/>
        <param name="copyWhenReading" value="true"/>
        <param name="tablePrefix" value=""/>
        <param name="schemaObjectPrefix" value="ds_repos_"/>
      </DataStore>
    
      <!--
          security configuration
      -->
      <Security appName="Jackrabbit">
        <!--
            security manager:
            class: FQN of class implementing the JackrabbitSecurityManager interface
        -->
        <SecurityManager class="org.apache.jackrabbit.core.DefaultSecurityManager" workspaceName="security">
          <!--
          workspace access:
          class: FQN of class implementing the WorkspaceAccessManager interface
          -->
          <!-- <WorkspaceAccessManager class="..."/> -->
          <!-- <param name="config" value="${rep.home}/security.xml"/> -->
        </SecurityManager>
    
        <!--
            access manager:
            class: FQN of class implementing the AccessManager interface
        -->
        <AccessManager class="org.apache.jackrabbit.core.security.DefaultAccessManager">
          <!-- <param name="config" value="${rep.home}/access.xml"/> -->
        </AccessManager>
    
        <LoginModule class="org.pentaho.platform.repository2.unified.jcr.jackrabbit.security.SpringSecurityLoginModule">
          <!--
            anonymous user name ('anonymous' is the default value)
          -->
          <param name="anonymousId" value="anonymous"/>
          <!--
            administrator user id (default value if param is missing is 'admin')
          -->
          <param name="adminId" value="pentahoRepoAdmin"/>
    
          <param name="principalProvider"
                 value="org.pentaho.platform.repository2.unified.jcr.jackrabbit.security.SpringSecurityPrincipalProvider"/>
          <!-- comma separated list of pre-authentication tokens, one per application -->
          <param name="preAuthenticationTokens" value="ZchBOvP8q9FQ"/>
          <!-- must match PentahoSessionCredentialsStrategy.ATTR_PRE_AUTHENTICATION_TOKEN -->
          <param name="trust_credentials_attribute" value="pre_authentication_token"/>
        </LoginModule>
      </Security>
    
      <!--
          location of workspaces root directory and name of default workspace
      -->
      <Workspaces rootPath="${rep.home}/workspaces" defaultWorkspace="default"/>
      <!--
          workspace configuration template:
          used to create the initial workspace if there's no workspace yet
      -->
      <Workspace name="${wsp.name}">
        <!--
            virtual file system of the workspace:
            class: FQN of class implementing the FileSystem interface
        -->
        <!--
          Replace the following "FileSystem" XML node to use supported databases as
          the repository file system.  Change the url, user, password and other parameters
          to suit your db installation.  The schemaObjectPrefix should
          be a unique prefix that will be prepended to the table names.
          NOTE: The database must be pre-created in and match the parameters.  See Jackrabbit
          documentation for further explanation.
        -->
        <FileSystem class="{{ (((.Values.configuration).jcr).workspaces).class }}">
          <param name="driver" value="javax.naming.InitialContext"/>
          <param name="url" value="{{ (((.Values.configuration).jcr).workspaces).url }}"/>
          <param name="schema" value="{{ (((.Values.configuration).jcr).workspaces).db }}"/>
          <param name="schemaObjectPrefix" value="fs_ws_"/>
        </FileSystem>
    
        <!--
            persistence manager of the workspace:
            class: FQN of class implementing the PersistenceManager interface
        -->
        <!--
                Replace the following "PersistenceManager" XML node to use a supported database as the
                persistenanceManager store.  Change the url, user, password and parameters
              to suit your db installation.  The schemaObjectPrefix should
              be a unique prefix that will be prepended to the table names.
              NOTE: The database must be pre-created in and match the parameters.  See Jackrabbit
              documentation for further explanation.
            -->
        <PersistenceManager class="{{ (((.Values.configuration).jcr).workspacesPm).class }}">
          <param name="driver" value="javax.naming.InitialContext"/>
          <param name="url" value="{{ (((.Values.configuration).jcr).workspacesPm).url }}"/>
          <param name="schema" value="{{ (((.Values.configuration).jcr).workspacesPm).db }}"/>
          <param name="schemaObjectPrefix" value="${wsp.name}_pm_ws_"/>
        </PersistenceManager>
    
        <!--
            Search index and the file system it uses.
            class: FQN of class implementing the QueryHandler interface
        -->
        <SearchIndex class="org.apache.jackrabbit.core.query.lucene.SearchIndex">
          <param name="path" value="${wsp.home}/index"/>
          <param name="supportHighlighting" value="true"/>
        </SearchIndex>
    
    
        <WorkspaceSecurity>
          <AccessControlProvider class="org.apache.jackrabbit.core.security.authorization.acl.PentahoACLProvider"/>
        </WorkspaceSecurity>
    
      </Workspace>
    
      <!--
          Configures the versioning
      -->
      <Versioning rootPath="${rep.home}/version">
        <!--
            Configures the filesystem to use for versioning for the respective
            persistence manager
        -->
        <!--
              Replace the following "FileSystem" XML node to use a supported database as
              the repository file system.  Change the url, user, password and other parameters
              to suit your db installation.  The schemaObjectPrefix should
              be a unique prefix that will be prepended to the table names.
              NOTE: The database must be pre-created in and match the parameters.  See Jackrabbit
              documentation for further explanation.
            -->
        <FileSystem class="{{ (((.Values.configuration).jcr).versioning).class }}">
          <param name="driver" value="javax.naming.InitialContext"/>
          <param name="url" value="{{ (((.Values.configuration).jcr).versioning).url }}"/>
          <param name="schema" value="{{ (((.Values.configuration).jcr).versioning).db }}"/>
          <param name="schemaObjectPrefix" value="fs_ver_"/>
        </FileSystem>
    
        <!--
            Configures the persistence manager to be used for persisting version state.
            Please note that the current versioning implementation is based on
            a 'normal' persistence manager, but this could change in future
            implementations.
        -->
        <!--
                Replace the following "PersistenceManager" XML node to use a supported database as the
                persistenanceManager store.  Change the url, user, password and parameters
              to suit your db installation.  The schemaObjectPrefix should
              be a unique prefix that will be prepended to the table names.
              NOTE: The database must be pre-created in and match the parameters.  See Jackrabbit
              documentation for further explanation.
            -->
        <PersistenceManager class="{{ (((.Values.configuration).jcr).versioningPm).class }}">
          <param name="driver" value="javax.naming.InitialContext"/>
          <param name="url" value="{{ (((.Values.configuration).jcr).versioningPm).url }}"/>
          <param name="schema" value="{{ (((.Values.configuration).jcr).versioningPm).db }}"/>
          <param name="schemaObjectPrefix" value="pm_ver_"/>
        </PersistenceManager>
      </Versioning>
    
      <!--
          Search index for content that is shared repository wide
          (/jcr:system tree, contains mainly versions)
      -->
      <!--
        In the platform, jackrabbit's lucene is trying to index all the text from every file in the repository. 
        This is just to do a natural language search. This, however, is a feature neither BA nor DI servers support.
      -->
      <!--
      <SearchIndex class="org.apache.jackrabbit.core.query.lucene.SearchIndex">
        <param name="path" value="${rep.home}/repository/index"/>
        <param name="supportHighlighting" value="true"/>
      </SearchIndex>
      -->
    
    
      <!--
          Run with a cluster journal
      -->
      <Cluster id="node1">
        <Journal class="org.apache.jackrabbit.core.journal.DatabaseJournal">
            <param name="revision" value="${rep.home}/revision.log" />
            <param name="driver" value="javax.naming.InitialContext"/>
            <param name="url" value="{{ (((.Values.configuration).jcr).dbJournal).url }}"/>
            <param name="schema" value="{{ (((.Values.configuration).jcr).dbJournal).db }}"/>
            <param name="schemaObjectPrefix" value="cl_j_"/>
        <param name="janitorEnabled" value="true"/>
        <param name="janitorSleep" value="86400"/>
        <param name="janitorFirstRunHourOfDay" value="3"/>
        </Journal>
      </Cluster>
    </Repository>

data: {{- (.Files.Glob "files/secrets/bin/*").AsSecrets | nindent 2 }}

{{- end }}
