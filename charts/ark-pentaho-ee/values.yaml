# Default values for .arkcase_pentaho_ce
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This can be set to "false" by parent charts. If not defined, it will be taken as true
#enabled: true

#
# This should group all application-specific configurations
#
configuration:

  # Console username and password: Please set a secure password
  rootPassword: admin

  quartz:
    jndiUrl: "Quartz"
    delegateClass: "org.quartz.impl.jdbcjobstore.PostgreSQLDelegate"

  hibernate:
    # dialect: "h2"
    # dialect: "hsql"
    # dialect: "mysql5"
    # dialect: "oracle10g"
    dialect: "postgresql"
    # dialect: "sqlserver"

  jcr:
    base: &base
      url: "java:comp/env/jdbc/jackrabbit"
      db: "postgresql"

    repository: &repository
      <<: *base
      class: "org.apache.jackrabbit.core.fs.db.DbFileSystem"
      # class: "org.apache.jackrabbit.core.fs.db.OracleFileSystem"
      # class: "org.apache.jackrabbit.core.fs.db.MSSqlFileSystem"

    dataStore:
      <<: *base
      class: "org.apache.jackrabbit.core.data.db.DbDataStore"
      # class: "org.apache.jackrabbit.core.data.FileDataStore"

    workspaces:
      <<: *repository

    workspacesPm: &workspacePm
      <<: *base
      # class: "org.apache.jackrabbit.core.persistence.bundle.MySqlPersistenceManager"
      # class: "org.apache.jackrabbit.core.persistence.bundle.OraclePersistenceManager"
      # class: "org.apache.jackrabbit.core.persistence.bundle.MSSqlPersistenceManager"
      class: "org.apache.jackrabbit.core.persistence.bundle.PostgreSQLPersistenceManager"
      # class: "org.apache.jackrabbit.core.persistence.pool.H2PersistenceManager"

    versioning:
      <<: *repository

    versioningPm:
      <<: *workspacePm

    dbJournal:
      <<: *base

  # Some JDBC URL Examples:
  # url: "jdbc:mysql://rdbms:3306/hibernate"/>
  # url: "jdbc:oracle:thin:@rdbms:1521/XE"/>
  # url: "jdbc:sqlserver://rdbms:1433;DatabaseName=hibernate"/>
  # url: "jdbc:postgresql://rdbms:5432/hibernate"

  db:
    baseDb: &baseDb
      driverClassName: "org.postgresql.Driver"
      initialSize: "0"
      maxActive: "20"
      maxIdle: "5"
      maxWait: "10000"
      minIdle: "0"
      testOnBorrow: "true"
      validationQuery: "select 1"

    sampleBase: &sampleBase
      <<: *baseDb
      driverClassName: "org.hsqldb.jdbcDriver"
      url: "jdbc:hsqldb:hsql://rdbms:5432/sampledata"


    # ???
    sampleData:
      <<: *sampleBase
      username: "pentaho_user"
      password: "password"

    # ???
    sampleDataAdmin:
      <<: *sampleBase
      username: "pentaho_admin"
      password: "password"

    hibernateBase: &hibernateBase
      <<: *baseDb
      username: "hibuser"
      password: "password"
      url: "jdbc:postgresql://rdbms:5432/hibernate"

    hibernate:
      <<: *hibernateBase
      defaultAutoCommit: "true"
      jdbcInterceptors: "ConnectionState"

    audit:
      <<: *hibernateBase

    pentaho: &pentaho
      <<: *baseDb
      username: "pentaho_user"
      password: "password"
      url: "jdbc:postgresql://rdbms:5432/pentaho"

    quartz:
      <<: *pentaho
      url: "jdbc:postgresql://rdbms:5432/quartz"

    pdiOperationsMart:
      <<: *hibernateBase

    pentahoOperationsMart:
      <<: *hibernateBase

    liveLogging:
      <<: *hibernateBase
      url: "jdbc:postgresql://rdbms:5432/hibernate?searchpath=pentaho_dilogs"

    jcr:
      <<: *baseDb
      username: "jcr_user"
      password: "password"
      url: "jdbc:postgresql://rdbms:5432/jackrabbit"

# Please leave the `replicaCount` to 1 for the time being. Clustering is not
# supported yet.
replicaCount: 1

platform: ""
image:
  registry: "345280441424.dkr.ecr.ap-south-1.amazonaws.com"
  repository: "ark_pentaho_ee"
  # Overrides the image tag whose default is the chart appVersion.
  # tag: "20210716-45b2fb2"
  pullPolicy: IfNotPresent

imagePullSecrets:
  - name: aws-arkcase-pull

# You generally shouldn't mess with these. These exist to support some name-generation templates
nameOverride: ""
fullnameOverride: ""

# Custom annotations to apply throughout
annotations:

# Custom labels to apply throughout
labels:

updateStrategy: RollingUpdate
rollingUpdatePartition: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations:
  # Annotations to add to the service account
  labels:
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

securityContext:
  template:
    # You must specify an `fsGroup` to allow MariaDB write access to mounted
    # volumes (as long as MariaDB runs as a non-root user, which should be the
    # case). Any random number will do.
    fsGroup: 996
    fsGroupChangePolicy: OnRootMismatch
  mariadb:
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

#autoscaling:
  #enabled: false
  #minReplicas: 1
  #maxReplicas: 100
  #targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector:

tolerations:

affinity:

persistence:
  # If set to `false`, an `emptyDir` will be used instead and all other `persistence.*` parameters
  # are ignored.
  enabled: true

# Use this when not using other persistent volumes, to point to the root location
# where the directories need to be created
  localPath: "/opt/app/arkcase"

#
# There is 1 volume supported: data
#
  data:
# Use this instance of localPath when you want a specific directory for this volume
#    localPath: "/....."
# The "spec" should match the contents of PersistenceVolume.spec
    spec:
#      storageClassName: "manual"
#      persistentVolumeReclaimPolicy: Retain
#      accessModes:
#        - "ReadWriteOnce"
#      capacity:
#        storage: "10Gi"
#      hostPath:
#        path: /tmp/samba/data
#
    claim:
# "name" is the name of an existing volume claim to be re-used, can't be used if "claim" is present
#      name: "name-of-the-claim-to-consume"
# "spec" should match the contents of PersistenceVolumeClaim.spec, can't be used if "name" is present
#      spec: 
#        storageClassName: ""
#        volumeName: the-volume-to-claim
#        accessModes:
#          - "ReadWriteOnce"
#        resources:
#          limits: ""
#          requests: ""
#        selector:
#          matchExpressions:
#            - values:
#                - ""
#                - ""
#                - ""
#                ...
#              operator: "In"|"NotIn"|"Exists"|"DoesNotExist"
#              key: "labelKey"
#            - values:
#                - ""
#                - ""
#                - ""
#                ...
#              operator: "In"|"NotIn"|"Exists"|"DoesNotExist"
#              key: "labelKey"
#          matchLabels: "....."

service:
  #external: host-or-IP
  ports:
    - name: console
      protocol: TCP
      port: &db 2002
    - name: http
      protocol: TCP
      port: &http 8080
##
## Configure extra options for containers' liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param service.probes.enabled Enable liveness and readiness probes
## @param service.probes.spec.initialDelaySeconds Initial delay seconds for liveness and readiness probes
## @param service.probes.spec.periodSeconds Period seconds for liveness and readiness probes
## @param service.probes.spec.timeoutSeconds Timeout seconds for liveness and readiness probes
## @param service.probes.spec.failureThreshold Failure threshold for liveness and readiness probes
## @param service.probes.spec.successThreshold Success threshold for liveness and readiness probes
##
  probes:
    enabled: true
    spec:
      httpGet:
        path: "/pentaho/Login"
        port: *http
      initialDelaySeconds: 120
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 20
      successThreshold: 1
