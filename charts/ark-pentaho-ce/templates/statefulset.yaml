{{- if or .Values.enabled (not (hasKey .Values "enabled")) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.fullname" . }}-statefulset
  labels:
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  namespace: {{ .Release.Namespace | quote }}
spec:
  replicas: 1
  selector: 
    matchLabels:  
      {{- include "common.labels" . | nindent 6 }}
  serviceName: {{ include "common.fullname" . }}-headless
  template:
    metadata:
      name: {{ include "common.fullname" . }}
      labels:
        {{- include "common.labels" . | nindent 8 }}
    spec:
      hostAliases: 
      - ip: "3.108.193.246"
        hostnames:
        - "arkcase-ce.local"  
      initContainers:
      - name: keystore-app
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["/bin/sh","-c"]
        args:
          - echo yes | $JAVA_HOME/bin/keytool -import -file /app/samba.crt -keystore /etc/pki/ca-trust/extracted/java/cacerts -storepass changeit;
        volumeMounts:
          - name: samba-ssl
            mountPath: "/app/samba.crt"
            subPath: samba.crt
          - name: pentaho-cacerts
            mountPath: "/etc/pki/ca-trust/extracted/java"
      containers:
      - name: {{include "common.fullname" . | quote}}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        ports:
        - containerPort: 2002
          name: http
          protocol: TCP
        securityContext:
        {{- toYaml .Values.securityContext | nindent 12 }}
        command:
        args:
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.path }}
            port: {{ .Values.livenessProbe.port }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.startupProbe.enabled }}
        startupProbe:
          httpGet:
            path: {{ .Values.startupProbe.httpGet.path }}
            port: {{ .Values.startupProbe.httpGet.port | default 2002}}
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
        {{- end }}
        {{- if .Values.startupProbe.enabled }}
        readinessProbe: 
          httpGet:
            path: {{ .Values.readinessProbe.path }}
            port: {{ .Values.readinessProbe.port }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- end }}
        resources:
        env: 
        - name: PATH
          value: "/home/pentaho/app/pentaho/pentaho-server:/opt/solr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        envFrom:
        - secretRef:
            name: {{ include "common.fullname" . }}-secrets
        volumeMounts:
        - name: pentaho-data
          mountPath: /home/pentaho/data/pentaho
        - name: pentaho-tmp
          mountPath: /home/pentaho/tmp/pentaho
        - name: context-xml
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/tomcat/webapps/pentaho/META-INF/Context.xml"
          subPath: Context.xml
        - name: start-pentaho-sh
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/start-pentaho.sh"
          subPath: start-pentaho.sh
        - name: mysql5-hibernate-cfg-xml
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/hibernate/mysql5.hibernate.cfg.xml"
          subPath: mysql5.hibernate.cfg.xml
        - name: server-properties
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/mysql5.hibernate.cfg.xml"
          subPath: server.properties
        - name: gettingstarteddb-properties
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/GettingStartedDB.properties"
          subPath: GettingStartedDB.properties
        - name: server-xml
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/tomcat/conf/server.xml"
          subPath: server.xml
        - name: repository-xml
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/jackrabbit/repository.xml"
          subPath: repository.xml
        - name: applicationcontext-security-ldap-properties
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/applicationContext-security-ldap.properties"
          subPath: applicationContext-security-ldap.properties
        - name: repository-spring-properties
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/repository.spring.properties"
          subPath: repository.spring.properties  
        - name: quartz-create-db-sql
          mountPath: "/home/pentaho/install/pentaho/quartz-create-db.sql"
          subPath: quartz-create-db.sql
        - name: quartz-properties 
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/quartz/quartz.properties"
          subPath: quartz.properties
        - name: hibernate-settings-xml 
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/hibernate/hibernate-settings.xml"
          subPath: hibernate-settings.xml 
        - name: audit-sql-xml
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/audit_sql.xml"
          subPath: audit_sql.xml
        - name: arkcase-auth-xml
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/arkcase-preauth.xml"
          subPath: arkcase-preauth.xml
        - name: application-context
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/applicationContext-spring-security.xml"
          subPath: applicationContext-spring-security.xml
        - name: pentaho-cacerts
          mountPath: "/etc/pki/ca-trust/extracted/java"
        - name: security-properties
          mountPath: /home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/security.properties
          subPath: security.properties
      volumes:
        - name: context-xml
          configMap: 
            name: {{ include "common.fullname" . }}-configmap
            items:
              - key: Context.xml
                path: Context.xml
            defaultMode: 0777
        - name: gettingstarteddb-properties
          configMap: 
            name: {{ include "common.fullname" . }}-configmap
            items:
              - key: GettingStartedDB.properties
                path: GettingStartedDB.properties
            defaultMode: 0777
        - name: security-properties
          configMap: 
            name: {{ include "common.fullname" . }}-configmap
            items:
              - key: security.properties
                path: security.properties
            defaultMode: 0777
        - name: start-pentaho-sh
          configMap: 
            name: {{ include "common.fullname" . }}-configmap
            items:
              - key: start-pentaho.sh
                path: start-pentaho.sh
            defaultMode: 0777
        - name: mysql5-hibernate-cfg-xml
          configMap: 
            name: {{ include "common.fullname" . }}-mysql-conf
            items:
              - key: mysql5.hibernate.cfg.xml
                path: mysql5.hibernate.cfg.xml
            defaultMode: 0777
        - name: server-properties
          configMap: 
            name: {{ include "common.fullname" . }}-configmap
            items:
              - key: server.properties
                path: server.properties
            defaultMode: 0777
        - name: quartz-create-db-sql
          configMap: 
            name: {{ include "common.fullname" . }}-configmap
            items:
              - key: quartz-create-db.sql
                path: quartz-create-db.sql
            defaultMode: 0777
        - name: applicationcontext-security-ldap-properties
          configMap: 
            name: {{ include "common.fullname" . }}-ldap-configmap
            items:
              - key: applicationContext-security-ldap.properties
                path: applicationContext-security-ldap.properties
            defaultMode: 0777
        - name: repository-spring-properties
          configMap: 
            name: {{ include "common.fullname" . }}-configmap
            items:
              - key: repository.spring.properties
                path: repository.spring.properties
            defaultMode: 0777
        - name: server-xml
          configMap: 
            name: {{ include "common.fullname" . }}-configmap
            items:
              - key: server.xml
                path: server.xml
            defaultMode: 0777
        - name: repository-xml
          configMap: 
            name: {{ include "common.fullname" . }}-repository-configmap
            items:
              - key: repository.xml
                path: repository.xml
            defaultMode: 0777
        - name: quartz-properties
          configMap: 
            name: {{ include "common.fullname" . }}-configmap
            items:
              - key: quartz.properties
                path: quartz.properties
            defaultMode: 0777
        - name: hibernate-settings-xml
          configMap: 
            name: {{ include "common.fullname" . }}-configmap
            items:
              - key: hibernate-settings.xml
                path: hibernate-settings.xml
            defaultMode: 0777
        - name: audit-sql-xml
          configMap: 
            name: {{ include "common.fullname" . }}-configmap
            items:
              - key: audit_sql.xml
                path: audit_sql.xml
            defaultMode: 0777
        - name: arkcase-auth-xml
          configMap: 
            name: {{ include "common.fullname" . }}-configmap
            items:
              - key: arkcase_auth.xml
                path: arkcase-preauth.xml
            defaultMode: 0777
        - name: application-context
          configMap: 
            name: {{ include "common.fullname" . }}-configmap
            items:
              - key: application_context.xml
                path: applicationContext-spring-security.xml
            defaultMode: 0777
        - name: samba-ssl
          secret:
            secretName: samba-ssl
            items:
              - key: samba.crt
                path: samba.crt
        - name: pentaho-cacerts
          emptyDir: {}
        - name: pentaho-data
          {{- if (include "common.persistence.isEnabled" .) }}
          persistentVolumeClaim:
            {{- if (((.Values.persistence).data).claim).name }}
            claimName: {{ .Values.persistence.data.claim.name | quote }}
            {{- else }}
            claimName: {{ template "common.fullname" . }}-data
            {{- end }}
          {{- else }}
          emptyDir: {}
          {{- end }}

{{- /* -}}
This is to implement the simple persistence model without resorting to an external file
{{- */ -}}
{{- if and (or .Values.enabled (not (hasKey .Values "enabled"))) (include "common.persistence.isEnabled" .) }}
{{ include "common.persistence.validateVolumeConfig" ( dict "vol" ((.Values.persistence).data) "ctx" $ "name" "data" ) }}
{{- if not (((.Values.persistence).data).claim).name }}
{{- if not (((.Values.persistence).data).claim).spec }}
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ template "common.fullname" . }}-data
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
{{- if (((.Values.persistence).data).annotations) }}
{{- with .Values.persistence.data.annotations  }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
{{- if not (((.Values.persistence).data).volume) }}
spec:
  storageClassName: "manual"
  persistentVolumeReclaimPolicy: Retain
  accessModes:
    - "ReadWriteOnce"
  capacity:
    storage: "1Gi"
  hostPath:
    path: "{{ coalesce (.Values.persistence).localPath ((.Values.global).persistence).localPath "/opt/app/arkcase" }}/data/pentaho"
{{- else }}
spec: {{- include "common.tplvalues.render" (dict "value" (((.Values.persistence).data).volume) "context" $) | nindent 2 }}
{{- end }}
{{- end }}

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ template "common.fullname" . }}-data
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
{{- if (((.Values.persistence).data).claim).spec }}
spec: {{- include "common.tplvalues.render" (dict "value" (((.Values.persistence).data).claim.spec) "context" $) | nindent 2 }}
{{- else }}
spec:
  storageClassName: "manual"
  volumeName: {{ template "common.fullname" . }}-data
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "1Gi"
{{- end }}
{{- end }}
{{- end }}
{{- end }}
