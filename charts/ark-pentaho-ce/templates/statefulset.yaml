apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "pentaho-ce.fullname" . }}-statefulset
  labels:
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  namespace: {{ .Release.Namespace | quote }}
spec:
  replicas: 1
  selector: 
    matchLabels:  
      {{- include "ark-pentaho.labels" . | nindent 6 }}
  serviceName: {{ include "pentaho-ce.fullname" . }}-headless
  template:
    metadata:
      name: {{ include "pentaho-ce.fullname" . }}
      labels:
        {{- include "ark-pentaho.labels" . | nindent 8 }}
    spec:
      initContainers:
      containers:
      - name: {{include "pentaho-ce.fullname" . | quote}}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        ports:
        - containerPort: 2002
          name: http
          protocol: TCP
        securityContext:
        {{- toYaml .Values.securityContext | nindent 12 }}
        command:
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.path }}
            port: {{ .Values.livenessProbe.port }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.startupProbe.enabled }}
        startupProbe:
          httpGet:
            path: {{ .Values.startupProbe.httpGet.path }}
            port: {{ .Values.startupProbe.httpGet.port | default 2002}}
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
        {{- end }}
        readinessProbe: 
        resources:
        env: 
        envFrom:
        - secretRef:
            name: {{ include "pentaho-ce.fullname" . }}-secrets
        volumeMounts:
        - name: pentaho-data
          mountPath: /home/pentaho/data/pentaho
        - name: pentaho-tmp
          mountPath: /home/pentaho/tmp/pentaho
        - name: context-xml
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/tomcat/webapps/pentaho/META-INF/Context.xml"
          subPath: Context.xml
        - name: start-pentaho-sh
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/start-pentaho.sh"
          subPath: start-pentaho.sh
        - name: mysql5-hibernate-cfg-xml
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/hibernate/mysql5.hibernate.cfg.xml"
          subPath: mysql5.hibernate.cfg.xml
        - name: server-properties
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/mysql5.hibernate.cfg.xml"
          subPath: server.properties
        - name: gettingstarteddb-properties
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/GettingStartedDB.properties"
          subPath: GettingStartedDB.properties
        - name: server-xml
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/tomcat/conf/server.xml"
          subPath: server.xml
        - name: repository-xml
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/jackrabbit/repository.xml"
          subPath: repository.xml
        - name: applicationcontext-security-ldap-properties
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/applicationContext-security-ldap.properties"
          subPath: applicationContext-security-ldap.properties
        - name: repository-spring-properties
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/repository.spring.properties"
          subPath: repository.spring.properties  
        - name: quartz-create-db-sql
          mountPath: "/home/pentaho/install/pentaho/quartz-create-db.sql"
          subPath: quartz-create-db.sql
        - name: quartz-properties 
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/quartz/quartz.properties"
          subPath: quartz.properties
        - name: hibernate-settings-xml 
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/hibernate/hibernate-settings.xml"
          subPath: hibernate-settings.xml 
        - name: audit-sql-xml
          mountPath: "/home/pentaho/app/pentaho/pentaho-server/pentaho-solutions/system/audit_sql.xml"
          subPath: audit_sql.xml
        
      volumes:
        - name: context-xml
          configMap: 
            name: {{ include "pentaho-ce.fullname" . }}-configmap
            items:
              - key: Context.xml
                path: Context.xml
            defaultMode: 0777
        - name: gettingstarteddb-properties
          configMap: 
            name: {{ include "pentaho-ce.fullname" . }}-configmap
            items:
              - key: GettingStartedDB.properties
                path: GettingStartedDB.properties
            defaultMode: 0777
        - name: start-pentaho-sh
          configMap: 
            name: {{ include "pentaho-ce.fullname" . }}-configmap
            items:
              - key: start-pentaho.sh
                path: start-pentaho.sh
            defaultMode: 0777
        - name: mysql5-hibernate-cfg-xml
          configMap: 
            name: {{ include "pentaho-ce.fullname" . }}-mysql-conf
            items:
              - key: mysql5.hibernate.cfg.xml
                path: mysql5.hibernate.cfg.xml
            defaultMode: 0777
        - name: server-properties
          configMap: 
            name: {{ include "pentaho-ce.fullname" . }}-configmap
            items:
              - key: server.properties
                path: server.properties
            defaultMode: 0777
        - name: quartz-create-db-sql
          configMap: 
            name: {{ include "pentaho-ce.fullname" . }}-configmap
            items:
              - key: quartz-create-db.sql
                path: quartz-create-db.sql
            defaultMode: 0777
        - name: applicationcontext-security-ldap-properties
          configMap: 
            name: {{ include "pentaho-ce.fullname" . }}-ldap-configmap
            items:
              - key: applicationContext-security-ldap.properties
                path: applicationContext-security-ldap.properties
            defaultMode: 0777
        - name: repository-spring-properties
          configMap: 
            name: {{ include "pentaho-ce.fullname" . }}-configmap
            items:
              - key: repository.spring.properties
                path: repository.spring.properties
            defaultMode: 0777
        - name: server-xml
          configMap: 
            name: {{ include "pentaho-ce.fullname" . }}-configmap
            items:
              - key: server.xml
                path: server.xml
            defaultMode: 0777
        - name: repository-xml
          configMap: 
            name: {{ include "pentaho-ce.fullname" . }}-repository-configmap
            items:
              - key: repository.xml
                path: repository.xml
            defaultMode: 0777
        - name: quartz-properties
          configMap: 
            name: {{ include "pentaho-ce.fullname" . }}-configmap
            items:
              - key: quartz.properties
                path: quartz.properties
            defaultMode: 0777
        - name: hibernate-settings-xml
          configMap: 
            name: {{ include "pentaho-ce.fullname" . }}-configmap
            items:
              - key: hibernate-settings.xml
                path: hibernate-settings.xml
            defaultMode: 0777
        - name: audit-sql-xml
          configMap: 
            name: {{ include "pentaho-ce.fullname" . }}-configmap
            items:
              - key: audit_sql.xml
                path: audit_sql.xml
            defaultMode: 0777
        {{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
        - name: pentaho-data
          persistentVolumeClaim:
            claimName: {{ printf "%s" (tpl .Values.persistence.existingClaim .) }}
        {{- else if not .Values.persistence.enabled }}
        - name: pentaho-tmp
          emptyDir: {}
        {{- end -}}
  {{- if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: pentaho-data
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
            - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        storageClassName: {{ .Values.persistence.storageClassName | default "gp2"}}
    - metadata:
        name: pentaho-tmp
      spec:
        accessModes:
          {{- range .Values.persistence.accessModes }}
            - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        storageClassName: {{ .Values.persistence.storageClassName | default "gp2"}}
  {{- end }}