# Default values for ark-core.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This can be set to "false" by parent charts. If not defined, it will be taken as true
#enabled: true

# licenses:
#   pdfnet: "some-license-string"

#
# This should group all application-specific configurations
#
configuration:

  baseUrl: "http://server.dev.arkcase.com:8080/arkcase"

  db:
    dialect: "mysql"
    hostname: "rdbms"
    database: "arkcase"
    username: "arkcase"
    password: "arkcase"

  ingress:
    enabled: false
    # className: haproxy
    # hostName: my.host.name
    # tls: my-secret-name

  ldap:
    domain: "dev.arkcase.com"
    url: "ldaps://ldap:636"
    baseDn: &baseDn "dc=dev,dc=arkcase,dc=com"
    bind:
      dn: "cn=ArkCase Administrator,cn=Users,dc=dev,dc=arkcase,dc=com"
      password: "$arkcase-admin$"
    admin:
      dn: "cn=ArkCase Administrator"
      role: "cn=ARKCASE_ADMINISTRATOR"
    search:
      base: *baseDn
      users:
        base: "cn=Users"
        attribute: "sAMAccountName"
        filter: "(&(objectClass=user)(sAMAccountName={0}))"
        allFilter: "(objectClass=user)"
        prefix: ""
      groups:
        base: "cn=Users"
        attribute: "cn"
        filter: "(&(objectClass=group)(cn={0}))"
        allFilter: "(objectClass=group)"
        membership: "(&(objectClass=group)(member={0}))"
        ignoreCase: "false"
        subtree: "true"
        rolePrefix: ""
        prefix: ""

  configServer:
    # For now, it's collocated ... eventually it will live elsewhere
    url: "http://localhost:9999"

  content: &content
    url: "http://content-main:8080/alfresco"
    username: "admin"
    password: "admin"

  contentArchive:
    <<: *content

  messaging:
    url: "tcp://messaging:61616"
    username: "guest"
    password: "ENC(U2FsdGVkX1+SMOIdK/h2Cy5ONteYLksBQnHZllFZcKs=)"

  stomp:
    url: "tcp://messaging:61613"
    username: "arkcase"
    password: "arkcase"

  reports:
    url: "http://reports:8080"
    scheme: "https"

  search:
    url: "http://search:8983"

  weather:
    url: "https://api.openweathermap.org/data/2.5"
    scheme: "https"

  # Add configurations here
  cloudconfig:
    # Settings for config

  arkcase:
    # In case you need more environment variables ...
    env:
      - name: DEVELOPMENT
        value: "true"

  ldap:
    domain: "dev.arkcase.com"
    url: "ldaps://ldap:636"
    baseDn: &baseDn "dc=dev,dc=arkcase,dc=com"
    bind:
      dn: "cn=ArkCase Administrator,cn=Users,dc=dev,dc=arkcase,dc=com"
      password: "$arkcase-admin$"
    admin:
      dn: "cn=ArkCase Administrator"
      role: "cn=ARKCASE_ADMINISTRATOR"
    search:
      base: *baseDn
      users:
        base: "cn=Users"
        attribute: "sAMAccountName"
        filter: "(&(objectClass=user)(sAMAccountName={0}))"
        allFilter: "(objectClass=user)"
        prefix: ""
      groups:
        base: "cn=Users"
        attribute: "cn"
        filter: "(&(objectClass=group)(cn={0}))"
        allFilter: "(objectClass=group)"
        membership: "(&(objectClass=group)(member={0}))"
        ignoreCase: "false"
        subtree: "true"
        rolePrefix: ""
        prefix: ""

command:
  # TODO: This command is intended for debugging purposes *ONLY*
  # arkcase: [ "sleep", "infinity" ]

initDependencies:
  enabled: true
  mode: all
  template:
    # Any of the required ports are enough to succeed
    mode: any
    initialDelay: 10
    delay: 5
    timeout: 5
    attempts: 12
  dependencies:
    rdbms:
      ports:
        # In case of SQLServer
        - 1443
        # In case of Oracle
        - 1521
        # In case of MySQL/MariaDB
        - 3306
        # In case of PostgreSQL
        - 5432
    ldap:
      ports:
        - 389
        - 636
        - 9000
    messaging:
      ports:
        - 61613
        - 61614
        - 61616
    search:
      ports:
        - 80
        - 443
        - 8983

# Please leave the `replicaCount` to 1 for the time being. Clustering is not
# supported yet.
replicaCount: 1

platform: ""

licenses:
  - "pdftron"

image:

  # pullPolicy: IfNotPresent

  registry: "public.ecr.aws"

  # Overrides the image tag whose default is the chart appVersion.

  repository: "arkcase/deploy"
  # tag: &arkcaseVersion "2021.03.26"

  # cloudconfig:
  #   repository: "arkcase/cloudconfig"
  #   tag: "some-tag"

  # arkcase:
  #   repository: "arkcase/core"
  #   tag: "1.0.0"

  # setperm:
  #   registry: "alternate-registry"
  #   repository: "arkcase/setperm"
  #   tag: "latest"


# You generally shouldn't mess with these. These exist to support some name-generation templates
nameOverride: ""
fullnameOverride: ""

# Custom annotations to apply throughout
annotations:

# Custom labels to apply throughout
labels:

updateStrategy: RollingUpdate
rollingUpdatePartition: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations:
  # Annotations to add to the service account
  labels:
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

securityContext:
  template:
    # You must specify an `fsGroup` to allow ActiveMQ write access to mounted
    # volumes (as long as ActiveMQ runs as a non-root user, which should be the
    # case). Any random number will do.
    fsGroup: &fsGroup 1997
    fsGroupChangePolicy: OnRootMismatch
  cloudconfig:
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: &runAsUser 1997
    # runAsGroup: *fsGroup
  arkcase:
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: &runAsUser 1997
    # runAsGroup: *fsGroup
resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 1
  #   memory: 1Gi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

#autoscaling:
  #enabled: false
  #minReplicas: 1
  #maxReplicas: 100
  #targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector:

tolerations:

affinity:

persistence:
  # If set to `false`, an `emptyDir` will be used instead and all other `persistence.*` parameters
  # are ignored.
  enabled: true

#  The volumes for persistent data
  volumes:
# The volume where the data will be stored (RTFM for more info on how to
# properly declare volumes)
#     data:

service:
  cloudconfig:
    ports:
      - name: cloudconfig
        protocol: TCP
        port: &cloudconfigPort 9999
##
## Configure extra options for containers' liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param service.probes.enabled Enable liveness and readiness probes
## @param service.probes.spec.initialDelaySeconds Initial delay seconds for liveness and readiness probes
## @param service.probes.spec.periodSeconds Period seconds for liveness and readiness probes
## @param service.probes.spec.timeoutSeconds Timeout seconds for liveness and readiness probes
## @param service.probes.spec.failureThreshold Failure threshold for liveness and readiness probes
## @param service.probes.spec.successThreshold Success threshold for liveness and readiness probes
##
    probes:
      enabled: true
      spec:
        httpGet:
          path: "/actuator/health"
          port: *cloudconfigPort
        initialDelaySeconds: 0
        periodSeconds: 1
        timeoutSeconds: 1
        failureThreshold: 60
        successThreshold: 1

  arkcase:
    ports:
      - name: arkcase
        protocol: TCP
        port: &arkcasePort 8080
#    probes:
#      enabled: true
#      spec:
#        httpGet:
#          path: "/"
#          port: *arkcasePort
#        initialDelaySeconds: 30
#        periodSeconds: 1
#        timeoutSeconds: 1
#        failureThreshold: 150
#        successThreshold: 1
