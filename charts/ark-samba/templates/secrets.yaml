{{- if and (include "arkcase.subsystem.enabledOrExternal" $) (not (include "arkcase.samba.external" $)) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "arkcase.fullname" $ | quote }}
  namespace: {{ $.Release.Namespace | quote }}
  labels: {{- include "arkcase.labels" $ | nindent 4 }}
    {{- with ($.Values.labels).common }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    timestamp: {{ date "20060102150405" now | quote }}
    {{- with ($.Values.annotations).common }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
type: Opaque
stringData:
  {{- $domainName := (include "arkcase.tools.ldap" (dict "ctx" $ "value" "domain")) -}}
  {{- $baseDn := (include "arkcase.tools.ldap.baseDn" $) }}

  DOMAIN_NAME: {{ (include "arkcase.tools.mustHostname" $domainName) | quote }}
  DOMAIN_REALM: {{ include "arkcase.tools.ldap.realm" $ | quote }}
  DOMAIN_ROOT_DN: {{ $baseDn | quote }}

  {{- $userBaseDn := (include "arkcase.tools.ldap" (dict "ctx" $ "value" "search.users.base")) }}
  DOMAIN_USER_BASE_DN: {{ printf "%s,%s" ($userBaseDn | default "cn=Users") $baseDn | quote }}

  {{- $userClass := (include "arkcase.tools.ldap" (dict "ctx" $ "value" "search.users.class")) }}
  DOMAIN_USER_CLASS: {{ $userClass | default "user" | quote }}

  {{- $userNameAttribute := (include "arkcase.tools.ldap" (dict "ctx" $ "value" "search.users.attribute")) }}
  DOMAIN_USER_NAME_ATTRIBUTE: {{ $userNameAttribute | default "cn" | quote }}

  {{- $userSearchFilter := (include "arkcase.tools.ldap" (dict "ctx" $ "value" "search.users.filter") | replace "*" "{0}") }}
  DOMAIN_USER_SEARCH_FILTER: {{ $userSearchFilter | default "(&(objectCategory=Person)(sAMAccountName=*))" | quote }}

  {{- $userMembershipAttribute := (include "arkcase.tools.ldap" (dict "ctx" $ "value" "search.users.attribute")) }}
  DOMAIN_USER_MEMBER_ATTRIBUTE: {{ $userMembershipAttribute | default "memberOf" | quote }}

  {{- $groupBaseDn := (include "arkcase.tools.ldap" (dict "ctx" $ "value" "search.groups.base")) }}
  DOMAIN_GROUP_BASE_DN: {{ printf "%s,%s" ($groupBaseDn | default "cn=Users") $baseDn | quote }}

  {{- $groupClass := (include "arkcase.tools.ldap" (dict "ctx" $ "value" "search.groups.class")) }}
  DOMAIN_GROUP_CLASS: {{ $groupClass | default "group" | quote }}

  {{- $groupNameAttribute := (include "arkcase.tools.ldap" (dict "ctx" $ "value" "search.groups.attribute")) }}
  DOMAIN_GROUP_NAME_ATTRIBUTE: {{ $groupNameAttribute | default "cn" | quote }}

  {{- $groupSearchFilter := (include "arkcase.tools.ldap" (dict "ctx" $ "value" "search.groups.membership") | replace "*" "{0}") }}
  DOMAIN_GROUP_SEARCH_FILTER: {{ $groupSearchFilter | default "(&(objectClass=group)(cn=*))" | quote }}

  {{- $groupMemberAttribute := (include "arkcase.tools.ldap" (dict "ctx" $ "value" "search.groups.attribute")) }}
  DOMAIN_GROUP_MEMBER_ATTRIBUTE: {{ $groupMemberAttribute | default "member" | quote }}

  {{- $administrator := (include "arkcase.tools.ldap" (dict "ctx" $ "value" "administrator")) }}
  {{- if $administrator }}
  DOMAIN_ADMINISTRATOR: {{ $administrator | quote }}
  {{- end }}

  {{- $password := (include "arkcase.tools.ldap" (dict "ctx" $ "value" "password")) }}
  {{- if ($.Values.service).external }}
    {{- if $password }}
  DOMAIN_PASSWORD: {{ $password | quote }}
    {{- end }}
  {{- else }}
  DOMAIN_PASSWORD: {{ $password | required "A default domain password is required" | quote }}
  {{- end }}

  #
  # Select and render the seeds file
  #
  {{ if ($.Values.configuration).seeds }}
    {{- $seeds := $.Values.configuration.seeds }}
    {{- if kindIs "string" $seeds }}
      {{- $seedFile := $.Files.Get (printf "files/seeds-%s.yaml" $seeds) }}
      {{- if not $seedFile }}
        {{- fail (printf "Did not find the '%s' seeds file" $seeds) }}
      {{- end }}
      {{- $seeds = $seedFile | fromYaml | toYaml }}
    {{- else if kindIs "map" $seeds }}
      {{- $seeds = (pick $seeds "server" "users" "groups" | toYaml) }}
    {{- else }}
      {{- fail "The 'seeds' setting must be either a string or a map" }}
    {{- end }}
    {{- if not $seeds }}
      {{- $seeds = "" }}
    {{- end -}}
  seeds.yaml: | {{- $seeds | nindent 4 }}
  {{- end }}
data:
  # We don't render a password b/c this could cause problems since we're
  # trying to persist the CA
  # TODO: This doesn't mean we can't make this value configurable
  step.password: {{ "ohthei<yeo>H?ee7QuuX*ooku2ko7Quo" | b64enc | quote }}
{{- end }}
