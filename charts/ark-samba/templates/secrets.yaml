{{- if (include "arkcase.subsystem.enabledOrExternal" .) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "arkcase.fullname" . | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "arkcase.labels" . | nindent 4 }}
    {{- with (.Values.labels).common }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    timestamp: {{ date "20060102150405" now | quote }}
    {{- with (.Values.annotations).common }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
type: Opaque
stringData:
  {{- with (.Values.configuration).domain }}
    {{- $rootDn := (include "arkcase.tools.samba.dc" .name) }}
  DOMAIN_NAME: {{ (include "arkcase.tools.mustHostname" .name) | quote }}
  DOMAIN_REALM: {{ include "arkcase.tools.samba.realm" .name | quote }}
  DOMAIN_ROOT_DN: {{ $rootDn | quote }}
  DOMAIN_USER_BASE_DN: {{ printf "%s,%s" (default "ou=Users" .userBaseDn) $rootDn | quote }}
  DOMAIN_USER_CLASS: {{ default "user" .userClass | quote }}
  DOMAIN_USER_NAME_ATTRIBUTE: {{ default "cn" .userClass | quote }}
  DOMAIN_USER_SEARCH_FILTER: {{ default "(&(objectCategory=Person)(sAMAccountName=*))" .userSearchFilter | quote }}
  DOMAIN_USER_MEMBER_ATTRIBUTE: {{ default "memberOf" .userMembershipAttribute | quote }}
  DOMAIN_GROUP_BASE_DN: {{ printf "%s,%s" (default "ou=Groups" .groupBaseDn) $rootDn | quote }}
  DOMAIN_GROUP_CLASS: {{ default "group" .userClass | quote }}
  DOMAIN_GROUP_NAME_ATTRIBUTE: {{ default "cn" .groupNameAttribute | quote }}
  DOMAIN_GROUP_SEARCH_FILTER: {{ default "(&(objectClass=group)(cn=*))" .groupSearchFilter | quote }}
  DOMAIN_GROUP_MEMBER_ATTRIBUTE: {{ default "member" .groupMemberAttribute | quote }}
    {{- if .administrator }}
  DOMAIN_ADMINISTRATOR: {{ .administrator | quote }}
    {{- end }}
    {{- if ($.Values.service).external }}
      {{- if .password }}
  DOMAIN_PASSWORD: {{ .password | quote }}
      {{- end }}
    {{- else }}
  DOMAIN_PASSWORD: {{ required "A default domain password is required" .password | quote }}
    {{- end }}
  {{- end }}

  #
  # Select and render the seeds file
  #
  {{ if (.Values.configuration).seeds }}
    {{- $seeds := .Values.configuration.seeds }}
    {{- if kindIs "string" $seeds }}
      {{- $seedFile := .Files.Get (printf "files/seeds-%s.yaml" $seeds) }}
      {{- if not $seedFile }}
        {{- fail (printf "Did not find the '%s' seeds file" $seeds) }}
      {{- end }}
      {{- $seeds = $seedFile | fromYaml | toYaml }}
    {{- else if kindIs "map" $seeds }}
      {{- $seeds = (pick $seeds "server" "users" "groups" | toYaml) }}
    {{- else }}
      {{- fail "The 'seeds' setting must be either a string or a map" }}
    {{- end }}
    {{- if not $seeds }}
      {{- $seeds = "" }}
    {{- end -}}
  seeds.yaml: | {{- $seeds | nindent 4 }}
  {{- end }}
data:
  # We don't render a password b/c this could cause problems since we're
  # trying to persist the CA
  step.password: {{ "ohthei<yeo>H?ee7QuuX*ooku2ko7Quo" | b64enc | quote }}
{{- end }}
