{{- if (include "arkcase.tools.enabled" .) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.fullname" . | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels" . | nindent 4 }}
    {{- if .Values.labels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.labels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.annotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.annotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  {{- if not (.Values.autoscaling).enabled }}
  replicas: {{ .Values.replicaCount | default 1 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  serviceName: {{ include "common.fullname" . | quote }}
  updateStrategy:
    type: {{ .Values.updateStrategy }}
    {{- if (eq "Recreate" .Values.updateStrategy) }}
    rollingUpdate: null
    {{- else if .Values.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ .Values.rollingUpdatePartition }}
    {{- end }}
  template:
    metadata:
      annotations:
        {{- if (include "common.createConfigmap" .) }}
        checksum/configuration: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if ((.Values.service).ports).metrics }}
        # NB: Both these annotation values must be of type "string"
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.service.ports.metrics.port | quote }}
        {{- end }}
        {{- with .Values.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.hostAliases }}
      hostAliases: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{- end }}
      serviceAccountName: {{ include "common.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext: {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: samba
          {{- with (.Values.securityContext).samba }}
          securityContext: {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DOMAIN
              value: {{ .Values.domain.name | quote }}
            - name: DOMAINPASS
              valueFrom:
                secretKeyRef:
                  name: mysamba-ark-samba
                  key: DOMAIN_PASSWORD
            - name: JOIN
              value: "false"
            #- name: JOINSITE
            #  value: ""
            - name: INSECURELDAP
              value: "false"
            - name: MULTISITE
              value: "false"
            - name: NOCOMPLEXITY
              value: "true"
          ports:
            - name: ldaps
              protocol: TCP
              containerPort: 636
          readinessProbe:
            exec:
              command: [ "/test-ready.sh" ]
            {{- with (((.Values.service).ports).ldaps).readinessProbe }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          livenessProbe:
            exec:
              command: [ "/test-live.sh" ]
            {{- with (((.Values.service).ports).ldaps).livenessProbe }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: "data"
              mountPath: "/var/lib/samba"
            - name: "conf"
              mountPath: "/config"
            - name: "logs"
              mountPath: "/var/log/samba"
            - name: "secrets"
              mountPath: "/app/conf"
              readOnly: true
      volumes:
        {{- include "arkcase.persistence.volume" (dict "name" "data" "ctx" $) | nindent 8 }}
        {{- include "arkcase.persistence.volume" (dict "name" "conf" "ctx" $) | nindent 8 }}
        {{- include "arkcase.persistence.volume" (dict "name" "logs" "ctx" $) | nindent 8 }}
        - name: secrets
          secret:
            secretName: {{ include "common.fullname" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

{{- if (include "arkcase.persistence.enabled" .) }}
{{ include "arkcase.persistence.declareObjects" (dict "ctx" $ "name" "data") | indent 0 }}
{{ include "arkcase.persistence.declareObjects" (dict "ctx" $ "name" "conf") | indent 0 }}
{{ include "arkcase.persistence.declareObjects" (dict "ctx" $ "name" "logs") | indent 0 }}
{{- end }}

{{- end }}
