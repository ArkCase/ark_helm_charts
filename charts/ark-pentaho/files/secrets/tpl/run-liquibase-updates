#!/bin/bash

set -euo pipefail

timestamp() {
	/usr/bin/date -Isec -u
}

say() {
	echo -e "$(timestamp): ${@}"
}

err() {
	say "ERROR: ${@}" 1>&2
}

fail() {
	say "${@}"
	exit ${EXIT_CODE:-1}
}

[ -v BASE_DIR ] || BASE_DIR="/app"

[ -v LB_DIR ] || LB_DIR="${BASE_DIR}/lb"
cd "${LB_DIR}"

[ -v LOGS_DIR ] || LOGS_DIR="${BASE_DIR}/logs"
if [ -d "${LOGS_DIR}" ] ; then
	LOG_FILE="${LOGS_DIR}/liquibase.stdout.log"
	exec > >(/usr/bin/tee -a "${LOG_FILE}")
	exec 2>&1
	say "Logs redirected to [${LOG_FILE}]"
fi

{{- $targets := dict "create_quartz" "quartz" }}
{{- if (include "arkcase.enterprise" $) }}
  {{- $targets = set $targets "pentaho_mart" "hibernate" }}
{{- end }}

# We do it like this so we don't enter it multiple times
{{- $dbInfo := (include "arkcase.db.info" $ | fromYaml) }}
export LIQUIBASE_COMMAND_DRIVER={{ $dbInfo.jdbc.driver | quote }}
[ -n "${LIQUIBASE_COMMAND_DRIVER}" ] || fail "No JDBC driver given, cannot continue"

# TODO: fetch the required passwords using more secure means ...
{{- range $changeLog, $db := $targets }}
  {{- $schema := (include "arkcase.db.schema" (dict "ctx" $ "schema" $db) | fromYaml) }}
say "Running changelog {{ $changeLog }} ..."
./liquibase update \
	--changelog-file={{ printf "changelog.%s.xml" $changeLog | quote }} \
	--url={{ $schema.jdbc.url | quote }} \
	--username={{ $schema.username | quote }} \
	--password={{ $schema.password | quote }}

{{- end }}
say "Changelogs complete."
