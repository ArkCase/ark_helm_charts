# This is a YAML-formatted file.  Declare variables to be passed into your templates.

# ACS will be created in a k8s cluster with a minimum of 16GB memory to split among below nodes:
# 1 x repository, 1 x share, 1 x transformers (pdfrenderer, imagemagick, libreoffice, tika, misc) and 1 x postgresql

# Limit container memory and assign X percentage to JVM.  There are couple of ways to allocate JVM Memory for ACS Containers
# For example: 'JAVA_OPTS: "$JAVA_OPTS -XX:+PrintFlagsFinal -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"'
# But, as per Oracle docs (https://docs.oracle.com/javase/9/gctuning/parallel-collector1.htm#JSGCT-GUID-CAB83393-3438-44ED-98F0-D15641B43C7D)
# If container memory is not explicitly set, then the above flags will default max heap to 1/4th of container's memory which may not be ideal.
# Hence, setting up explicit Container memory and then assigning a percentage of it to the JVM for performance tuning.

repository:
  enabled: true
  edition: Community
  replicaCount: 1
  strategy:
    type: Recreate
  image:
    repository: 345280441424.dkr.ecr.ap-south-1.amazonaws.com/ark_alfresco
    tag: "latest"
    pullPolicy: Always
    internalPort: 8080
    hazelcastPort: 5701
  initContainers:
    db:
      image:
        repository: busybox
        tag: 1.33.1
        pullPolicy: IfNotPresent
      resources:
        requests:
          memory: "5Mi"
        limits:
          memory: "10Mi"
    fs:
      image:
        repository: busybox
        tag: 1.33.1
        pullPolicy: IfNotPresent
      resources:
        requests:
          memory: "5Mi"
        limits:
          memory: "10Mi"
  service:
    name: alfresco
    type: ClusterIP
    externalPort: &repositoryExternalPort 80
  ingress:
    path: /
    maxUploadSize: "5g"
    annotations: {}
      # nginx.ingress.kubernetes.io/enable-cors: "true"
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  environment:
    JAVA_OPTS: " -Ddeployment.method=HELM_CHART
      -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80"
    JAVA_TOOL_OPTIONS: " -Dencryption.keystore.type=JCEKS
      -Dencryption.cipherAlgorithm=DESede/CBC/PKCS5Padding
      -Dencryption.keyAlgorithm=DESede
      -Dencryption.keystore.location=/usr/local/tomcat/shared/classes/alfresco/extension/keystore/keystore
      -Dmetadata-keystore.aliases=metadata
      -Dmetadata-keystore.metadata.algorithm=DESede"
  resources:
    requests:
      memory: "3000Mi"
    limits:
      memory: "3000Mi"
  # The repository readiness probe is used to check startup only as a failure
  # of the liveness probe later will result in the pod being restarted.
  readinessProbe:
    initialDelaySeconds: 60
    periodSeconds: 20
    timeoutSeconds: 10
    failureThreshold: 6
  livenessProbe:
    initialDelaySeconds: 130
    periodSeconds: 20
    timeoutSeconds: 10

# Declares the api-explorer service used by the content repository
apiexplorer:
  ingress:
    path: /api-explorer-7.0.0
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

# Declares the alfresco-pdf-renderer service used by the content repository
# to transform pdf files
pdfrenderer:
  enabled: false

# Declares the alfresco-imagemagick service used by the content repository
# to transform image files
imagemagick:
  enabled: false

# Declares the alfresco-libreoffice service used by the content repository
# to transform office files
libreoffice:
  enabled: false

# Declares the alfresco-tika service used by the content repository
# to transform office files
tika:
  enabled: false

# Declares the alfresco-tika service used by the content repository
# to transform office files
transformmisc:
  enabled: false

# Define the alfresco-share properties to use in the k8s cluster
# This is the default presentation layer(UI) of Alfresco Content Services
share:
  enabled: true
  replicaCount: 1
  image:
    repository: 345280441424.dkr.ecr.ap-south-1.amazonaws.com/ark_share
    tag: "latest"
    pullPolicy: IfNotPresent
    internalPort: 8080
  service:
    name: share
    type: ClusterIP
    externalPort: 80
  ingress:
    path: /share
    annotations: {}
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    requests:
      memory: "2000Mi"
    limits:
      memory: "2000Mi"
  environment:
    CATALINA_OPTS: " -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=80"
  readinessProbe:
    initialDelaySeconds: 60
    periodSeconds: 20
    timeoutSeconds: 10
  livenessProbe:
    initialDelaySeconds: 130
    periodSeconds: 20
    timeoutSeconds: 10

# Defines the mounting points for the persistence required by the apps in the
# cluster the alf_data folder from alfresco-content-repository app is mapped to
# alfresco-content-services/repository-data
persistence:
  enabled: true
  baseSize: 20Gi
  storageClass: #enable and define if you already have a custom storage class defined
    enabled: true
    accessModes:
      - ReadWriteMany
    name: "nfs-client" #Custom storage class name
  repository:
    enabled: true
    existingClaim: "alfresco-volume-claim"
    config:
      querysetsMountPath: "/usr/local/tomcat/shared/classes/alfresco/extension/querysets/"
      transform:
        renditionsMountPath: "/usr/local/tomcat/shared/classes/alfresco/extension/transform/renditions/"
        pipelinesMountPath: "/usr/local/tomcat/shared/classes/alfresco/extension/transform/pipelines/"
        mimetypesMountPath: "/usr/local/tomcat/shared/classes/alfresco/extension/mimetypes/"
    data:
      mountPath: "/usr/local/tomcat/alf_data"
      subPath: "alfresco-content-services/repository-data"
  activemq:
    existingClaim: "alfresco-volume-claim"
    mountPath: "/opt/activemq/data"
    subPath: "alfresco-infrastructure/activemq-data"
  filestore:
    enabled: false
    existingClaim: "alfresco-volume-claim"
    data:
      mountPath: "/tmp/Alfresco"
      subPath: "alfresco-content-services/filestore-data"
  search:
    data:
      mountPath: "/opt/alfresco-search-services/data"
      subPath: "alfresco-content-services/solr-data"

activemq:
    enabled: true

alfresco-search:
  type: "search-services"
  enabled: false
  alfresco-insight-zeppelin:
    insightzeppelin:
      enabled: false
  ingress:
    # Alfresco Search services endpoint ('/solr') is disabled by default
    # To enable it please see: acs-deployment configuration table](https://github.com/Alfresco/acs-deployment/tree/master/helm/alfresco-content-services#configuration)
    enabled: false
  persistence:
    enabled: false
# If enabled is set to false, then external host and port need to point to the external instance of SOLR6, and in this case:
# Note: Rule_05-network-policy-search will be disabled.
# Note: Rule_04-network-policy-repository internal trafic to SOLR6 instance will be disabled.
# Note: ingress-repository will not block external trafic to */solr/*

# Defines properties required by alfresco for connecting to the database
# Note! : If you set database.external to true you will have to setup the driver, user, password and JdbcUrl
# Also make sure that the container has the db driver in /usr/local/tomcat/lib since the current image only has the postgresql driver
database:
  external: false
  # driver:     #ex: org.postgresql.Driver
  # user:     #ex: alfresco
  # password:     #ex: alfresco
  # url:    # ex: jdbc:postgresql://oldfashioned-mule-postgresql-acs:5432/alfresco

# Defines the properties to be used for the required postgres DB
# Note: the database (tables) information is also saved in the persistent volume claim
postgresql:
  replicaCount: 1
  ## If true, install the postgresql chart alongside Alfresco Content Services.
  # Note: Set this to false if you use an external database.
  enabled: true
  nameOverride: postgresql-acs
  image:
    tag: "13.1.0"
    pullPolicy: IfNotPresent
  postgresqlUsername: alfresco
  postgresqlPassword: alfresco
  postgresqlDatabase: alfresco
  postgresqlExtendedConf:
    max_connections: 300
    log_min_messages: LOG
  storageClass: gp2
  persistence:
    enabled: true
    #existingClaim: "alfresco-volume-claim"
    storageClass: gp2
    #subPath: "alfresco-content-services/database-data"
  resources:
    requests:
      memory: "1500Mi"
    limits:
      memory: "1500Mi"

metadataKeystore:
  # keystorePassword: ""
  # keyPassword: ""
  defaultKeystorePassword: "mp6yc0UD9e"
  defaultKeyPassword: "oKIWzVdEdA"

# Disable features
alfresco-digital-workspace:
  enabled: false
alfresco-sync-service:
  syncservice:
    enabled : false
postgresql-syncservice:
  enabled: false
ai:
  enabled: false
s3connector:
  enabled: false
email:
  server:
    enabled: false
  inbound:
    enabled: false
imap:
  server:
    enabled: false

global:

# -- If there is a need to pull images from a private docker repo, a secret can be defined in helm and passed as an argument
# to the install command:
# e.g.: helm install alfresco-content-services --set global.alfrescoRegistryPullSecrets=quay-registry-secret
# or uncomment the following line if you don't want/need to pass it as a parameter on every install command :
# global.alfrescoRegistryPullSecrets: quay-registry-secret
# for more information: https://github.com/Alfresco/alfresco-anaxes-shipyard/blob/master/SECRETS.md

# -- Global definition of Docker registry pull secret which can be accessed by dependent ACS Helm chart(s)
#  alfrescoRegistryPullSecrets:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
#  registryPullSecrets:
#    - quay-registry-secret

  # -- Choose if you want AI capabilities (globally - including ADW AI plugin)
  ai:
    enabled: false

# ai:
#   aws:
#   accessKey:
#   secretAccessKey:
#   region:
#   s3Bucket:
#   comprehendRoleARN: