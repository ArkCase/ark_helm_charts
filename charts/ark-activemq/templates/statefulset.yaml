{{- if or .Values.enabled (not (hasKey .Values "enabled")) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ark-activemq.fullname" . }}
  labels:
    {{- include "ark-activemq.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "ark-activemq.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "ark-activemq.fullname" . }}
  template:
    metadata:
      annotations:
        {{- if .Values.ports.metrics }}
        # NB: Both these annotation values must be of type "string"
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.ports.metrics | quote }}
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "ark-activemq.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ark-activemq.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: activemq
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            {{- if .Values.ports.metrics }}
            - name: ACTIVEMQ_SUNJMX_START
              value: "-javaagent:/app/jmx_prometheus_javaagent.jar={{ .Values.ports.metrics }}:/app/jmx-prometheus-config.yaml"
            {{- else }}
            - name: ACTIVEMQ_SUNJMX_START
              value: ""
            {{- end }}
          ports:
            {{- if .Values.ports.console }}
            - name: console
              protocol: TCP
              containerPort: {{ .Values.ports.console }}
            {{- end }}
            {{- if .Values.ports.amqp }}
            - name: amqp
              protocol: TCP
              containerPort: {{ .Values.ports.amqp }}
            {{- end }}
            {{- if .Values.ports.mqtt }}
            - name: mqtt
              protocol: TCP
              containerPort: {{ .Values.ports.mqtt }}
            {{- end }}
            {{- if .Values.ports.openwire }}
            - name: openwire
              protocol: TCP
              containerPort: {{ .Values.ports.openwire }}
            {{- end }}
            {{- if .Values.ports.websocket }}
            - name: websocket
              protocol: TCP
              containerPort: {{ .Values.ports.websocket }}
            {{- end }}
            {{- if .Values.ports.stomp }}
            - name: stomp
              protocol: TCP
              containerPort: {{ .Values.ports.stomp }}
            {{- end }}
          {{- $first_open_port := or .Values.ports.amqp .Values.ports.mqtt .Values.ports.openwire .Values.ports.websocket .Values.ports.stomp }}
          {{- if not $first_open_port }}
            {{- fail "At least one of the AMQP, MQTT, Openwire, Websocket or STOMP port must be specified" }}
          {{- end }}
          readinessProbe:
            tcpSocket:
              port: {{ $first_open_port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          livenessProbe:
            tcpSocket:
              port: {{ $first_open_port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /app/data
            - name: secrets
              mountPath: /app/conf
              readOnly: true
      volumes:
        - name: secrets
          secret:
            secretName: {{ include "ark-activemq.fullname" . }}
        - name: data
          {{- if (include "common.persistence.isEnabled" .) }}
          persistentVolumeClaim:
            {{- if (((.Values.persistence).data).claim).name }}
            claimName: {{ .Values.persistence.data.claim.name | quote }}
            {{- else }}
            claimName: {{ template "common.fullname" . }}-data
            {{- end }}
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

{{- if (include "common.persistence.isEnabled" .) }}

{{ include "common.persistence.validateVolumeConfig" ( dict "vol" ((.Values.persistence).data) "ctx" $ "name" "data" ) }}
{{- if not (((.Values.persistence).data).claim).name }}
{{- if not (((.Values.persistence).data).claim).spec }}
---
apiVersion: v1
kind: PersistentVolume
metadata: 
  name: {{ template "common.fullname" . }}-data
  namespace: {{ .Release.Namespace }}
  labels: 
    {{- include "common.labels" . | nindent 4 }}
{{- if (((.Values.persistence).data).annotations) }}
{{- with .Values.persistence.data.annotations  }}
        annotations:
{{ toYaml . | indent 4 }}
{{- end }}
{{- end }}
{{- if not (((.Values.persistence).data).volume) }}
spec:
  storageClassName: "manual"
  persistentVolumeReclaimPolicy: Retain
        accessModes:
    - "ReadWriteOnce"
  capacity:
    storage: "8Gi"
  hostPath:
    path: "{{ coalesce (.Values.persistence).localPath ((.Values.global).persistence).localPath "/opt/app/arkcase" }}/data/activemq"
{{- else }}
spec: {{- include "common.tplvalues.render" (dict "value" (((.Values.persistence).data).volume) "context" $) | nindent 2 }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}
