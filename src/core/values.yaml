# Default values for ark-core.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This can be set to "false" by parent charts. If not defined, it will be taken as true
#enabled: true

# licenses:
#   pdfnet: "some-license-string"

#
# This should group all application-specific configurations
#
configuration:

  baseUrl: "http://server.dev.arkcase.com:8080/arkcase"

  proxy:
    reports: "http://reports:8080"
    weather: "https://api.openweathermap.org/data/2.5"

  db:
    dialect: "postgres"
    hostname: "rdbms"
    # port: ...
    # adminUsername: ....
    # adminPassword: ....

    schema:
      arkcase:
        database: "arkcase"
        # schema: "public"
        # instance: "..."
        username: "arkcase"
        password: "arkcase"
      cloudconfig:
        database: "cloudconfig"
        # schema: "public"
        # instance: "..."
        username: "cloudconfig"
        password: "cloudconfig"

  ingress:
    enabled: false
    # className: haproxy
    # hostName: my.host.name
    # tls: my-secret-name

  ldap:
    default: "arkcase"
    arkcase: &ldapArkcase
      domain: "dev.arkcase.com"
      url: "ldaps://ldap:636"
      # Base DN will be taken as relative from the root DN
      baseDn: "ou=ArkCase"
      bind:
        dn: "cn=ArkCase Administrator,ou=Users,${baseDn}"
        password: "$arkcase-admin$"
      admin:
        dn: "cn=ArkCase Administrator"
        role: "cn=ARKCASE_ADMINISTRATOR"
      search:
        users:
          base: "ou=Users"
          attribute: "sAMAccountName"
          filter: "(&(objectClass=user)(sAMAccountName={0}))"
          allFilter: "(objectClass=user)"
          prefix: ""
        groups:
          base: "ou=Groups"
          attribute: "cn"
          filter: "(&(objectClass=group)(cn={0}))"
          allFilter: "(objectClass=group)"
          membership: "(&(objectClass=group)(member={0}))"
          ignoreCase: "false"
          subtree: "true"
          rolePrefix: ""
          prefix: ""
    foia:
      <<: *ldapArkcase
      baseDn: "ou=FOIA"
      bind:
        dn: "cn=FOIA Administrator,ou=Users,${baseDn}"
        password: "$foia-admin$"

  configServer:
    # For now, it's collocated ... eventually it will live elsewhere
    url: "http://localhost:9999"

  content: &content
    dialect: "alfresco"
    url: "http://content-main:8080/alfresco"
    shareUrl: "http://content-share:8080/share"
    username: "admin"
    password: "admin"

  messaging: &messaging
    url: "tcp://messaging"
    stomp: 61613
    openwire: 61616
    username: "arkcase"
    password: "arkcase"

  reports:
    url: "http://reports:8080"

  search:
    url: "http://search:8983"

  # Add configurations here
  cloudconfig:
    # Settings for config

  arkcase:

resources:
  development:
    arkcase:
      limits: "3Gi,2"
    cloudconfig:
      limits: "2Gi,1"

initDependencies:
  enabled: true
  mode: all
  template:
    # Any of the required ports are enough to succeed
    mode: any
    initialDelay: 10
    delay: 5
    timeout: 5
    attempts: 12
  dependencies:
    app-artifacts:
      ports:
        - 80
    rdbms:
      ports:
        # In case of SQLServer
        - 1443
        # In case of Oracle
        - 1521
        # In case of MySQL/MariaDB
        - 3306
        # In case of PostgreSQL
        - 5432
    ldap:
      ports:
        - 389
        - 636
        - 9000
    messaging:
      ports:
        - 61613
        - 61614
        - 61616
    search:
      ports:
        - 80
        - 443
        - 8983
    content:
      ports:
        - 8080
        - 9000

# Please leave the `replicaCount` to 1 for the time being. Clustering is not
# supported yet.
replicaCount: 1

platform: ""

licenses:
  - "pdftron"

image:
  pullPolicy: IfNotPresent
  pullSecrets:
    - name: aws-arkcase-pull

  registry: "public.ecr.aws"

  # Overrides the image tag whose default is the chart appVersion.

  deployer:
    repository: "arkcase/deployer"
    tag: 1.0.1-01

  # cloudconfig:
  #   repository: "arkcase/cloudconfig"
  #   tag: "some-tag"

  arkcase:
    repository: "arkcase/core"
    tag: "1.4.0-01"

  # setperm:
  #   registry: "alternate-registry"
  #   repository: "arkcase/setperm"
  #   tag: "latest"

  # seed-content:
  #   registry: "alternate-registry"
  #   repository: "arkcase/nettest"
  #   tag: "latest"


# You generally shouldn't mess with these. These exist to support some name-generation templates
nameOverride: ""
fullnameOverride: ""

# Custom annotations to apply throughout
annotations:

# Custom labels to apply throughout
labels:

updateStrategy: RollingUpdate
rollingUpdatePartition: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations:
  # Annotations to add to the service account
  labels:
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

securityContext:
  template:
    # You must specify an `fsGroup` to allow ActiveMQ write access to mounted
    # volumes (as long as ActiveMQ runs as a non-root user, which should be the
    # case). Any random number will do.
    fsGroup: &fsGroup 1997
    fsGroupChangePolicy: OnRootMismatch
  cloudconfig:
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: &runAsUser 1997
    # runAsGroup: *fsGroup
  arkcase:
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: &runAsUser 1997
    # runAsGroup: *fsGroup

#autoscaling:
  #enabled: false
  #minReplicas: 1
  #maxReplicas: 100
  #targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector:

tolerations:

affinity:

persistence:
  # If set to `false`, an `emptyDir` will be used instead and all other `persistence.*` parameters
  # are ignored.
  enabled: true

  # Set the default capacity for volumes in case none is assigned explicitly
  # and the default value is insufficient
  volumeSize:
    conf: "4Gi"
    fsrv: "8Gi"
    home: "8Gi"
    init: "4Gi"
    logs: "2Gi"
    wars: "4Gi"

#  The volumes for persistent data
  volumes:
# The volume where the data will be stored (RTFM for more info on how to
# properly declare volumes)

service:
  cloudconfig:
    ports:
      - name: cloudconfig
        protocol: TCP
        port: &cloudconfigPort 9999
##
## Configure extra options for containers' liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param service.probes.enabled Enable liveness and readiness probes
## @param service.probes.spec.initialDelaySeconds Initial delay seconds for liveness and readiness probes
## @param service.probes.spec.periodSeconds Period seconds for liveness and readiness probes
## @param service.probes.spec.timeoutSeconds Timeout seconds for liveness and readiness probes
## @param service.probes.spec.failureThreshold Failure threshold for liveness and readiness probes
## @param service.probes.spec.successThreshold Success threshold for liveness and readiness probes
##
    probes:
      enabled: true
      spec:
        httpGet:
          path: "/actuator/health"
          port: *cloudconfigPort
        initialDelaySeconds: 10
        periodSeconds: 5
        timeoutSeconds: 5
        failureThreshold: 60
        successThreshold: 1

  arkcase:
    ports:
      - name: arkcase
        protocol: TCP
        port: &arkcasePort 8080
      - name: debug
        protocol: TCP
        port: &debugPort 8888
    probes:
      enabled: true
      spec:
        httpGet:
          path: "/arkcase"
          port: *arkcasePort
        initialDelaySeconds: 300
        periodSeconds: 30
        timeoutSeconds: 10
        failureThreshold: 150
        successThreshold: 1
