#!/bin/bash
set -euo pipefail

[ -v BASE_DIR ] || BASE_DIR="/app"
[ -v DEPL_DIR ] || DEPL_DIR="${BASE_DIR}/depl"
[ -v CONF_DIR ] || CONF_DIR="${DEPL_DIR}/conf"
[ -v WARS_DIR ] || WARS_DIR="${DEPL_DIR}/wars"

say() {
	echo -e "$(date -u -Ins): ${@}"
}

fail() {
	say "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

[ -v SKIP_WARS ] || SKIP_WARS=""
[ -v SKIP_CONF ] || SKIP_CONF="false"
[ -v DEV ] || DEV="false"
case "${DEV,,}" in
	true | t | yes | y | on | en | enabled | enable | 1 ) DEV="true" ;;
	* ) DEV="false" ;;
esac

if ${DEV} ; then
	SKIP_WARS="$(echo "${SKIP_WARS}" | tr '/' '\n' | sort -u | sed -e '/^\s*$/d')"
	case "${SKIP_CONF,,}" in
		true | t | yes | y | on | en | enabled | enable | 1 ) SKIP_CONF="true" ;;
		* ) SKIP_CONF="false" ;;
	esac

	[ -v DEV_DIR ] || DEV_DIR="${BASE_DIR}/dev"
	DEV_WARS_DIR="${DEV_DIR}/wars"
	DEV_CONF_DIR="${DEV_DIR}/conf"
fi

#
# Deploy all WAR files
#
WAR="$(list-artifacts /arkcase/wars)" || fail "Failed to list the WAR files to be deployed"
readarray -t WAR < <(echo -n "${WAR}")
say "Found ${#WAR[@]} WAR files to deploy: [${WAR[@]}]"
for war in "${WAR[@]}" ; do

	if ${DEV} ; then
		ARTIFACT_NAME="${war##*/}"
		BASENAME="${ARTIFACT_NAME%.*}"

		# If we're in dev mode, then first we check to see if this
		# WAR is in the list of excluded WARs
		if grep -q "^${BASENAME}$" <<< "${SKIP_WARS}" ; then
			say "The WAR file [${BASENAME}] is on the skip list, will ignore"
			continue
		fi

		# This war is not excluded, so let's first check to see if
		# there's a development version of the WAR we should be
		# deploying instead
		if [ -s "${DEV_WARS_DIR}/${ARTIFACT_NAME}" ] ; then
			# We have a custom WAR to deploy! Use it!
			say "Found a development WAR at [${DEV_WARS_DIR}/${ARTIFACT_NAME}], will deploy it instead"
			mkdir -p "${WARS_DIR}/${BASENAME}"
			unzip -o -d "${WARS_DIR}/${BASENAME}" "${DEV_WARS_DIR}/${ARTIFACT_NAME}"
			continue
		fi
	fi

	# There's no development version, and the WAR is not excluded,
	# so let's go ahead and deploy it normally
	deploy-artifact extractdir "${war}" "${WARS_DIR}" || fail "Failed to deploy the WAR from [${war}]"
done

if ${DEV} ; then
	ARTIFACT_NAME="01-conf.zip"
	BASENAME="${ARTIFACT_NAME%.*}"

	if [ -s "${DEV_CONF_DIR}/${ARTIFACT_NAME}" ] ; then
		# We have a custom config to deploy! Use it!
		say "Found a development configuration at [${DEV_CONF_DIR}/${ARTIFACT_NAME}], will deploy it instead"
		unzip -o -d "${CONF_DIR}" "${DEV_CONF_DIR}/${ARTIFACT_NAME}"
		SKIP_CONF="true"
	fi
fi

if ! ${SKIP_CONF} ; then
	#
	# Deploy all the .arkcase configurations
	#
	CONF="$(list-artifacts /arkcase/conf)" || fail "Failed to list the CONF files to be deployed"
	readarray -t CONF < <(echo -n "${CONF}")
	say "Found ${#CONF[@]} CONF files to deploy: [${CONF[@]}]"
	for conf in "${CONF[@]}" ; do
		deploy-artifact extract "${conf}" "${CONF_DIR}" || fail "Failed to deploy the configuration from [${conf}]"
	done
fi

#
# This is the only fix we know must be applied FOR SURE each time
#
realm-fix || fail "Failed to fix the realms information in the rules files"

say "Configuration Initialization Complete"
exit 0
