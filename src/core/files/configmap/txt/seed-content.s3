#!/usr/bin/python3

import argparse
from datetime import datetime
from datetime import timezone
import json
import logging
import os
import re
import shutil
import subprocess
import sys
import traceback
import urllib
import yaml

ENV_INIT_SEED_CONF         = "INIT_SEED_CONF"
ENV_INIT_SEED_CONTENT      = "INIT_SEED_CONTENT"
ENV_INIT_SEED_SHARE        = "INIT_SEED_SHARE"
ENV_INIT_SEED_USERNAME     = "INIT_SEED_USERNAME"
ENV_INIT_SEED_PASSWORD     = "INIT_SEED_PASSWORD"
ENV_INIT_SEED_REGION       = "INIT_SEED_REGION"
ENV_INIT_SEED_IGNORE_DUPES = "INIT_SEED_IGNORE_DUPES"

parser = argparse.ArgumentParser(description="Alfresco Content Seeder")
parser.add_argument("config", metavar="config", action="store", help=f"The configuration to use (if not given, it will be read from the {ENV_INIT_SEED_CONF} environment variable)", type=str, nargs="?")
parser.add_argument("--content", metavar="content", action="store", help=f"The Alfresco content URL (if not given, it will be read from the {ENV_INIT_SEED_CONTENT} environment variable)", type=str, nargs=1)
parser.add_argument("--username", metavar="username", action="store", help=f"The username to authenticate with (if not given, it will be read from the {ENV_INIT_SEED_USERNAME} environment variable)", type=str, nargs=1)
parser.add_argument("--password", metavar="password", action="store", help=f"The password to authenticate with (if not given, it will be read from the {ENV_INIT_SEED_PASSWORD} environment variable)", type=str, nargs=1)
parser.add_argument("--region", metavar="region", action="store", help=f"The region to work in (if not given, it will be read from the {ENV_INIT_SEED_REGION} environment variable)", type=str, nargs=1)
parser.add_argument("--ignore-dupes", action="store_true", help=f"A flag to indicate whether to continue processing even if duplicate buckets are encountered (if not given, it will be read from the {ENV_INIT_SEED_IGNORE_DUPES} environment variable)", default=False)

args = parser.parse_args()

logging.basicConfig(level=logging.INFO, format = '%(asctime)s - %(levelname)s - %(message)s')

def fail(msg):
	logging.error(msg)
	exit(1)

def to_boolean(v):
	t = type(v)
	if t == bool:
		return t
	if t == str:
		return ("true" == v.lower())
	return True if v else False

def aws(*args):
	return subprocess.run([ "aws" ] + list(args) + ["--endpoint-url", CONTENT], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

def s3(*args):
	return aws("s3", *args)

def s3api(*args):
	return aws("s3api", *args)

if args.config:
	# If the parameter is given, use it
	source_file = args.config
	if source_file == "-":
		source_file = sys.stdin
		source_file_is_file = False
	else:
		source_file_is_file = True
elif ENV_INIT_SEED_CONF in os.environ:
	source_file = os.environ[ENV_INIT_SEED_CONF]
	# Check if this points to a file ...
	source_file_is_file = (os.path.exists(source_file) and os.path.isfile(source_file))
else:
	logging.error("Failed to get the configuration from parameters or the environment")
	parser.print_help()
	exit(1)

IGNORE_DUPES = False
if args.ignore_dupes:
	IGNORE_DUPES = args.ignore_dupes
elif ENV_INIT_SEED_IGNORE_DUPES in os.environ:
	IGNORE_DUPES = to_boolean(os.environ[ENV_INIT_SEED_IGNORE_DUPES])

show_data = True
if source_file_is_file:
	logging.info(f"Loading the configuration from the file [{source_file}]...")
	with open(source_file, "r") as f:
		data = yaml.safe_load(f)
else:
	if type(source_file) == str:
		logging.info(f"Parsing the configuration from the string: [\n{source_file}\n]...")
		show_data = False
	else:
		logging.info("Parsing the configuration from stdin...")
	data = yaml.safe_load(source_file)

if data is None:
	fail("Data is not in YAML format")

# Use --endpoint-url parameter to set this value
CONTENT = "http://localhost:9000/"
if args.content:
	CONTENT = args.content[0]
elif ENV_INIT_SEED_CONTENT in os.environ:
	CONTENT = os.environ[ENV_INIT_SEED_CONTENT]
if not CONTENT:
	fail("Must provide a CONTENT URL to connect to")
logging.info(f"Using CONTENT URL [{CONTENT}]")

USERNAME = "admin"
if args.username:
	USERNAME = args.username[0]
elif ENV_INIT_SEED_USERNAME in os.environ:
	USERNAME = os.environ[ENV_INIT_SEED_USERNAME]
if not USERNAME:
	USERNAME = "admin"
logging.info(f"Using username [{USERNAME}]")

PASSWORD = "admin"
if args.password:
	PASSWORD = args.password[0]
elif ENV_INIT_SEED_PASSWORD in os.environ:
	PASSWORD = os.environ[ENV_INIT_SEED_PASSWORD]
if not PASSWORD:
	fail("Must provide a password to authenticate with")

REGION = "us-east-1"
if args.region:
	REGION = args.region[0]
elif ENV_INIT_SEED_REGION in os.environ:
	REGION = os.environ[ENV_INIT_SEED_REGION]

if "buckets" not in data:
	logging.info("No buckets to seed.")
	exit(0)

buckets = data["buckets"]
if not buckets:
	logging.info("No buckets to seed.")
	exit(0)

VERSION_JSON = json.dumps({
	"MFADelete"	: "Enabled",
	"Status"	: "Enabled"
})

try:
	os.environ["AWS_ACCESS_KEY_ID"] =  USERNAME
	os.environ["AWS_SECRET_ACCESS_KEY"] = PASSWORD
	os.environ["AWS_REGION"] = REGION

	for name, config in buckets.items():
		name = name.strip()
		if not name:
			fail("The configuration data is malformed - there is a bucket with an empty name")

		if type(bucket) != str:
			fail(f"The configuration data is malformed - the value 'buckets.{name}' must be a string")

		# Check to see if the bucket exists ...
		result = s3api("head-bucket", "--bucket", name)
		if result.returncode != 0:
			if IGNORE_DUPES:
				logging.info(f"The bucket [{name}] already exists, skipping!")
				continue
			# if it exists and IGNORE_DUPES is False, then this is an error
			fail(f"The bucket [{name}] already exists, and IGNORE_DUPES is not set - cannot continue.")

		# TODO: Enable selection of locking support per bucket
		# The bucket does not exist, so create it (always add locking support)
		logging.info(f"Creating the bucket [{name}]...")
		result = s3api("create-bucket", "--bucket", name, "--object-lock-enabled-for-bucket")
		if result.returncode != 0:
			fail(f"Failed to create the bucket [{name}] (rc={result.returncode}):\n{result.stdout}")

		# TODO: Enable selection of versioning per bucket
		# Enable versioning on the bucket
		logging.info(f"Setting the versioning configuration for the bucket [{name}]...")
		result = s3api("put-bucket-versioning", "--bucket", name, "--versioning-configuration", VERSION_JSON)
		if result.returncode != 0:
			fail(f"Failed to set the versioning configuration for the bucket [{name}] (rc={result.returncode}):\n{result.stdout}")

		# TODO: Enable retention policy description per bucket

	logging.info("Seeding completed.")
	exit(0)
except KeyboardInterrupt:
	logging.error("Execution interrupted, exiting.")
	sys.exit(1)
except Exception as e:
	fail(f"Seeding procedure failed\n{traceback.format_exc()}")
