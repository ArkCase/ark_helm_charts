{{- $db := (include "arkcase.db.schema" (dict "ctx" $ "schema" "arkcase") | fromYaml) -}}
{{- $baseUrl := (include "arkcase.tools.parseUrl" (include "arkcase.tools.conf" (dict "ctx" $ "value" "baseUrl")) | fromYaml) -}}
{{- $foia := (include "arkcase.foia" $ | fromYaml) -}}
{{- with ((.Values.global).licenses).pdftron }}
pdftron:
  {{- if .viewer }}
  viewer.license: {{ .viewer | b64dec | quote }}
  {{- end }}
  {{- if .audioVideo }}
  audioVideo.viewer.license: {{ .audioVideo | b64dec | quote }}
  {{- end }}
{{- end }}

# This is set to disable the "Snowbound" advert button ... code should be modified to
# not require this (i.e. remove the button altogether)
fileEditingEnabled: true

#
# Begin integrations with external systems
#
{{- with (include "arkcase.core.integrations" $ | fromYaml) }}
  {{- . | toYaml | nindent 0 }}
{{- end }}
#
# End integrations with external systems
#

report:
  plugin:
    # Attempted fix for easier Pentaho integration
    PENTAHO_SERVER_URL: ""
    PENTAHO_SERVER_PORT: 0

    # TODO: Use the new service accounts for this, instead of the ArkCase admin user
    PENTAHO_SERVER_USER: {{ include "arkcase.tools.conf" (dict "ctx" $ "value" "arkcase.adminUsername") | quote }}
    PENTAHO_SERVER_PASSWORD: {{ include "arkcase.tools.conf" (dict "ctx" $ "value" "arkcase.adminPassword") | quote }}

    # This is the internally-visible port where traffic will be proxied to/from
    {{- $pentahoUrl := (include "arkcase.tools.parseUrl" (include "arkcase.tools.conf" (dict "ctx" $ "value" "reports.url")) | fromYaml) }}
    PENTAHO_SERVER_INTERNAL_URL: {{ printf "%s://%s" $pentahoUrl.scheme $pentahoUrl.hostname | quote }}
    PENTAHO_SERVER_INTERNAL_PORT: {{ $pentahoUrl.port }}

{{- $content := (include "arkcase.cm.info" $ | fromYaml) }}
{{- if (eq "alfresco" $content.dialect) }}
alfresco:
  admin:
    baseurl: {{ printf "%s/s/enterprise/admin/admin-sync" $content.url.baseUrl | quote }}
    username: &alfrescoUsername {{ $content.username | quote }}
    password: &alfrescoPassword {{ $content.password | quote }}

  sync:
    protocol: &alfrescoScheme {{ $content.url.scheme | quote }}
    host: &alfrescoHost {{ $content.url.hostname | quote }}
    port: &alfrescoPort {{ $content.url.port }}
    username: *alfrescoUsername
    password: *alfrescoPassword
    contextRoot: &alfrescoContext {{ $content.url.path | quote }}
    enabled: {{ (not (empty (include "arkcase.toBoolean" $content.sync))) }}

alfresco_protocol: *alfrescoScheme
alfresco_host: *alfrescoHost
alfresco_port: *alfrescoPort
alfresco_user: *alfrescoUsername
alfresco_password: *alfrescoPassword
alfresco_contextRoot: *alfrescoContext
{{- end }}

fileManagement:
  fileRepositoryType: {{ $content.dialect | quote }}
{{- if (eq "s3" $content.dialect) }}
  s3:
    url: {{ $content.url.baseUrl | quote }}
    region: {{ $content.settings.region | default "us-east-1" | quote }}
    accessKey: {{ $content.username | quote }}
    secretKey: {{ $content.password | quote }}
    bucketName: {{ $content.settings.bucket | default "arkcase" | quote }}
{{- end }}

database:
  platform: {{ printf "org.eclipse.persistence.platform.database.%sPlatform" $db.platform | quote }}
  # Should this be "true" when SSL is active?
  encryption_enabled: true
  encryption_supported: true

acm:
  driverClassName: {{ $db.jdbc.driver | quote }}
  # schema: "arkcase"
  url: {{ $db.jdbc.url | quote }}
  username: {{ $db.username | quote }}
  password: {{ $db.password | quote }}
# Which are the allowed values here?
activiti.db.type: {{ $db.activiti | quote }}

onlyoffice.plugin:
  arkcase.baseurl: &baseUrl {{ $baseUrl.url | quote }}

{{- $solr := (include "arkcase.tools.parseUrl" (include "arkcase.tools.conf" (dict "ctx" $ "value" "search.url")) | fromYaml) }}
solr:
  protocol: {{ $solr.scheme | quote }}
  host: {{ $solr.hostname | quote }}
  port: {{ $solr.port }}

{{- $messaging := (include "arkcase.tools.parseUrl" (include "arkcase.tools.conf" (dict "ctx" $ "value" "messaging.url")) | fromYaml) }}
acm.websockets:
  stomp_broker_relay:
    relay_protocol: {{ $messaging.scheme | quote }}
    relay_host: {{ $messaging.hostname | quote }}
    relay_port: {{ include "arkcase.tools.conf" (dict "ctx" $ "value" "messaging.stomp") }}
    client_login: &stompUsername {{ include "arkcase.tools.conf" (dict "ctx" $ "value" "messaging.username") | quote }}
    client_passcode: &stompPassword {{ include "arkcase.tools.conf" (dict "ctx" $ "value" "messaging.password") | quote }}
    system_login: *stompUsername
    system_passcode: *stompPassword
    # Use the common keystore (let's avoid it for now)
    keystore: "${k8s.keystore.file}"
    keystore_type: "${k8s.keystore.type}"
    keystore_pass: "${k8s.keystore.pass}"
    # Use the system truststore
    truststore: "/etc/pki/java/cacerts"
    truststore_pass: "changeit"
    truststore_type: "JKS"

acm.hazelcast:
  log.folder: "/app/logs/"

{{ include "arkcase.core.email" $ }}

application:
  properties:
    baseUrl: *baseUrl

  rolesToGroups:
    {{- $domain := ((include "arkcase.ldap" (dict "ctx" $ "value" "domain")) | upper) }}
    {{- $foiaDomain := "" -}}
    {{- if $foia }}
      {{- $foiaDomain = ($foia.ldap.domain | upper) }}
    {{- end }}
    ROLE_ADMINISTRATOR:
      - ARKCASE_ADMINISTRATOR@{{ $domain }}
      - ARKCASE_ENTITY_ADMINISTRATOR@{{ $domain }}
      {{- if $foia }}
      - ARKCASE_PORTAL_ADMINISTRATOR@{{ $foiaDomain }}
      - ARKCASE_PORTAL_ENTITY_ADMINISTRATOR@{{ $foiaDomain }}
      {{- end }}
    ROLE_BILLING_QUEUE:
      - ARKCASE_ADMINISTRATOR@{{ $domain }}
      {{- if $foia }}
      - ARKCASE_PORTAL_ADMINISTRATOR@{{ $foiaDomain }}
      {{- end }}
      - ARKCASE_SUPERVISOR@{{ $domain }}
      - ARKCASE_CONTRIBUTOR@{{ $domain }}
      - ARKCASE_CONSUMER@{{ $domain }}
      - ARKCASE_EXTERNAL@{{ $domain }}
    ROLE_CONSUMER:
      - ARKCASE_CONSUMER@{{ $domain }}
    ROLE_CONTRIBUTOR:
      - ARKCASE_CONTRIBUTOR@{{ $domain }}
    ROLE_ENTITY_ADMINISTRATOR:
      - ARKCASE_ENTITY_ADMINISTRATOR@{{ $domain }}
      {{- if $foia }}
      - ARKCASE_PORTAL_ENTITY_ADMINISTRATOR@{{ $foiaDomain }}
      {{- end }}
    ROLE_EXTERNAL:
      - ARKCASE_EXTERNAL@{{ $domain }}
    ROLE_SUPERVISOR:
      - ARKCASE_SUPERVISOR@{{ $domain }}
      - ARKCASE_ADMINISTRATOR@{{ $domain }}
      {{- if $foia }}
      - ARKCASE_PORTAL_ADMINISTRATOR@{{ $foiaDomain }}
      {{- end }}

notification:
  arkcase.port: {{ $baseUrl.port }}
  arkcase.url: {{ printf "%s://%s" $baseUrl.scheme $baseUrl.hostname | quote }}
  arkcase.url.base: {{ $baseUrl.url | quote }}
