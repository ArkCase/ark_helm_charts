#!/usr/bin/python
import argparse
import concurrent.futures
import errno
import json
import logging
import re
import os
import socket
import subprocess
import sys
import threading
import time
import traceback
import yaml

ENV_INIT_DEPENDENCIES = "INIT_DEPENDENCIES"

EXE_SAMBA_TOOL = "/usr/bin/samba-tool"
EXE_NET = "/usr/bin/net"

SID_RE = re.compile("^.* SID (S-\\S*)$", re.IGNORECASE)
DN_SPLIT_RE = re.compile("(?<!\\\\),")

KEY_DEBUG = "debug"
KEY_LDAP = "server"
KEY_LDAP_URL = "url"
KEY_LDAP_ADMIN_USER = "adminUser"
KEY_LDAP_ADMIN_PASS = "adminPass"
KEY_LDAP_USER_PREFIX = "userPrefix"
KEY_LDAP_GROUP_PREFIX = "groupPrefix"
KEY_LDAP_DEFAULT_PASSWORD = "defaultPassword"

KEY_SECRET_DOMAIN_NAME = "NAME"
KEY_SECRET_DOMAIN_ROOT_DN = "ROOT_DN"
KEY_SECRET_DOMAIN_BASE_DN = "BASE_DN"
KEY_SECRET_DOMAIN_REALM = "REALM"
KEY_SECRETS = [ KEY_SECRET_DOMAIN_NAME, KEY_SECRET_DOMAIN_ROOT_DN, KEY_SECRET_DOMAIN_BASE_DN, KEY_SECRET_DOMAIN_REALM ]

KEY_USER_OU = "userou"
KEY_USERS = "users"
KEY_PASSWORD = "password"
KEY_EXPIRATION_DAYS = "expirationDays"
KEY_ADMINISTRATOR = "administrator"
USER_ATTRIBUTES = {
	"firstName" : "given-name",
	"lastName" : "surname",
	"mail" : "mail-address",
	"description" : None,
}

KEY_GROUP_OU = "groupou"
KEY_GROUPS = "groups"
GROUP_ATTRIBUTES = {
	"scope" : "group-scope",
	"type" : "group-type",
	"description" : None,
	"notes" : None,
}

ENV_DEBUG = "DEBUG"

ENV_LDAP_URL = "LDAP_URL"
ENV_LDAP_ADMIN_USER = "LDAP_ADMIN_USER"
ENV_LDAP_ADMIN_PASS = "LDAP_ADMIN_PASS"

ENV_SEED_FILE = "LDAP_SEED_FILE"
ENV_USER_PREFIX = "LDAP_USER_PREFIX"
ENV_GROUP_PREFIX = "LDAP_GROUP_PREFIX"
ENV_DEFAULT_PASSWORD = "LDAP_DEFAULT_PASSWORD"
ENV_EXPIRATION_DAYS = "LDAP_EXPIRATION_DAYS"

parser = argparse.ArgumentParser(description="LDAP User/Group Initializer Script")
parser.add_argument("seedfile", action="store", help=f"The seed file to use (if not given, it will be read from the {ENV_SEED_FILE} environment variable)", type=str, nargs="?")
parser.add_argument("--user-prefix", action="store", help=f"The prefix to apply to all user names created (if not given, it will be read from the {ENV_USER_PREFIX} environment variable)", type=str, nargs=1)
parser.add_argument("--group-prefix", action="store", help=f"The prefix to apply to all group names created (if not given, it will be read from the {ENV_GROUP_PREFIX} environment variable)", type=str, nargs=1)
parser.add_argument("--default-password", action="store", help=f"The default password to be assigned to all users created (if not given, it will be read from the {ENV_DEFAULT_PASSWORD} environment variable)", type=str, nargs=1)
parser.add_argument("--expiration-days", action="store", help=f"The default expiration days to assign the new passwords if none is given specifically (if not given, it will be read from the {ENV_EXPIRATION_DAYS} environment variable)", type=str, nargs=1)

parser.add_argument("--ldap-url", action="store", help=f"The URL for the LDAP server to connect to (if not given, it will be read from the {ENV_LDAP_URL} environment variable)", type=str, nargs=1)
parser.add_argument("--ldap-admin-user", action="store", help=f"The administrator username to authenticate with (if not given, it will be read from the {ENV_LDAP_ADMIN_USER} environment variable)", type=str, nargs=1)
parser.add_argument("--ldap-admin-password", action="store", help=f"The administrator password to authenticate with (if not given, it will be read from the {ENV_LDAP_ADMIN_PASS} environment variable)", type=str, nargs=1)

parser.add_argument("--debug", action="store_true", help=f"Enable debug mode (if not given, it will be read from the {ENV_DEBUG} environment variable)")

args = parser.parse_args()

logging.basicConfig(level=logging.INFO, format = '%(asctime)s - %(levelname)s - %(message)s')

def fail(msg):
	logging.error(msg)
	exit(1)

#
# Read the required domain configurations
#
SECRETS = {}
for s in KEY_SECRETS:
	f = f"/app/secrets/DOMAIN_{s}"
	try:
		with open(f, "rt") as o:
			SECRETS[s] = o.read()
	except Exception as e:
		fail(f"Failed to read a required secret [{f}]: {e}")

DOMAIN_NAME = SECRETS[KEY_SECRET_DOMAIN_NAME]
DOMAIN_REALM = SECRETS[KEY_SECRET_DOMAIN_REALM]
DOMAIN_ROOT_DN = SECRETS[KEY_SECRET_DOMAIN_ROOT_DN]
DOMAIN_BASE_DN = SECRETS[KEY_SECRET_DOMAIN_BASE_DN]

if DOMAIN_BASE_DN == DOMAIN_ROOT_DN:
	DOMAIN_BASE_DN = ""
else:
	# Remove the root DN from the base DN
	DOMAIN_BASE_DN = DOMAIN_BASE_DN.replace("," + DOMAIN_ROOT_DN, "")

def get_config_value(conf, confName, args, argName, envName, default = None):
	if hasattr(args, argName):
		v = getattr(args, argName)

		if v is not None:
			if type(v) == list:
				v = v[0]
			return str(v)

	if conf and (confName in conf):
		v = conf[confName]
		if v is not None:
			return str(v)

	if envName in os.environ:
		v = os.environ[envName]
		if v:
			return str(v)

	return default

if len(sys.argv) < 2:
	# If no parameter is given, use an environment variable
	if ENV_SEED_FILE not in os.environ:
		parser.print_help(sys.stderr)
		sys.exit(1)
	source_file = os.environ[ENV_SEED_FILE]
	# Check if this points to a file ...
	source_file_is_file = (os.path.exists(source_file) and os.path.isfile(source_file))
else:
	# If the parameter is given, use it
	source_file = args.seedfile
	if source_file == "-":
		source_file = sys.stdin
		source_file_is_file = False
	else:
		source_file_is_file = True

show_data = True
try:
	if source_file_is_file:
		logging.info(f"Loading the configuration from the file [{source_file}]...")
		with open(source_file, "r") as f:
			data = yaml.safe_load(f)
	else:
		if type(source_file) == str:
			logging.info(f"Parsing the configuration from the string: [\n{source_file}\n]...")
			show_data = False
		else:
			logging.info("Parsing the configuration from stdin...")
		data = yaml.safe_load(source_file)
	if data is None:
		raise Exception("Data is not in YAML format")
except Exception as e:
	# Yaml parse failed ... try as JSON
	logging.warning(f"File [{source_file}] was not in YAML format, trying JSON")
	try:
		with open(source_file, "r") as f:
			data = json.load(f)
	except Exception as e:
		logging.error(e)
		sys.exit(1)

if show_data:
	logging.info(f"Loaded configuration: [{json.dumps(data, indent=4)}]")

def render_auth_info():
	# TODO: Find the admin user and password
	info = []
	if LDAP_URL:
		info += [ f"--URL={LDAP_URL}" ]
	if LDAP_ADMIN_USER:
		info += [ f"--username={LDAP_ADMIN_USER}", f"--password={LDAP_ADMIN_PASS}" ]
	return info

def run_command(command):
	if DEBUG:
		logging.info(f"\tCommand = {command}")
		command = "true"
	return subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

def samba_tool(flags):
	return run_command([ EXE_SAMBA_TOOL ] + render_auth_info() + flags)

def render_user_id(userId):
	return f"{USER_PREFIX}{userId}"

def render_group_id(groupId):
	# If the groupId starts with the plus sign, remove the plus sign and return
	# it as-is, no prefix. If it doesn't start with a plus sign, apply the prefix
	if groupId.startswith("+"):
		return re.sub("^\+", "", groupId)
	return f"{GROUP_PREFIX}{groupId}"

# To track which OUs have been created via ensure_ou_exists()
CREATED_OU = {}
def ensure_ou_exists(ou):

	# Super-shortcut... avoid processing if we already
	# created the given OU
	if ou in CREATED_OU:
		return

	logging.info(f"Ensuring that OU [{ou}] exists...")

	# The OU is a list of elements, separated by commas. Escaped commas are
	# preceded by backslashes. So we'll want to create the entire tree
	# downward, as required
	steps = DN_SPLIT_RE.split(ou)
	logging.info(f"\tSteps: {steps}")

	currentOu = ""
	while steps:

		# If necessary, prepend a comma before adding the next element
		# to the current OU
		if currentOu:
			currentOu = "," + currentOu
		currentOu = steps.pop() + currentOu
		logging.info(f"\t\tcurrentOu = {currentOu}")

		# Shortcut! Avoid testing for, or creating the current OU
		if currentOu in CREATED_OU:
			logging.info(f"\t\t\tAlready cached")
			continue

		# Ok so we haven't played with the current OU before ... is this a valid component?
		if not currentOu.lower().startswith("ou="):
			fail("The OU path may only contain OU elements: {currentOu} (full OU => {ou})")

		# The current OU is valid ... does it exist?
		result = samba_tool([ "ou", "listobjects", currentOu ])
		if result.returncode == 0:
			logging.info(f"\t\t\tAlready exists")
			CREATED_OU[currentOu] = True
			continue

		# The current OU is valid and does not exist... create it!
		result = samba_tool([ "ou", "create", currentOu ])
		if result.returncode == 0:
			logging.info(f"\tCreated OU [{currentOu}]")
			CREATED_OU[currentOu] = True
			continue

		# Ooops ... something went wrong
		fail("Failed to create the OU [{currentOu}] (rc={result}")

def create_user(userId, userData):
	userId = render_user_id(userId)
	# a) create the user
	logging.info(f"Creating user '{userId}' from [{userData}]")
	command = [ "user", "add", userId, "--random-password" ]

	if USER_OU:
		ensure_ou_exists(USER_OU)
		command += [ f"--userou={USER_OU}" ]

	for attName, attFlag in USER_ATTRIBUTES.items():
		if attFlag is None:
			attFlag = attName
		if (attName in userData) and userData[attName]:
			command += [ f"--{attFlag}={userData[attName]}" ]

	result = samba_tool(command)
	if result.returncode != 0:
		fail("Failed to create the user '{userId}' (rc={result})")

	# b) set the user's password
	if KEY_PASSWORD in userData:
		password = userData[KEY_PASSWORD]
	else:
		password = DEFAULT_PASSWORD

	if not password:
		password = f"${userId}$"

	logging.info(f"\tSetting the password for '{userId}' to [{password}]")
	command = [ "user", "setpassword", userId, f"--newpassword={password}" ]

	result = samba_tool(command)
	if result.returncode != 0:
		fail("Failed to set the password for '{userId}' (rc={result})")

	if KEY_EXPIRATION_DAYS in userData:
		expiration = userData[KEY_EXPIRATION_DAYS]
		if type(expiration) != int:
			try:
				expiration = int(str(expiration))
			except:
				# Not a valid value, so can't do anything
				expiration = None
	else:
		expiration = EXPIRATION_DAYS

	if expiration is not None:
		if expiration > 0:
			expiration = f"--days={expiration}"
			expirationDesc = f"expire after {expiration} day(s)"
		else:
			expiration = f"--noexpiry"
			expirationDesc = "never expire"

		logging.info(f"\tSetting the password for '{userId}' to {expirationDesc}")
		command = [ "user", "setexpiry", userId, expiration ]

		result = samba_tool(command)
		if result.returncode != 0:
			fail(f"Failed to set the password expiration for '{userId}' (rc={result})")

	# Finally, if appropriate, apply the admin permissions
	if KEY_ADMINISTRATOR in userData:
		administrator = userData[KEY_ADMINISTRATOR]

		# Convert to boolean
		if administrator and (type(administrator) != bool):
			administrator = (str(administrator).lower() == "true")

		if administrator:
			# Get the sid:
			result = run_command([EXE_NET, "sam", "show", f"{DOMAIN_REALM}\\{userId}"])
			if result.returncode != 0:
				fail(f"Failed to get the SID for LDAP administrator {userId}")

			output = result.stdout.decode("utf-8")
			if DEBUG:
				# Render a placeholder SID so we can view the command being rendered
				sid = "S-X-X-XX-XXXXXXXXXX-XXXXXXXXXX-XXXXXXXXXX-XXXX"
			else:
				m = SID_RE.match(output)
				if not m:
					fail(f"Unrecognized net command output looking for {userId}'s SID: [{output}]")

				# The SID is the last string that contains no spaces
				sid = m.group(1)

			branches = { USER_OU_FULL : True,  GROUP_OU_FULL : True }
			for dn in branches.keys():
				result = samba_tool(["dsacl", "set", "--action=allow", f"--sddl=(A;OICI;GA;;;{sid})", f"--objectdn={dn}"])
				if result.returncode != 0:
					output = result.stdout.decode("utf-8")
					fail(f"Failed to set LDAP administrative permissions for {userId} on branch {dn}:\n{output}")
				logging.info(f"\tGranted administrative priviliges to '{userId}' on branch [{dn}]")

	return userId

def compile_memberships(memberships, memberId, memberData):
	# No group memberships given
	if KEY_GROUPS not in memberData:
		return

	for groupId in memberData[KEY_GROUPS]:
		groupId = render_group_id(groupId)
		if groupId not in memberships:
			memberships[groupId] = set()
		memberships[groupId].add(memberId)

def create_group(groupId, groupData):
	if groupId.startswith("+"):
		logging.info(f"The group ID [{groupId}] is not owned by ArkCase, skipping its creation")

	groupId = render_group_id(groupId)
	logging.info(f"Creating group '{groupId}' from [{groupData}]")
	command = [ "group", "add", groupId ]

	if GROUP_OU:
		ensure_ou_exists(GROUP_OU)
		command += [ f"--groupou={GROUP_OU}" ]

	for attName, attFlag in GROUP_ATTRIBUTES.items():
		if attFlag is None:
			attFlag = attName
		if (attName in groupData) and groupData[attName]:
			command += [ f"--{attFlag}={groupData[attName]}" ]

	result = samba_tool(command)
	if result.returncode != 0:
		fail("Failed to create the group '{groupId}' (rc={result})")

	return groupId

def apply_memberships(groupId, members):
	if not members:
		return
	logging.info(f"Applying group memberships for '{groupId}' = {members}")
	command = [ "group", "addmembers", groupId, ",".join(members) ]

	result = samba_tool(command)
	if result.returncode != 0:
		fail("Failed to apply the memberships for group '{groupId}' (rc={result})")

serverInfo = {}
if KEY_LDAP in data:
	serverInfo = data[KEY_LDAP]
	if type(serverInfo) != dict:
		serverInfo = {}

USER_PREFIX = ""
v = get_config_value(serverInfo, KEY_LDAP_USER_PREFIX, args, "user_prefix", ENV_USER_PREFIX)
if v:
	USER_PREFIX = f"{v}."

GROUP_PREFIX = ""
v = get_config_value(serverInfo, KEY_LDAP_GROUP_PREFIX, args, "group_prefix", ENV_GROUP_PREFIX)
if v:
	GROUP_PREFIX = f"{v}."

EXPIRATION_DAYS = get_config_value(serverInfo, KEY_EXPIRATION_DAYS, args, "expiration_days", ENV_EXPIRATION_DAYS)
if EXPIRATION_DAYS is not None:
	try:
		EXPIRATION_DAYS = int(EXPIRATION_DAYS)
	except:
		fail(f"The configuration value [{EXPIRATION_DAYS}] is not a valid integer - cannot proceeed")

DEFAULT_PASSWORD = get_config_value(serverInfo, KEY_LDAP_DEFAULT_PASSWORD, args, "default_password", ENV_DEFAULT_PASSWORD)
if not DEFAULT_PASSWORD:
	DEFAULT_PASSWORD = None

LDAP_URL = get_config_value(serverInfo, KEY_LDAP_URL, args, "ldap_url", ENV_LDAP_URL)
if not LDAP_URL:
	LDAP_URL = None

LDAP_ADMIN_USER = get_config_value(serverInfo, KEY_LDAP_ADMIN_USER, args, "ldap_admin_user", ENV_LDAP_ADMIN_USER)
if LDAP_ADMIN_USER:
	LDAP_ADMIN_PASS = get_config_value(serverInfo, KEY_LDAP_ADMIN_PASS, args, "ldap_admin_password", ENV_LDAP_ADMIN_PASS)
	if not LDAP_ADMIN_PASS:
		fail(f"Must provide a password to authenticate the user {LDAP_ADMIN_USER} with")
else:
	LDAP_ADMIN_USER = None

DEBUG = get_config_value(serverInfo, KEY_DEBUG, args, "debug", ENV_DEBUG)
if DEBUG:
	DEBUG = (DEBUG.lower() == "true")
else:
	DEBUG = False

# Deduce the actual base DN removing the root DN from the end

USER_OU = None
try:
	USER_OU = data[KEY_USER_OU]
	if type(USER_OU) != str:
		USER_OU = None
	else:
		if DOMAIN_BASE_DN:
			USER_OU += f",{DOMAIN_BASE_DN}"
		USER_OU_FULL = f"{USER_OU},{DOMAIN_ROOT_DN}"
		logging.info(f"User OU: {USER_OU_FULL}")
except KeyError:
	USER_OU = None

GROUP_OU = None
try:
	GROUP_OU = data[KEY_GROUP_OU]
	if type(GROUP_OU) != str:
		GROUP_OU = None
	else:
		if DOMAIN_BASE_DN:
			GROUP_OU += f",{DOMAIN_BASE_DN}"
		GROUP_OU_FULL = f"{GROUP_OU},{DOMAIN_ROOT_DN}"
		logging.info(f"Group OU: {GROUP_OU_FULL}")
except KeyError:
	GROUP_OU = None

try:
	memberships = {}

	# 1) create the groups
	if KEY_GROUPS in data:
		groups = data[KEY_GROUPS]
		if type(groups) == dict:
			for groupId, groupData in groups.items():
				groupId = create_group(groupId, groupData)
				memberships[groupId] = set()
				compile_memberships(memberships, groupId, groupData)
		else:
			logging.error(f"The '{KEY_GROUPS}' item in the configuration data is not a map, skipping its processing")

	# 2) create users
	if KEY_USERS in data:
		users = data[KEY_USERS]
		if type(users) == dict:
			for userId, userData in users.items():
				userId = create_user(userId, userData)
				compile_memberships(memberships, userId, userData)
		else:
			logging.error(f"The '{KEY_USERS}' item in the configuration data is not a map, skipping its processing")

	# 3) apply the memberships
	for groupId, members in memberships.items():
		apply_memberships(groupId, sorted(members))

	# Done!
	sys.exit(0)
except KeyboardInterrupt:
	logging.info("INTERRUPTED!")
	os._exit(1)
