#!/bin/bash
SCRIPT="$(readlink -f "${BASH_ARGV0:-${BASH_SOURCE:-${0}}}")"
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")"

set -euo pipefail

timestamp()
{
	"${DATE}" -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

ok()
{
	say "✅ ${@}"
}

warn()
{
	say "⚠️ ${@}"
}

err()
{
	say "❌ ${@}" 1>&2
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

rsync_with_retry()
{
	local COMMAND="${1}"
	local LOCAL="${2}"
	local REMOTE="${2}"

	local COPY_ARGS=()
	case "${COMMAND}" in
		push ) MAKE_DIRECTORY="false" ; SOURCE="${LOCAL}" ; TARGET="${REMOTE}" ; COPY_ARGS=(. "${REMOTE}") ;;
		pull ) MAKE_DIRECTORY="true"  ; TARGET="${LOCAL}" ; SOURCE="${REMOTE}" ; COPY_ARGS=("${REMOTE}" .) ;;
	esac

	say "👉 Copying from [${SOURCE}] into [${TARGET}]..."
	(
		set -euo pipefail
		if [ ! -d "${LOCAL}" ] ; then
			"${MAKE_DIRECTORY}" || fail "The local directory [${LOCAL}] does not exist, no copy will be performed"
			"${MKDIR}" -p "${LOCAL}" || fail "Failed to create the non-existent directory [${LOCAL}]"
		fi
		cd "${LOCAL}" || fail "Failed to cd into [${LOCAL}] (rc=${?})"
		ATTEMPT=0
		while true ; do
			(( ATTEMPT++ ))
			say "Starting rsync (attempt # ${ATTEMPT})..."
			"${RSYNC}" "${RSYNC_RSH_FLAGS[@]}" --progress --exclude="lost+found" -RavzhH --delete-delay "${COPY_ARGS[@]}"
			RC=${?}
			case ${RC} in
				0 ) exit 0 ;;
				30 ) warn "Timeout detected, will try again..." ;;
				* ) err "Failed to copy the data (rc = ${RC})" ; exit ${RC} ;;
			esac
		done
	) || return ${?}
	ok "File copy complete!"
	return 0
}

usage()
{
	local S="$(basename "${BASH_ARGV0:-${BASH_SOURCE:-${0}}}")"
	echo -e "usage: ${S} (push|pull) server-spec [pvc-list-file]"
	echo -e ""
	echo -e "	Copy the PVC data, to/from the \${server-spec}, as described by the \${pvc-list-file}."
	echo -e ""
	echo -e "	The list file must be formatted in two space-separated colums, where the first"
	echo -e "	column is the name of the PVC, and the rest of the line is the directory the data"
	echo -e "	is to be read from/written to. Comments (#) are acceptable as long as they're"
	echo -e "	preceded by zero or more spaces; the whole line will be ignored. Empty lines or"
	echo -e "	lines filled with only spaces will be also be ignored."
	echo -e ""
	echo -e "	If \${pvc-list-file} is not given, or is given as '-', then the data will"
	echo -e "	be read from STDIN."
	echo -e ""
	echo -e "	The RSYNC session will be opened depending on the spec format:"
	echo -e ""
	echo -e "		rsync://[user@]hostname -> use rsync direct protocol (873/tcp)"
	echo -e "		ssh://[user@]hostname -> use ssh as the remote shell"
	echo -e "		rsh://[user@]hostname -> use the value of RSYNC_RSH as the remote shell"
	echo -e "		kubectl://podName[@namespace] -> use kubectl as the remote shell"
	exit 1
}

[ ${#} -ge 2 ] && [ ${#} -le 3 ] || usage

COMMAND="${1,,}"
shift

case "${COMMAND}" in
	push | pull ) ;;
	* ) err "Invalid command [${COMMAND}]\n" ; usage ;;
esac

SERVER_SPEC="${1}"
shift
case "${SERVER_SPEC}" in
	rsync://* )
		PROTOCOL="rsync"
		[[ "${SERVER_SPEC,,}" =~ ^rsync://((.+@)?[a-z0-9]([a-z0-9-]*[a-z0-9])?([.][a-z0-9]([a-z0-9-]*[a-z0-9])?)*)$ ]] || fail "The server-spec value is invalid: [${SERVER_SPEC}]"
		SERVER_SPEC="${BASH_REMATCH[1]}"
		RSYNC_RSH=""
		;;

	rsh://* )
		PROTOCOL="rsh"
		[[ "${SERVER_SPEC,,}" =~ ^rsh://((.+@)?[a-z0-9]([a-z0-9-]*[a-z0-9])?([.][a-z0-9]([a-z0-9-]*[a-z0-9])?)*)$ ]] || fail "The server-spec value is invalid: [${SERVER_SPEC}]"
		SERVER_SPEC="${BASH_REMATCH[1]}"
		[ -v RSYNC_RSH ] || fail "The RSYNC_RSH variable is not set"
		[[ "${RSYNC_RSH}" =~ [^[:space:]] ]] || fail "The RSYNC_RSH value is a blank string: [${RSYNC_RSH}]"
		;;

	ssh://* )
		PROTOCOL="ssh"
		[[ "${SERVER_SPEC,,}" =~ ^ssh://((.+@)?[a-z0-9]([a-z0-9-]*[a-z0-9])?([.][a-z0-9]([a-z0-9-]*[a-z0-9])?)*)$ ]] || fail "The server-spec value is invalid: [${SERVER_SPEC}]"
		SERVER_SPEC="${BASH_REMATCH[1]}"
		RSYNC_RSH="$(type -P ssh)" || fail "The SSH executable was not found in the path"
		[ -e "${RSYNC_RSH}" ] || fail "The $(basename "${RSYNC_RSH}") could not be found at [${RSYNC_RSH}]"
		[ -f "${RSYNC_RSH}" ] || fail "The path [${RSYNC_RSH}] is not a regular file"
		[ -r "${RSYNC_RSH}" ] || fail "The file [${RSYNC_RSH}] is not readable"
		[ -x "${RSYNC_RSH}" ] || fail "The file [${RSYNC_RSH}] is not executable"
		export RSYNC_RSH
		;;

	kubectl://* )
		PROTOCOL="kubectl"
		[[ "${SERVER_SPEC,,}" =~ ^kubectl://([a-z0-9]([a-z0-9-]*[a-z0-9])?(@([a-z0-9]([a-z0-9-]*[a-z0-9])?)))$ ]] || fail "The server-spec value is invalid: [${SERVER_SPEC}]"
		SERVER_SPEC="${BASH_REMATCH[1]}"
		RSYNC_RSH="${BASEDIR}/kubectl-helper"
		[ -e "${RSYNC_RSH}" ] || fail "The $(basename "${RSYNC_RSH}") could not be found at [${RSYNC_RSH}]"
		[ -f "${RSYNC_RSH}" ] || fail "The path [${RSYNC_RSH}] is not a regular file"
		[ -r "${RSYNC_RSH}" ] || fail "The file [${RSYNC_RSH}] is not readable"
		[ -x "${RSYNC_RSH}" ] || fail "The file [${RSYNC_RSH}] is not executable"
		export RSYNC_RSH
		;;

	* ) err "Unrecognized server-spec\n" ; usage ;;
esac

PVC_LIST_FILE="-"
[ ${#} -eq 1 ] && PVC_LIST_FILE="${1}" && shift

[ -n "${PVC_LIST_FILE}" ] || fail "The input file [${PVC_LIST_FILE}] may not be the empty string"
if [ "${PVC_LIST_FILE}" != "-" ] ; then
	[ -e "${PVC_LIST_FILE}" ] || fail "The input file [${PVC_LIST_FILE}] does not exist"
	[ -f "${PVC_LIST_FILE}" ] || fail "The path [${PVC_LIST_FILE}] is not a regular file"
	[ -r "${PVC_LIST_FILE}" ] || fail "The input file [${PVC_LIST_FILE}] is not readable"
fi

CAT="$(type -P cat)" || fail "Failed to find cat in the path"
DATE="$(type -P date)" || fail "Failed to find date in the path"
KUBECTL="$(type -P kubectl)" || fail "Failed to find kubectl in the path"
MKDIR="$(type -P mkdir)" || fail "Failed to find mkdir in the path"
RSYNC="$(type -P rsync)" || fail "Failed to find rsync in the path"
SED="$(type -P sed)" || fail "Failed to find sed in the path"
SORT="$(type -P sort)" || fail "Failed to find sort in the path"
TAR="$(type -P tar)" || fail "Failed to find tar in the path"
TEE="$(type -P tee)" || fail "Failed to find tee in the path"

LOG_BASE="$(basename "${0}")"
STAMP="$("${DATE}" -u "+%Y%m%d-%H%M%SZ")"
MAIN_LOG="${LOG_BASE}.${STAMP}.log"

RSYNC_RSH_FLAGS=()
[ -v RSYNC_RSH ] || RSYNC_RSH=""
[ -n "${RSYNC_RSH}" ] && RSYNC_RSH_FLAGS=(--blocking-io --rsh="${RSYNC_RSH}")

exec > >("${TEE}" "${MAIN_LOG}")
exec 2>&1
say "👉 Copying all the PVCs into the server ${SERVER_SPEC} via ${PROTOCOL}"
LINE_NO=0
while read LINE ; do
	(( ++LINE_NO ))

	# Ignore comments and empty lines
	[[ "${LINE}" =~ ^[[:space:]]*$ ]] && continue
	[[ "${LINE}" =~ ^[[:space:]]*# ]] && continue

	# Parse out the interesting bits of data
	read PVC_NAME PVC_DIR <<< "${LINE}"

	# Validate the PVC
	if [[ ! "${PVC_NAME}" =~ ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$ ]] ; then
		err "The PVC name [${PVC_NAME}] is not valid (line # ${LINE_NO} = [${LINE}])"
		continue
	fi

	# Validate the PVC_DIR
	if [ -z "${PVC_DIR}" ] ; then
		err "No directory information given for PVC ${PVC_NAME} (line # ${LINE_NO} = [${LINE}])"
		continue
	elif [ ! -d "${PVC_DIR}" ] ; then
		ERR="is not a directory"
		[ -e "${PVC_DIR}" ] || ERR="does not exist"
		err "The path [${PVC_DIR}] for PVC ${PVC_NAME} is  name [${PVC_NAME}] ${ERR} (line # ${LINE_NO} = [${LINE}])"
		continue
	fi
	PVC_DIR="$(readlink -f "${PVC_DIR}")"

	# Initialize the log
	STAMP="$("${DATE}" -u "+%Y%m%d-%H%M%SZ")"
	PVC_LOG="${LOG_BASE}.${PVC_NAME}.${STAMP}.log"

	say "👉 Processing ${PVC_NAME} from [${PVC_DIR}] (log = ${PVC_LOG})..."
	if rsync_with_retry "${COMMAND}" "${PVC_DIR}" "${SERVER_SPEC}::${PVC_NAME}" &> "${PVC_LOG}" ; then
		ok "Directory processed!"
	else
		err "Processing failed (rc = ${?})"
	fi
done < <("${CAT}" "${PVC_LIST_FILE}")
