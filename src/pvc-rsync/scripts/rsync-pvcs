#!/bin/bash
SCRIPT="$(readlink -f "${BASH_ARGV0:-${BASH_SOURCE:-${0}}}")"
BASEDIR="$(dirname "${SCRIPT}")"

set -euo pipefail

timestamp()
{
	/usr/bin/date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

ok()
{
	say "✅ ${@}"
}

warn()
{
	say "⚠️ ${@}"
}

err()
{
	say "❌ ${@}" 1>&2
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

usage()
{
	local S="$(basename "${BASH_ARGV0:-${BASH_SOURCE:-${0}}}")"
	echo -e "usage: ${S} target-spec"
	echo -e ""
	echo -e "	Copy the PVC data, as read from STDIN in a two-column format"
	echo -e "	where the first column is the PVC name, and the rest of the line"
	echo -e "	is the directory path where the data for that PVC is stored."
	echo -e ""
	echo -e "	The RSYNC session will be opened depending on the spec format:"
	echo -e ""
	echo -e "		rsync://[user@]hostname -> use rsync direct protocol (873/tcp)"
	echo -e "		kubectl://podName[@namespace] -> use kubectl as the remote shell"
	exit 1
}

[ ${#} -eq 1 ] || usage

RSYNCD_SERVER="${1}"

case "${RSYNCD_SERVER}" in
	rsync://* )
		PROTOCOL="rsync"
		[[ "${RSYNCD_SERVER,,}" =~ ^rsync://((.+@)?[a-z0-9]([a-z0-9-]*[a-z0-9])?([.][a-z0-9]([a-z0-9-]*[a-z0-9])?)*)$ ]] || fail "The rsyncd-server value is invalid: [${RSYNCD_SERVER}]"
		RSYNCD_SERVER="${BASH_REMATCH[1]}"
		;;

	kubectl://* )
		PROTOCOL="kubectl"
		[[ "${RSYNCD_SERVER,,}" =~ ^kubectl://([a-z0-9]([a-z0-9-]*[a-z0-9])?(@([a-z0-9]([a-z0-9-]*[a-z0-9])?)))$ ]] || fail "The rsyncd-server value is invalid: [${RSYNCD_SERVER}]"
		RSYNCD_SERVER="${BASH_REMATCH[1]}"
		RSYNC_RSH="${BASEDIR}/kubectl-helper"
		[ -e "${RSYNC_RSH}" ] || fail "The $(basename "${RSYNC_RSH}") could not be found at [${RSYNC_RSH}]"
		[ -f "${RSYNC_RSH}" ] || fail "The path [${RSYNC_RSH}] is not a regular file"
		[ -r "${RSYNC_RSH}" ] || fail "The file [${RSYNC_RSH}] is not readable"
		[ -x "${RSYNC_RSH}" ] || fail "The file [${RSYNC_RSH}] is not executable"
		export RSYNC_RSH
		;;

	* ) fail "Unrecognized RSYNCD server, must be an rsync://... or kubectl://... URL" ;;
esac

KUBECTL="$(type -P kubectl)" || fail "Failed to find kubectl in the path"
SED="$(type -P sed)" || fail "Failed to find sed in the path"
TEE="$(type -P tee)" || fail "Failed to find tee in the path"
TAR="$(type -P tar)" || fail "Failed to find tar in the path"
SORT="$(type -P sort)" || fail "Failed to find sort in the path"
RSYNC="$(type -P rsync)" || fail "Failed to find rsync in the path"

RSYNC_WITH_RETRY="${BASEDIR}/rsync-with-retry"
[ -e "${RSYNC_WITH_RETRY}" ] || fail "The $(basename "${RSYNC_WITH_RETRY}") script could not be found at [${RSYNC_WITH_RETRY}]"
[ -f "${RSYNC_WITH_RETRY}" ] || fail "The path [${RSYNC_WITH_RETRY}] is not a regular file"
[ -r "${RSYNC_WITH_RETRY}" ] || fail "The file [${RSYNC_WITH_RETRY}] is not readable"
[ -x "${RSYNC_WITH_RETRY}" ] || fail "The file [${RSYNC_WITH_RETRY}] is not executable"

LOG_BASE="$(basename "${0}")"
STAMP="$(/usr/bin/date -u "+%Y%m%d-%H%M%SZ")"
MAIN_LOG="${LOG_BASE}.${STAMP}.log"

exec > >("${TEE}" "${MAIN_LOG}")
exec 2>&1
say "👉 Copying all the PVCs into the server ${RSYNCD_SERVER} via ${PROTOCOL}"
LINE_NO=0
while read LINE ; do
	(( ++LINE_NO ))

	# Ignore comments and empty lines
	[[ "${LINE}" =~ ^[[:space:]]*$ ]] && continue
	[[ "${LINE}" =~ ^[[:space:]]*# ]] && continue

	# Parse out the interesting bits of data
	read PVC_NAME PVC_DIR <<< "${LINE}"

	# Validate the PVC
	if [[ ! "${PVC_NAME}" =~ ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$ ]] ; then
		err "The PVC name [${PVC_NAME}] is not valid (line # ${LINE_NO} = [${LINE}])"
		continue
	fi

	# Validate the PVC_DIR
	if [ -z "${PVC_DIR}" ] ; then
		err "No directory information given for PVC ${PVC_NAME} (line # ${LINE_NO} = [${LINE}])"
		continue
	elif [ ! -d "${PVC_DIR}" ] ; then
		ERR="is not a directory"
		[ -e "${PVC_DIR}" ] || ERR="does not exist"
		err "The path [${PVC_DIR}] for PVC ${PVC_NAME} is  name [${PVC_NAME}] ${ERR} (line # ${LINE_NO} = [${LINE}])"
		continue
	fi

	# Initialize the log
	STAMP="$(/usr/bin/date -u "+%Y%m%d-%H%M%SZ")"
	PVC_LOG="${LOG_BASE}.${PVC_NAME}.${STAMP}.log"

	say "👉 Processing ${PVC_NAME} from [${PVC_DIR}] (log = ${PVC_LOG})..."
	if "${RSYNC_WITH_RETRY}" "${PVC_DIR}" "${RSYNCD_SERVER}::${PVC_NAME}" &> "${PVC_LOG}" ; then
		ok "Directory processed!"
	else
		err "Processing failed (rc = ${?})"
	fi
done
