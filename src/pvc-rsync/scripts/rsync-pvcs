#!/bin/bash
SCRIPT="$(readlink -f "${BASH_ARGV0:-${BASH_SOURCE:-${0}}}")"
BASEDIR="$(dirname "${SCRIPT}")"

set -euo pipefail

timestamp()
{
	/usr/bin/date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

ok()
{
	say "✅ ${@}"
}

warn()
{
	say "⚠️ ${@}"
}

fail()
{
	say "❌ ${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

usage()
{
	echo -e "usage: ${BASH_ARGV0:-${BASH_SOURCE:-${0}}} target-spec"
	echo -e ""
	echo -e "	Copy the PVC data, as read from STDIN in a two-column format"
	echo -e "	where the first column is the PVC name, and the rest of the line"
	echo -e "	is the directory path where the data for that PVC is stored."
	echo -e ""
	echo -e "	The RSYNC session will be opened depending on the spec format:"
	echo -e ""
	echo -e "		rsync://[user@]hostname -> use rsync direct protocol (873/tcp)"
	echo -e "		kubectl://podName[@namespace] -> use kubectl as the remote shell"
	exit 1
}

[ ${#} -eq 1 ] || usage

RSYNCD_SERVER="${1}"

case "${RSYNCD_SERVER}" in
	rsync://* )
		PROTOCOL="rsync"
		RSYNCD_SERVER="$(parse_rsync_url "${RSYNCD_SERVER}")"
		[[ "${RSYNCD_SERVER,,}" =~ ^rsync://((.+@)?[a-z0-9]([a-z0-9-]*[a-z0-9])?([.][a-z0-9]([a-z0-9-]*[a-z0-9])?)*)$ ]] || fail "The rsyncd-server value is invalid: [${RSYNCD_SERVER}]"
		RSYNCD_SERVER="${BASH_REMATCH[2]}"
		;;

	kubectl://* )
		PROTOCOL="kubectl"
		RSYNCD_SERVER="$(parse_kubectl_url "${RSYNCD_SERVER}")"
		[[ "${RSYNCD_SERVER,,}" =~ ^kubectl://([a-z0-9]([a-z0-9-]*[a-z0-9])?(@([a-z0-9]([a-z0-9-]*[a-z0-9])?)))$ ]] || fail "The rsyncd-server value is invalid: [${RSYNCD_SERVER}]"
		RSYNCD_SERVER="${BASH_REMATCH[2]}"
		RSYNC_SHELL="${BASEDIR}/kubectl-helper"
		[ -e "${RSYNC_SHELL}" ] || fail "The $(basename "${RSYNC_SHELL}") could not be found at [${RSYNC_SHELL}]"
		[ -f "${RSYNC_SHELL}" ] || fail "The path [${RSYNC_SHELL}] is not a regular file"
		[ -r "${RSYNC_SHELL}" ] || fail "The file [${RSYNC_SHELL}] is not readable"
		[ -x "${RSYNC_SHELL}" ] || fail "The file [${RSYNC_SHELL}] is not executable"
		export RSYNC_SHELL
		;;

	* ) fail "Unrecognized RSYNCD server, must be an rsync://... or kubectl://... URL" ;;
esac

KUBECTL="$(type -P kubectl)" || fail "Failed to find kubectl in the path"
SED="$(type -P sed)" || fail "Failed to find sed in the path"
TEE="$(type -P tee)" || fail "Failed to find tee in the path"
TAR="$(type -P tar)" || fail "Failed to find tar in the path"
SORT="$(type -P sort)" || fail "Failed to find sort in the path"
RSYNC="$(type -P rsync)" || fail "Failed to find rsync in the path"

RSYNC_WITH_RETRY="${BASEDIR}/rsync-with-retry"
[ -e "${RSYNC_WITH_RETRY}" ] || fail "The $(basename "${RSYNC_WITH_RETRY}") script could not be found at [${RSYNC_WITH_RETRY}]"
[ -f "${RSYNC_WITH_RETRY}" ] || fail "The path [${RSYNC_WITH_RETRY}] is not a regular file"
[ -r "${RSYNC_WITH_RETRY}" ] || fail "The file [${RSYNC_WITH_RETRY}] is not readable"
[ -x "${RSYNC_WITH_RETRY}" ] || fail "The file [${RSYNC_WITH_RETRY}] is not executable"

LOG_BASE="$(basename "${0}")"
STAMP="$(/usr/bin/date -u "+%Y%m%d-%H%M%SZ")"
MAIN_LOG="${LOG_BASE}.${STAMP}.log"

exec > >("${TEE}" "${MAIN_LOG}")
exec 2>&1
say "👉 Copying all the PVCs into the server ${RSYNCD_SERVER} via ${PROTOCOL}"
while read PVC_NAME PVC_DIR ; do
	STAMP="$(/usr/bin/date -u "+%Y%m%d-%H%M%SZ")"
	PVC_LOG="${LOG_BASE}.${PVC_NAME}.${STAMP}.log"

	say "👉 Processing ${PVC_NAME} from [${PVC_DIR}]..."
	"${RSYNC_WITH_RETRY}" "${PVC_DIR}" "${RSYNCD_SERVER}::${PVC_NAME}" &> "${PVC_LOG}" || fail "Processing failed (rc = ${?})"
	ok "Directory processed!"
done
