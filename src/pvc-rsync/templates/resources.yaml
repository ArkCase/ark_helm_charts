{{- $podName := .Release.Name -}}
{{- $namespace := .Release.Namespace -}}
{{- $pvcs := lookup "v1" "PersistentVolumeClaim" $namespace "" -}}
{{- $scripts := (.Files.Glob "scripts/*") -}}
{{- $externalDnsName := (.Values.externalDns).name | default "" -}}
{{- $externalDnsAnnotation := (.Values.externalDns).annotation | default "external-dns.alpha.kubernetes.io/hostname" -}}
{{- $pvcs = ((empty $pvcs) | ternary list ($pvcs.items | default list) ) -}}
{{- $storageClassName := .Values.storageClassName -}}
{{- $clone := (eq (.Values.mode | default "rsync") "clone") -}}
{{- $clonePrefixRE := "^[a-z0-9]([a-z0-9-]*[a-z0-9])?" -}}
{{- if $clone -}}
  {{- $clonePrefix := (.Values.clonePrefix | default "clone") -}}
  {{- /* Validate that the clone prefix is viable */ -}}
  {{- if not (regexMatch $clonePrefixRE $clonePrefix) -}}
    {{- fail (printf "The clone prefix [%s] is not valid - must match the regular expression /%s/ (default: 'clone')" $clonePrefix $clonePrefixRE) -}}
  {{- end -}}

  {{- $old := list -}}
  {{- $new := list -}}

  {{- range $pvc := $pvcs -}}
    {{- $old = append $old $pvc -}}
    {{- $pvc = omit (deepCopy $pvc) "status" -}}
    {{- $spec := $pvc.spec -}}
    {{- $metadata := $pvc.metadata -}}

    {{- if ne $spec.volumeMode "Filesystem" -}}
      {{- /* Ignore non-filesystem PVCs... can't work on them yet */ -}}
      {{- continue -}}
    {{- end -}}

    {{- $metadata = (pick $metadata "labels" "annotations" "name" "namespace") -}}

    {{-
      $metadata = set $metadata "annotations" (
        omit $metadata.annotations
          "pv.kubernetes.io/bind-completed"
          "pv.kubernetes.io/bound-by-controller"
          "volume.beta.kubernetes.io/storage-provisioner"
          "volume.kubernetes.io/storage-provisioner"
      )
    -}}

    {{- /* Set the new, clone name */ -}}
    {{- $oldName := $metadata.name -}}
    {{- $metadata = set $metadata "oldName" $oldName -}}
    {{- $metadata = set $metadata "name" (printf "%s-%s" $clonePrefix $oldName) -}}

    {{- /* Remove the volume info from the spec */ -}}
    {{- $spec = omit $spec "volumeName" -}}

    {{- $pvc = set $pvc "metadata" $metadata -}}
    {{- $pvc = set $pvc "spec" $spec -}}
    {{- $new = append $new $pvc -}}
  {{- end -}}
  {{- $pvcs = dict "pvc" $old "clones" $new -}}
{{- else -}}
  {{- $pvcs = dict "pvc" $pvcs -}}
{{- end -}}

{{- range $pvc := $pvcs.clones }}
  {{- $pvc = set $pvc "metadata" (set $pvc.metadata "annotations" (set $pvc.metadata.annotations "helm.sh/resource-policy" "keep")) }}
  {{- $pvc = (dict "metadata" $pvc.metadata "spec" (omit $pvc.spec "storageClassName")) }}
  {{- if $storageClassName }}
    {{- $pvc = set $pvc "spec" (set $pvc.spec "storageClassName" $storageClassName) }}
  {{- end }}
---
  {{- $pvc | toYaml | nindent 0 }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    armedia.com/pvc-mounter-name: &podName {{ $podName | quote }}
  name: *podName
  namespace: {{ $namespace | quote }}
data:

  #
  # Common-use scripts
  #
  {{- range $path, $_ := $scripts }}
  {{ $path | base }}: |{{- $.Files.Get $path | nindent 4 }}
  {{- end }}

  #
  # The rsyncd configuration
  #
  rsyncd.conf: |-
    uid = 0
    gid = 0
    pid file = /tmp/rsyncd.pid
    forward lookup = false
    reverse lookup = false
    lock file = /tmp/rsync.lock
    read only = false
    
    [scripts]
    path = /scripts
    comment = Utility scripts to interact with this server
    exclude = lost+found/
    transfer logging = yes
    read only = true
    timeout = 300

  {{- if not $clone }}
    {{- range $prefix, $items := $pvcs }}
      {{- range $pvc := $items }}
        {{- $pvcName := ($pvc.metadata.oldName | default $pvc.metadata.name) }}
      [{{ $pvc.metadata.name }}]
      path = /{{ $prefix }}/{{ $pvcName }}
      comment = {{ $pvcName }}
      exclude = lost+found/
      transfer logging = yes
      timeout = 300
      {{- end }}
    {{- end }}
  {{- end }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels: &labels
    armedia.com/pvc-mounter-name: &podName {{ $podName | quote }}
    {{- include "arkcase.labels.service" $ | nindent 4 }}
  name: &podName {{ $podName | quote }}
  namespace: &namespace {{ $namespace | quote }}
spec:
  replicas: 1
  selector:
    matchLabels: {{- include "arkcase.labels.matchLabels" $ | nindent 6 }}
  serviceName: {{ include "arkcase.service.headless" $ | quote }}
  updateStrategy:
    type: {{ $.Values.updateStrategy }}
    {{- if (eq "Recreate" $.Values.updateStrategy) }}
    rollingUpdate: null
    {{- else if $.Values.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ $.Values.rollingUpdatePartition }}
    {{- end }}
  podManagementPolicy: Parallel
  template:
    metadata:
      name: *podName
      namespace: *namespace
      labels: {{- include "arkcase.labels.service" $ | nindent 8 }}
    spec:
      {{- include "arkcase.image.pullSecrets" $ | nindent 6 }}
      containers:
        - name: rsync
          {{- include "arkcase.image" $ | nindent 10 }}
          command: [ "rsync", "--daemon", "--no-detach", "--log-file=/dev/stdout", "--port=873" ]
          workingDir: &logsDir "/logs"
          resources: {{- include "arkcase.resources" (dict "ctx" $) | nindent 12 }}
          securityContext: {{- include "arkcase.securityContext" (dict "ctx" $ "container" "arkcase") | nindent 12 }}
          env:
            - name: "LOGS_DIR"
              value: *logsDir
          {{- include "arkcase.subsystem.ports" $ | nindent 10 }}
          volumeMounts:
            - mountPath: /etc/rsyncd.conf
              name: &configMap config-map
              readOnly: true
              subPath: &rsyncdConf rsyncd.conf
            - mountPath: *logsDir
              name: "logs"
          {{- range $path, $_ := $scripts }}
            {{- $name := ($path | base) }}
            - mountPath: {{ printf "/scripts/%s" $name | quote }}
              name: *configMap
              subPath: &script {{ $name | quote }}
              readOnly: true
            - mountPath: {{ printf "/usr/local/bin/%s" $name | quote }}
              name: *configMap
              subPath: *script
              readOnly: true
          {{- end }}
          {{- range $prefix, $items := $pvcs }}
            {{- range $pvc := $items }}
            - mountPath: {{ printf "/%s/%s" $prefix ($pvc.metadata.oldName | default $pvc.metadata.name) | quote }}
              name: {{ $pvc.metadata.name | quote }}
            {{- end }}
          {{- end }}
      volumes:
        - name: *configMap
          configMap:
            name: *podName
            items:
              - key: *rsyncdConf
                path: *rsyncdConf
              {{- range $path, $_ := $scripts }}
                {{- $name := ($path | base) }}
              - key: {{ $name | quote }}
                path: {{ $name | quote }}
                mode: 0555
              {{- end }}
            defaultMode: 0640
            optional: false
        {{- include "arkcase.persistence.ephemeralVolume" (dict "ctx" $ "name" "logs") | nindent 8 }}
        {{- range $prefix, $items := $pvcs }}
          {{- range $pvc := $items }}
        - name: &pvc {{ $pvc.metadata.name | quote }}
          persistentVolumeClaim:
            claimName: *pvc
          {{- end }}
        {{- end }}
      restartPolicy: Always
{{- if not $clone }}
---
  {{- $service := (include "arkcase.subsystem.service" . | fromYaml) }}
  {{- if and $externalDnsName $externalDnsAnnotation }}
    {{- $serviceMetadata := ($service.metadata | default dict) }}
    {{- $serviceAnnotations := ($serviceMetadata.annotations | default dict) }}

    {{- $serviceAnnotations = set $serviceAnnotations ($externalDnsAnnotation | toString) ($externalDnsName | toString) }}

    {{- $serviceMetadata = set $serviceMetadata "annotations" $serviceAnnotations }}
    {{- $service = set $service "metadata" $serviceMetadata }}
  {{- end }}
  {{- $service | toYaml | nindent 0 }}
{{- end }}
