#!/bin/bash
SCRIPT="$(/usr/bin/readlink -f "${BASH_ARGV0:-${BASH_SOURCE:-${0}}}")"
BASEDIR="$(/usr/bin/dirname "${SCRIPT}")"

set -euo pipefail

[ -v DISABLE_CLONE ] || DISABLE_CLONE=""
case "${DISABLE_CLONE,,}" in
	true | t | yes | y ) DISABLE_CLONE="true" ;;
	* ) DISABLE_CLONE="false" ;;
esac
export DISABLE_CLONE

[ -v RESULT_MARKER ] || RESULT_MARKER=""
[ -n "${RESULT_MARKER}" ] || RESULT_MARKER="/.pod.result"

POD_POLL_WAIT="10"
POD_REBOOT_WAIT="60"
POD_REBOOT_TIMEOUT="$(( POD_REBOOT_WAIT * 15 ))"

timestamp()
{
	/usr/bin/date -Ins
}

say()
{
	echo -e "$(timestamp): ${@}"
}

ok()
{
	say "✅ ${@}"
}

warn()
{
	say "⚠️ ${@}"
}

err()
{
	say "❌ ${@}" 1>&2
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

is_valid_name()
{
	local NAME="${1}"
	[[ "${NAME}" =~ ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$ ]] || return ${?}
	return 0
}

execute()
{
	#
	# Show the command about to be executed
	#
	say "${@@Q}"
	if "${DISABLE_CLONE}" ; then
		warn "Cloning disabled: skipping the command execution"
		return 0
	fi

	#
	# Proceed with the execution
	#
	( exec "${@}" )
	return ${?}
}

compute_pod_state()
{
	local JSON="${1}"
	local STATE=""

	# If the JSON is non-empty and valid then we can compute the real state
	STATE="missing"
	[ -n "${JSON}" ] && "${JQ}" -r <<< "${JSON}" &>/dev/null && STATE=""
	[ -n "${STATE}" ] && echo -n "${STATE}" && return 0

	# The pod exists ... is it terminating?
	local DELETION_TS="$("${JQ}" -r ".metadata.deletionTimestamp // \"\"" <<< "${JSON}")"
	[ -n "${DELETION_TS}" ] && STATE="terminating"
	[ -n "${STATE}" ] && echo -n "${STATE}" && return 0

	# It's not terminating ... maybe it's ready?
	local COND=""

	COND="$("${JQ}" -r '.status.conditions[] | select(.type == "Ready") | .status' <<< "${JSON}")"
	[ "${COND,,}" == "true" ] && STATE="ready"
	[ -n "${STATE}" ] && echo -n "${STATE}" && return 0

	COND="$("${JQ}" -r '.status.conditions[] | select(.type == "Initialized") | .status' <<< "${JSON}")"
	[ "${COND,,}" == "true" ] && STATE="started"
	[ -n "${STATE}" ] && echo -n "${STATE}" && return 0

	# If it's not missing, not ready, not started, and not terminating, it MUST be created
	echo -n "created"
	return 0
}

get_pod_state()
{
	local POD="${1}"

	local JSON=""

	# If this call fails, it's because the pod doesn't exist
	JSON="$("${KUBECTL}" get pod --namespace "${NAMESPACE}" "${POD}" -o json 2>&1)" || JSON=""
	compute_pod_state "${JSON}"
	return 0
}

get_deployment_status()
{
	local STATUS=""

	# Have to split this or our logic won't work
	STATUS="$("${HELM}" status "${RELEASE}" --namespace "${NAMESPACE}" -o json)" || return ${?}

	# Can be one of: unknown, deployed, uninstalled,
	# superseded, failed, uninstalling, pending-install,
	# pending-upgrade or pending-rollback
	local RESULT=""
	RESULT="$("${JQ}" -r ".info.status" <<< "${STATUS}")" || return ${?}
	echo -n "${RESULT}"
	return 0
}

should_install()
{
	local STATUS=""
	STATUS="$(get_deployment_status)"
	case "${STATUS,,}" in
		deployed ) return 1 ;;
		* ) return 0 ;;
	esac
}

should_uninstall()
{
	local STATUS=""
	STATUS="$(get_deployment_status)"
	case "${STATUS,,}" in
		uninstalled ) return 1 ;;
		* ) return 0 ;;
	esac
}

is_namespace_exists()
{
	local NAMESPACE="${1}"
	execute "${KUBECTL}" get namespace "${NAMESPACE}" &>/dev/null || return ${?}
	return 0
}

is_pod_waitable()
{
	local POD="${1}"

	local JSON=""
	JSON="$("${KUBECTL}" get pod --namespace "${NAMESPACE}" "${POD}" -o json)" || return 1

	local TS=""
	TS="$("${JQ}" -r ".metadata.deletionTimestamp" <<< "${JSON}")" || return 1

	# If the deletion timestamp is set, the pod is going down
	[ -n "${TS}" ] && [ "${TS}" != "null" ] && return 1

	# TODO: Anything else we need to look at in the JSON?

	return 0
}

deploy_chart()
{
	should_install || return 0
	say "👉 Deploying the chart to do the volume cloning..."
	execute "${HELM}" install \
		"${RELEASE}" arkcase/pvc-tool \
		--namespace "${NAMESPACE}" \
		--set mode=clone || fail "Unable to deploy the chart"
}

track_logs()
{
	local POD="${1}"
	"${KUBECTL}" logs \
		--namespace "${NAMESPACE}" \
		--tail=1000 \
		--ignore-errors \
		--follow "${POD}"
	return ${?}
}

wait_for_condition()
{
	local POD="${1}"
	local CONDITION="${2}"
	local WAIT_TIMEOUT="${3:-30s}"
	# We will wait for the pod to be initialized
	"${KUBECTL}" wait pod \
		--namespace "${NAMESPACE}" "${POD}" \
		--for "${CONDITION}" \
		--timeout="${WAIT_TIMEOUT}" \
		-o json 2>&1
}

get_copy_result()
{
	local POD="${RELEASE}-0"

	local OLD_STATE=""
	local NEW_STATE=""
	local FIRST="true"
	local RC=0
	local STATE_CHANGED="false"
	local POLL_WAIT=""
	local POLL_NEXT="true"
	local JSON=""
	local MISSING_PREFIX=""
	while true; do
		if "${POLL_NEXT}" ; then
			[[ "${POLL_WAIT}" =~ ^(0|[1-9][0-9]*)$ ]] || POLL_WAIT="${POD_POLL_WAIT}"
			if ! "${FIRST}" && [ ${POLL_WAIT} -gt 0 ] ; then
				say "💤 Sleeping for ${POLL_WAIT}..."
				/usr/bin/sleep ${POLL_WAIT} || fail "Interrupted while sleeping"
			fi

			OLD_STATE="${NEW_STATE}"
			NEW_STATE="$(get_pod_state "${POD}")"
		fi
		FIRST="false"

		# We always re-set the poller
		POLL_NEXT="true"
		POLL_WAIT="${POD_POLL_WAIT}"

		STATE_CHANGED="false"
		[ "${OLD_STATE}" == "${NEW_STATE}" ] || STATE_CHANGED="true"

		[ "${NEW_STATE}" != "missing" ] && MISSING_PREFIX="re"

		CONDITION=""
		case "${NEW_STATE}" in
			terminating )
				"${STATE_CHANGED}" && say "👉 The pod is terminating, waiting for it to disappear completely"
				CONDITION="delete"
				;;

			missing )
				# TODO: Enable the maximum wait timer so we don't wait forever for it to be created
				"${STATE_CHANGED}" && say "👉 The pod is missing, waiting for it to ${MISSING_PREFIX}appear..."
				"${KUBECTL}" get pod --namespace "${NAMESPACE}" "${POD}" &>/dev/null || continue
				CONDITION="condition=PodScheduled"
				;;

			created )
				# TODO: Enable the maximum wait timer so we don't wait forever for it to start running
				"${STATE_CHANGED}" && say "👉 The pod seems to be scheduled, will wait for initialization to complete..."
				CONDITION="condition=Initialized"
				;;

			started )
				"${STATE_CHANGED}" && say "👉 The copy seems to be running, waiting for it to conclude..."
				CONDITION="condition=Ready"
				;;

			ready )
				if ! "${STATE_CHANGED}" ; then
					# If the pod's state didn't change between last cycle and this one, then
					# it's a terminating problem b/c the pod is ready, but didn't store its
					# result in the expected location
					err "The pod seems to have completed its work, but there's no result, please take a closer look at ${NAMESPACE}/${POD}."
					return 1
				fi

				# The happy path - we just went from "whatever" into Ready, which
				# means the copy has completed and we have a result to harvest...
				ok "The pod appears to have completed its work"
				local RESULT=""
				RC=0
				RESULT="$("${KUBECTL}" exec --namespace "${NAMESPACE}" "${POD}" -- /usr/bin/cat "${RESULT_MARKER}" 2>/dev/null)" || RC=${?}
				[ ${RC} -eq 0 ] && return ${RESULT}

				# If the RC isn't 0 it means there's something off and we weren't able
				# to get the result, so we loop back up to poll again, and see what's up...
				warn "Failed to retrieve the copy's result status marker (rc=${RC}), checking the pod state again"
				POLL_WAIT="0"
				continue
				;;
		esac

		[ -n "${CONDITION}" ] || continue

		POLL_WAIT=0
		# If the wait failed, it must have timed out, so start from scratch, but no sleep
		JSON="$(wait_for_condition "${POD}" "${CONDITION}")" || continue

		# We have a possible new read on the pod, analyze it without
		# causing a sleep
		OLD_STATE="${NEW_STATE}"
		NEW_STATE="$(compute_pod_state "${JSON}")"
		POLL_NEXT="false"
	done
}

undeploy_chart()
{
	should_uninstall || return 0
	say "👉 Removing the chart to release the volumes..."
	execute "${HELM}" uninstall \
		"${RELEASE}" \
		--namespace "${NAMESPACE}" \
		--wait \
		--timeout=30m \
		--cascade foreground || fail "Unable to undeploy the chart"
}

usage()
{
	echo -e "usage: ${BASH_SOURCE:-${0}} [namespace] release" 1>&2
	exit 1
}

[ ${#} -ge 1 ] && [ ${#} -le 2 ] || usage

HELM="$(type -P helm)" || fail "Could not find helm in the path"
JQ="$(type -P jq)" || fail "Could not find jq in the path"
KUBECTL="$(type -P kubectl)" || fail "Could not find kubectl in the path"

if [ ${#} -eq 1 ] ; then
    NAMESPACE="$("${KUBECTL}" config view --minify -o jsonpath="{..namespace}")"
    [ -n "${NAMESPACE}" ] || NAMESPACE="${POD_NAMESPACE:-default}"
else
    NAMESPACE="${1}"
    shift
fi
is_valid_name "${NAMESPACE}" || fail "Invalid namespace name [${NAMESPACE}]"

RELEASE="${1}"
is_valid_name "${RELEASE}" || fail "Invalid release name [${RELEASE}]"

# If the target namespace doesn't exist, by extension the environment doesn't exist
if ! is_namespace_exists "${NAMESPACE}" ; then
    say "The namespace ${NAMESPACE} does not exist, so nothing to remove"
    exit 0
fi

deploy_chart || fail "Couldn't deploy the chart to do the volume cloning"
ok "Chart deployed!"

get_copy_result || fail "The file copy seems to have failed, please review the full logs for more information"
ok "Copy complete!"

undeploy_chart || fail "Couldn't un-deploy the chart"
ok "Undeployment completed!"
