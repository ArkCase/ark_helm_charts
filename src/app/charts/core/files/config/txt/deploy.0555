#!/bin/bash
set -euo pipefail
. /.functions

set_or_default BASE_DIR "/app"
set_or_default DEPL_DIR "${BASE_DIR}/depl"
set_or_default CONF_DIR "${DEPL_DIR}/conf"
set_or_default WARS_DIR "${DEPL_DIR}/wars"

# Temporarily put them here... eventually they'll have
# a dedicated place to live
set_or_default EXTS_DIR "${CONF_DIR}"

set_or_default SKIP_WARS ""
SKIP_CONF="$(to_boolean "${SKIP_CONF:-false}")"

DEV="$(to_boolean "${DEV:-false}")"
FORCE_DEPLOY="$(to_boolean "${FORCE_DEPLOY:-false}")"

if "${DEV}" ; then
	SKIP_WARS="$(echo "${SKIP_WARS}" | tr '/' '\n' | sort -u | sed -e '/^\s*$/d')"

	set_or_default DEV_DIR "${BASE_DIR}/dev"
	DEV_WARS_DIR="${DEV_DIR}/wars"
	DEV_CONF_DIR="${DEV_DIR}/conf"
fi

#
# Deploy all WAR files
#
WAR="$(list-artifacts /arkcase/wars)" || fail "Failed to list the WAR files to be deployed"

readarray -t WAR < <(echo -n "${WAR}")

# Special case: sanitize the WAR list, make sure we have at most
# one of "portal.war" and "foia.war", because having both is a problem
PORTAL_WAR="$(get_portal_war "${WAR[@]}")" || fail "Cannot include multiple portal WAR files in the deployment - at most one is allowed!"

say "Found ${#WAR[@]} WAR files to deploy: [${WAR[@]}]"
for war in "${WAR[@]}" ; do

	ARTIFACT_NAME="${war##*/}"
	BASENAME="${ARTIFACT_NAME%.*}"

	# The default WAR's target is its basename without the extension
	# inside of WARS_DIR
	WAR_TGT="${BASENAME}"

	# If this is the Portal WAR, we can potentially pick where
	# it will be deployed into, other than the default path
	[ "${war}" == "${PORTAL_WAR}" ] && [ -v PORTAL_CONTEXT ] && WAR_TGT="${PORTAL_CONTEXT:-${WAR_TGT}}"

	# Pre-pend the actual target's parent directory
	WAR_TGT="${WARS_DIR}/${WAR_TGT}"

	if ${DEV} ; then
		WAR_PAT="${BASENAME}"

		# If we're in dev mode, then first we check to see if this
		# WAR is in the list of excluded WARs. We support treating
		# "foia" and "portal" as interchangeable (for now, at least)
		[ "${war}" == "${PORTAL_WAR}" ] && WAR_PAT="(portal|foia)"

		if egrep -q "^${WAR_PAT}$" <<< "${SKIP_WARS}" ; then
			say "The WAR file [${BASENAME}] is on the skip list, will ignore (matched /^${WAR_PAT}$/)"
			continue
		fi

		# This war is not excluded, so let's first check to see if
		# there's a development version of the WAR we should be
		# deploying instead
		if [ -s "${DEV_WARS_DIR}/${ARTIFACT_NAME}" ] ; then
			# We have a custom WAR to deploy! Use it!
			say "Found a development WAR at [${DEV_WARS_DIR}/${ARTIFACT_NAME}], will deploy it instead"
			mkdir -p "${WAR_TGT}"
			unzip -o -d "${WAR_TGT}" "${DEV_WARS_DIR}/${ARTIFACT_NAME}"
			continue
		fi
	fi

	mkdir -p "${WAR_TGT}" || fail "Failed to create the extraction target at [${WAR_TGT}]"

	# There's no development version, and the WAR is not excluded,
	# so let's go ahead and deploy it normally
	deploy-artifact extract "${war}" "${WAR_TGT}" || fail "Failed to deploy the WAR from [${war}] into [${WAR_TGT}]"
done

if "${DEV}" ; then
	ARTIFACT_NAME="01-conf.zip"
	BASENAME="${ARTIFACT_NAME%.*}"

	if [ -s "${DEV_CONF_DIR}/${ARTIFACT_NAME}" ] ; then
		# We have a custom config to deploy! Use it!
		say "Found a development configuration at [${DEV_CONF_DIR}/${ARTIFACT_NAME}], will deploy it instead"
		unzip -o -d "${CONF_DIR}" "${DEV_CONF_DIR}/${ARTIFACT_NAME}"
		SKIP_CONF="true"
	fi
fi

if ! "${SKIP_CONF}" ; then
	#
	# Deploy all the .arkcase configurations
	#
	CONF="$(list-artifacts /arkcase/conf)" || fail "Failed to list the CONF files to be deployed"
	readarray -t CONF < <(echo -n "${CONF}")
	say "Found ${#CONF[@]} CONF files to deploy: [${CONF[@]}]"
	for conf in "${CONF[@]}" ; do
		deploy-artifact extract "${conf}" "${CONF_DIR}" || fail "Failed to deploy the configuration from [${conf}]"
	done

	# Remove the contents of ${CONF_DIR}/custom/WEB-INF
	WEB_INF="${CONF_DIR}/custom/WEB-INF"
	if [ -e "${WEB_INF}" ] ; then
		say "Removing the existing extension binaries from [${WEB_INF}]..."
		rm -rf "${WEB_INF}"
	fi

	#
	# Deploy all the .arkcase extensions
	#
	EXTS="$(list-artifacts /arkcase/exts)" || fail "Failed to list the EXTS files to be deployed"
	readarray -t EXTS < <(echo -n "${EXTS}")
	say "Found ${#EXTS[@]} EXTS files to deploy: [${EXTS[@]}]"

	# Make sure the extensions are deployed ALWAYS
	(
		export FORCE_DEPLOY="true"
		for ext in "${EXTS[@]}" ; do
			deploy-artifact extract "${ext}" "${EXTS_DIR}" || fail "Failed to deploy the extension from [${ext}]"
		done
	) || exit ${?}
fi

#
# This is the only fix we know must be applied FOR SURE each time
#
realm-fix || fail "Failed to fix the realms information in the rules files"

ok "Configuration Initialization Complete"
exit 0
