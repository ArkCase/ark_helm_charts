#!/bin/bash
set -euo pipefail

timestamp()
{
	date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

err()
{
	say "‚ùå ${@}"
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

poll_url()
{
	local URL="${1}"
	local START="$(date +%s)"
	say "üëâ Starting the polling cycle for [${URL}]..."
	while true ; do
		/usr/bin/curl -fsSL -m 5 "${URL}" &>/dev/null && break
		local NOW="$(date +%s)"
		if [ $(( NOW - START )) -ge ${INIT_MAX_WAIT} ] ; then
			err "Timed out waiting for the URL [${URL}] to come up"
			return 1
		fi
		# If sleep didn't succeed, it means it got signaled, which
		# Means we need to stop what we're doing and puke out
		if ! sleep ${INIT_POLL_SLEEP} ; then
			err "Sleep interrupted, can't continue polling"
			return 1
		fi
	done
	say "‚úÖ The URL [${URL}] has responded, continuing"
	return 0
}

###################################################################
# CONFIGURE FILESYSTEM PERSISTENCE                                #
###################################################################
[ -v BASE_DIR ] || BASE_DIR=""
[ -n "${BASE_DIR}" ] || BASE_DIR="/app"

[ -v DATA_DIR ] || DATA_DIR=""
[ -n "${DATA_DIR}" ] || DATA_DIR="${BASE_DIR}/data"

[ -d "${DATA_DIR}" ] || mkdir -p "${DATA_DIR}"
export DATA_DIR

###################################################################
# UPDATE CA CERTIFICATES                                          #
###################################################################
acme-init

###################################################################
# INSTALL ANY LICENSES                                            #
###################################################################

#
# Configure license location
#
[ -v PENTAHO_INSTALLED_LICENSE_PATH ] || PENTAHO_INSTALLED_LICENSE_PATH=""
[ -n "${PENTAHO_INSTALLED_LICENSE_PATH}" ] || PENTAHO_INSTALLED_LICENSE_PATH="${DATA_DIR}/.installedLicenses.xml"

[ -f "${PENTAHO_INSTALLED_LICENSE_PATH}" ] || mkdir -p "$(dirname "${PENTAHO_INSTALLED_LICENSE_PATH}")"
export PENTAHO_INSTALLED_LICENSE_PATH

#
# Install the licenses
#
[ -v INIT_DIR ] || INIT_DIR=""
[ -n "${INIT_DIR}" ] || INIT_DIR="${BASE_DIR}/init"

[ -v LICENSE_DIR ] || LICENSE_DIR=""
[ -n "${LICENSE_DIR}" ] || LICENSE_DIR="${INIT_DIR}/licenses"

if [ -d "${LICENSE_DIR}" ] ; then
	LICENSE_INSTALLER="${PENTAHO_HOME}/license-installer/install_license.sh"
	say "üëâ Installing all available license files from [${LICENSE_DIR}]"
	while read LICENSE ; do
		if /bin/sh "${LICENSE_INSTALLER}" install -q "${LICENSE}" ; then
			say "\t‚úÖ Installed the license from [${LICENSE}], removing the original file"
			rm -fv "${LICENSE}" &>/dev/null || true
		else
			say "\t‚ùå Failed to install the license from [${LICENSE}]"
		fi
	done < <(find "${LICENSE_DIR}" -type f -name '*.lic' | sort)
fi

###################################################################
# Render the correct server.properties file                       #
###################################################################
[ -v PENTAHO_HOME ] || PENTAHO_HOME=""
[ -n "${PENTAHO_HOME}" ] || PENTAHO_HOME="${BASE_DIR}/pentaho"

[ -v PENTAHO_PDI_HOME ] || PENTAHO_HOME=""
[ -n "${PENTAHO_PDI_HOME}" ] || PENTAHO_HOME="${BASE_DIR}/pentaho"

[ -v PENTAHO_PDI_PLUGINS ] || PENTAHO_PDI_PLUGINS=""
[ -n "${PENTAHO_PDI_PLUGINS}" ] || PENTAHO_PDI_PLUGINS="${PENTAHO_PDI_HOME}/data-integration/plugins"

[ -v PENTAHO_SERVER ] || PENTAHO_SERVER=""
[ -n "${PENTAHO_SERVER}" ] || PENTAHO_SERVER="${PENTAHO_HOME}/pentaho-server"

[ -e "${PENTAHO_SERVER}" ] || fail "The Pentaho server directory could not be found at [${PENTAHO_SERVER}], cannot continue."
[ -d "${PENTAHO_SERVER}" ] || fail "The path [${PENTAHO_SERVER}] is not a directory, cannot continue."

###################################################################
# DEPLOY, AS NEEDED, THE CRON SCHEDULES THAT WE'LL BE RUNNING     #
###################################################################
deploy-job-schedules

###################################################################
# ARKCASE MUST BE UP BEFORE WE START RUNNING JOBS                 #
###################################################################
[ -v INIT_POLL_SLEEP ] || INIT_POLL_SLEEP=""
[ -n "${INIT_POLL_SLEEP}" ] || INIT_POLL_SLEEP="2"
[[ "${INIT_POLL_SLEEP}" =~ ^[1-9][0-9]*$ ]] || INIT_POLL_SLEEP=2

[ -v INIT_MAX_WAIT ] || INIT_MAX_WAIT=""
[ -n "${INIT_MAX_WAIT}" ] || INIT_MAX_WAIT="900"
[[ "${INIT_MAX_WAIT}" =~ ^[1-9][0-9]*$ ]] || INIT_MAX_WAIT=900

[ -v CORE_URL ] || CORE_URL=""
[ -n "${CORE_URL}" ] || CORE_URL="https://core:8443/arkcase/"

say "üëâ Waiting for ArkCase to become available before starting the Cron process..."
poll_url "${CORE_URL}" || fail "ArkCase did not come up in time"

say "üëâ Starting the Cron process..."
exec /usr/sbin/crond -n -P
