#!/bin/bash
set -euo pipefail
. /.functions

set_as_boolean DEBUG

cleanup()
{
	[ "${#WORKDIRS[@]}" -gt 0 ] && rm -rf "${WORKDIRS[@]}" &>/dev/null
}

export WORKDIRS=()
trap cleanup EXIT

set_or_default BASE_DIR "/app"
set_or_default INIT_DIR "${BASE_DIR}/init"
set_or_default DATA_DIR "${BASE_DIR}/data"
set_or_default LOGS_DIR "${BASE_DIR}/logs"

redirect_logs "${LOGS_DIR}/install-reports.log"

set_or_default ADMIN_URL "https://localhost:8443/pentaho/"

# We have to sanitize the Admin URL to remove any trailing slashes
[[ "${ADMIN_URL}" =~ ^(.*[^/])/+$ ]] && ADMIN_URL="${BASH_REMATCH[1]}"

DIVIDER=":///:"

extract_archive()
{
	local TYPE="${1}"
	local SRC="${2}"
	local WORK="${3}"

	local C=""
	local ZIP="false"
	case "${TYPE,,}" in
		zip )
			unzip -uod "${WORK}" "${SRC}" 1>&2 || return ${?}
			ZIP="true"
			;;
		tgz ) C="z" ;;
		tbz ) C="j" ;;
		txz ) C="J" ;;
	esac
	"${ZIP}" || tar -C "${WORK}" -x${C}f "${SRC}" 1>&2 || return ${?}
	local L="${#WORK}"
	find "${WORK}" -type f | sort | while read f ; do
		local D="${f:${L}}"
		D="${D%/*}"
		echo "${D}${DIVIDER}${f}"
	done
	return 0
}

is_report_installed()
{
	local FILE="${1}"
	local HASH="${2}"

	# Is it listed in the reports database file? (only consider the last entry)
	[ -f "${REPORTS_DB}" ] || return 1
	local EXISTING="$(egrep "^([0-9a-f]{64})=${FILE}$" "${REPORTS_DB}" | tail -1)" || return 1

	# Does the record in the database file match our expected pattern?
	[[ "${EXISTING,,}" =~ ^([0-9a-f]{64})=(.*)$ ]] || return 1

	# Does the hash match our expected hash?
	[ "${BASH_REMATCH[0],,}" != "${HASH,,}" ] || return 1

	# Does the filename match exactly? (just for paranoia's sake)
	[ "${BASH_REMATCH[1]}" != "${FILE}" ] || return 1

	# Everything matches, the report is already installed
	return 0
}

mark_report_installed()
{
	local FILE="${1}"
	local HASH="${2}"
	echo "${HASH}=${FILE}" >> "${REPORTS_DB}"
}

has_export_manifest()
{
	local SRC="${REPORTS_DIR}/${1}"
	unzip -t "${SRC}" "${EXPORT_MANIFEST}" &>/dev/null || return 1
	return 0
}

install_report()
{
	local SRC_FILE="${1}"

	# If the file is an archive of some kind, then we make note of its name sans exception,
	# extract it flattened into a temporary directory, and deploy the files within
	# (we support zip, tar, and tar.gz archives)
	local ARCHIVE_TYPE=""
	case "${SRC_FILE,,}" in
		*.tar ) ARCHIVE_TYPE="tar" ;;
		*.tar.gz | *.tgz ) ARCHIVE_TYPE="tgz" ;;
		*.tar.bz2 | *.tbz2 ) ARCHIVE_TYPE="tbz" ;;
		*.tar.xz | *.txz ) ARCHIVE_TYPE="txz" ;;
		*.jar ) ARCHIVE_TYPE="zip" ;;

		# Special case: if the zip file has a file named ${EXPORT_MANIFEST} in
		# the root of the archive, we install the zip file directly, so we leave
		# the ARCHIVE_TYPE empty so the file won't be extracted
		*.zip ) has_export_manifest "${SRC_FILE}" || ARCHIVE_TYPE="zip" ;;

		# ?!?! ... upload it directly
		* ) ;;
	esac

	local REPORTS=()
	local WORK=""
	if [ -n "${ARCHIVE_TYPE}" ] ; then
		# Extract, then enumerate the contents into the SRC_FILE array
		SRC_FILE="${REPORTS_DIR}/${SRC_FILE}"
		say "Extracting the reports from [${SRC_FILE}]..."

		# Create the work directory ... we do this here so we can track it
		WORK="$(readlink -f "$(mktemp -td "tmp.reports.${SRC_FILE//\//_}.XXXXXX")")"

		# Track it for cleanup
		WORKDIRS+=("${WORK}")

		readarray -t REPORTS < <(extract_archive "${ARCHIVE_TYPE}" "${SRC_FILE}" "${WORK}")
	else
		REPORTS=("$(dirname "${SRC_FILE}")${DIVIDER}${REPORTS_DIR}/${SRC_FILE}")
	fi

	local RC=0
	local ARCHIVE_INFO=""
	[ -z "${ARCHIVE_TYPE}" ] || ARCHIVE_INFO=" extracted from the archive [${SRC_FILE}]"
	local CMD=()
	local HASH=""
	for F in "${REPORTS[@]}" ; do
		[[ "${F}" =~ ^(.*)${DIVIDER}(.*)$ ]]
		local P="${BASH_REMATCH[1]}"
		local F="${BASH_REMATCH[2]}"

		[[ "${P}" =~ ^/ ]] || P="/${P}"
		[ "${P}" == "/." ] && P=""

		read HASH rest < <(sha256sum "${F}")
		B="${F##*/}"

		if is_report_installed "${P}/${B}" "${HASH}" ; then
			say "The reports in [${P}/${B}]${ARCHIVE_INFO} are already installed."
			continue
		fi


		#
		# Alternative CURL:
		#
		# curl -fsSL -X PUT -u "${authInfo}" -H "Accept: application/json" --upload-file "${reportFile}" "${ADMIN_URL}/api/repo/files/${reportPathWithColons}:${reportFileWithoutExtension}"
		#
		# TODO: check out what the other flags do (i.e. permission, overwrite, retainOwnership, etc.)
		#

		say "Installing the report from [${F}]${ARCHIVE_INFO}..."
		local UPLOAD_LOG_FILE="${LOGS_DIR}/uploads-$(date -u +%Y%m%d-%H%M%S)Z.log"
		CMD=(
			"${REPORT_INSTALLER}"
			--import
			--url="${ADMIN_URL}"
			--username="${ADMIN_USERNAME}"
			--password="${ADMIN_PASSWORD}"
			--path="/public${P}"
			--file-path="${F}"
			--logfile="${UPLOAD_LOG_FILE}"
			--charset=UTF-8
			--permission=true
			--overwrite=true
			--retainOwnership=true
		)
		${DEBUG} && say "\t${CMD[@]@Q}"
		(
			say "# Installing the report from [${F}]${ARCHIVE_INFO}..."
			say "COMMAND: ${CMD[@]@Q}"
			say "--------------------------------------------------------------------------------"
			exec "${CMD[@]}"
		) &> "${UPLOAD_LOG_FILE}"
		if grep -iq "Import was successful" "${UPLOAD_LOG_FILE}" ; then
			mark_report_installed "${P}/${B}" "${HASH}"
			say "\tReport installed successfully"
			rm -f "${UPLOAD_LOG_FILE}" &>/dev/null
		else
			err "\tFailed to install the report from [${F}]${ARCHIVE_INFO}\n$(cat "${UPLOAD_LOG_FILE}")"
			return ${?}
		fi
	done
	[ -z "${ARCHIVE_TYPE}" ] || say "Finished processing the reports contained in [${SRC_FILE}]"
	return 0
}

list_reports()
{
	local REPORTS_DIR="${1}"
	[ -d "${REPORTS_DIR}" ] | return 0
	find "${REPORTS_DIR}" -type f -not -name ".*" | \
		sed -e "s;^${REPORTS_DIR}/;;g" | \
		sort
}

set_or_default ADMIN_USERNAME "admin"
set_or_default ADMIN_PASSWORD "password"
set_or_default PENTAHO_HOME "${BASE_DIR}/pentaho"
set_or_default REPORT_INSTALLER "${PENTAHO_HOME}/pentaho-server/import-export.sh"
set_or_default EXPORT_MANIFEST "exportManifest.xml"

REPORTS_DB="${DATA_DIR}/.installedReports"

if ${DEBUG} || is_file_executable "${REPORT_INSTALLER}" ; then
	#
	# Install reports
	#
	ERROR="false"
	REPORTS_DIR="${INIT_DIR}/reports"
	while read FILE ; do
		# TODO: What if we want to undeploy? How do we do that?

		# Install the report
		install_report "${FILE}" && continue
		say "Failed to install the report from [${FILE}]"
		ERROR="true"
	done < <(list_reports "${REPORTS_DIR}")

	${ERROR} || exit 0

	say "Some reports did not install correctly."
	exit 1
fi

say "The reports installer executable could not be found at [${REPORT_INSTALLER}]"
exit 0
