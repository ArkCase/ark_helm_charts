#!/bin/bash
set -euo pipefail

DEFAULT_LOG_KEEP=30
[ -v LOG_KEEP ] || LOG_KEEP=${DEFAULT_LOG_KEEP}
[[ "${LOG_KEEP}" =~ ^[1-9][0-9]*$ ]] || LOG_KEEP=${DEFAULT_LOG_KEEP}

[ -v BASE_DIR ] || BASE_DIR="/app"
[ -v CONF_KJB ] || CONF_KJB="config"

[ -v PENTAHO_PDI_HOME ] || PENTAHO_PDI_HOME="${BASE_DIR}/pentaho-pdi"

timestamp() {
	date -Ins -u
}

say() {
	echo -e "$(timestamp): ${@}"
}

fail() {
	say "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

usage() {
	echo -e "usage: ${BASH_SOURCE:-${0}} file.kjb"
	exit 1
}

cleanup_logs() {
	if [ -n "${LOG}" ] && [ -f "${LOG}" ] ; then
		# Compress the newly-produced log, if it exists
		gzip -9 "${LOG}"
	fi
	while read log ; do
		rm -f "${log}" &>/dev/null || true
	done < <(find "${LOGS_DIR}" -type f -name "${JOB_NAME}-*.log.gz" | sort -r | tail -n +$(( LOG_KEEP + 1 )) )
}

[ ${#} -eq 1 ] || usage

JOB="${1}"
[ -n "${JOB}" ] || fail "The file may not be the empty string"
[ -e "${JOB}" ] || fail "The file [${JOB}] does not exist"
[ -f "${JOB}" ] || fail "The path [${JOB}] is not a regular file"
[ -r "${JOB}" ] || fail "The file [${JOB}] is not readable"
JOB="$(readlink -f "${JOB}")"
JOB_DIR="$(dirname "${JOB}")"
JOB_NAME="$(basename "${JOB}")"

LOGS_DIR="${JOB_DIR}/logs"
[ -d "${LOGS_DIR}" ] || mkdir -p "${LOGS_DIR}" || fail "Failed to create the log directory at [${LOGS_DIR}]"

LOG="${LOGS_DIR}/${JOB_NAME}-$(date -u +%Y%m%d-%H%M%S).log"
say "Log will be stored at: [${LOG}]"
exec &> >(tee --output-error=exit "${LOG}") || fail "Failed to initialize script logging to [${LOG}]"
trap cleanup_logs EXIT

# To temporarily disable template rendering, for debugging purposes
[ -v NORENDER ] || NORENDER="false"
case "${NORENDER,,}" in
	true | t | yes | y | on | en | enable | enabled ) NORENDER="true" ;;
	* ) NORENDER="false"
esac

################################################################################
# Are there any templates to render?
################################################################################
DIR="$(dirname "${JOB}")"
if [ -d "${DIR}/${CONF_KJB}" ] ; then

	CONF_KJB="${DIR}/${CONF_KJB}"

	# The config directory should contain a kettle directory
	# with all the files (or templates) that would go in .kettle,
	# and a metastore directory with all the files (or templates)
	# that would go in .pentaho/metastore

	[ -d "${CONF_KJB}/.kettle" ] && export KETTLE_HOME="${CONF_KJB}"
	[ -d "${CONF_KJB}/metastore" ] && export JAVA_TOOL_OPTIONS="-DPENTAHO_METASTORE_FOLDER=${CONF_KJB}"

	# Allow rendering to be disabled
	if "${NORENDER}" ; then
		say "Template rendering was disabled"
	else
		# This double-check makes it easier to use this script
		# in developers' environments
		RENDER_TPL="$(type -P render-template)" || true
		CONF_TPL="${CONF_KJB}.tpl"
		if [ -d "${CONF_TPL}" ] && [ -n "${RENDER_TPL}" ] ; then
			# Find all the templates within the configuration
			# templates directory and render the final files
			# within ${CONF_KJB}
			while read T ; do
				# Remove the leading "./"
				T="${T#*/}"
				F="${CONF_KJB}/${T}"
				mkdir -p "${F%/*}"
				say "Rendering [${F}]..."
				"${RENDER_TPL}" < "${CONF_TPL}/${T}" > "${F}"
			done < <(cd "${CONF_TPL}" && find . -type f | sort)
		fi
	fi
fi

LOG_FLAG=()

# Allow the log level to be set via environment variable
[ -v LOG_LEVEL ] && [ -n "${LOG_LEVEL}" ] && LOG_FLAG=("-level:${LOG_LEVEL}")

# If the log level isn't set by environment, then allow
# for it to be set via a companion file?
if [ ${#LOG_FLAG[@]} -eq 0 ] && [ -f "${JOB}.debug" ] ; then
	read LOG_LEVEL REST < <(sed -e 's;#.*$;;g' -e '/^\s*$/d' < "${JOB}.debug" | head -1) || true
	[ -n "${LOG_LEVEL}" ] && LOG_FLAG=("-level:${LOG_LEVEL}")
fi

say "Executing KJB: [${JOB}]"
cd "${PENTAHO_PDI_HOME}/data-integration"
./kitchen.sh -file:"${JOB}" "${LOG_FLAG[@]}" < /dev/null
RC=${?}
say "Exit Status: [${RC}]"
exit ${RC}
