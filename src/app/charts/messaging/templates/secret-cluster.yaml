{{- if and (include "arkcase.subsystem.enabled" $) (not (include "arkcase.subsystem.external" $)) -}}
  {{- $ctx := $ -}}
  {{- $subsys := (include "arkcase.subsystem.name" $ctx) -}}
  {{- $name := (include "arkcase.subsystem-access.name" (dict "ctx" $ "conn" "cluster")) -}}

  {{- $legacyName := (printf "%s-%s" $ctx.Release.Name $subsys) -}}
  {{- $legacyKeys := dict
    "password" "CLUSTER_PASSWORD"
    "encryption" "ENCRYPTION_PASSWORD"
  -}}

  {{- $data := dict -}}
  {{- $candidates := (dict $name dict $legacyName $legacyKeys) -}}
  {{- range $secretName, $keys := $candidates -}}
    {{- $secretData := (include "arkcase.get-existing.secret" (dict "ctx" $ "name" $secretName) | fromYaml) -}}
    {{- if and $secretData $secretData.data -}}
      {{- if $keys -}}
        {{- /* If there is translation to be had, translate! */ -}}
        {{- range $new, $old := $keys -}}
          {{- if hasKey $secretData $old -}}
            {{- $data = set $data $new (get $secretData $old) -}}
          {{- end -}}
        {{- end -}}
      {{- else -}}
        {{- /* No translations to be had, so apply them verbatim! */ -}}
        {{- $data = $secretData -}}
      {{- end -}}
      {{- break -}}
    {{- end -}}
  {{- end -}}

  {{- /* Render any missing passwords */ -}}
  {{- range $key := keys $legacyKeys -}}
    {{- if not (hasKey $data $key) -}}
      {{- $data = set $data $key (randAlphaNum 64) -}}
    {{- end -}}
  {{- end -}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name | quote }}
  namespace: {{ $ctx.Release.Namespace | quote }}
  labels: {{- include "arkcase.labels" $ctx | nindent 4 }}
    {{- with ($ctx.Values.labels).common }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    helm.sh/resource-policy: "keep"
    {{- with ($ctx.Values.annotations).common }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
type: Opaque
data: {{- include "arkcase.secret.encode" $data | nindent 2 -}}
{{- end -}}
