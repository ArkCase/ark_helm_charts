{{- if (include "arkcase.subsystem.enabled" $) -}}
  {{- /* The key is the username, and the value is the comma-separated list of roles to assign */ -}}
  {{- $adminRole := (include "arkcase.artemis.adminRole" $) -}}
  {{- $usersAndRoles := dict
    "arkcase"       $adminRole
    "cloudconfig"   $adminRole
    "experimental"  $adminRole
  -}}
  {{- $ctx := $ -}}
  {{- range $user, $roles := $usersAndRoles }}
    {{- $password := "" }}
    {{- $secretName := (include "arkcase.subsystem-access.name.cred" (dict "ctx" $ctx "type" $user)) }}

    {{- $secretObj := (lookup "v1" "Secret" $ctx.Release.Namespace $secretName) }}
    {{- if $secretObj }}
      {{- $secretData := (get $secretObj "data") }}
      {{- if $secretData }}
        {{- $user = (hasKey $secretData "username" | ternary $secretData.username $user) }}
        {{- $password = (hasKey $secretData "password" | ternary $secretData.password $password) }}
        {{- $roles = (hasKey $secretData "roles" | ternary $secretData.roles $roles) }}
      {{- end }}
    {{- end }}

    {{- if not $password }}
      {{- $password = randAlphaNum 64 }}
    {{- end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName | quote }}
  namespace: {{ $ctx.Release.Namespace | quote }}
  labels: {{- include "arkcase.labels" $ | nindent 4 }}
    {{- with ($ctx.Values.labels).common }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- with ($ctx.Values.annotations).common }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
type: Opaque
stringData:
  username: {{ $user | quote }}
  password: {{ $password | quote }}
  roles: {{ $roles | quote }}
  {{- end }}
{{- end -}}
