# Default values for solr-helm-charts.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# For now, disabled by default
enabled: false

#
# This should group all application-specific configurations
#
configuration:
  password: "odeY1naen8ahquoo"

# resources:
#   default: "1Gi-*,0.5-*"
#   development: "1Gi,0.5"

platform: ""
image:
  # pullPolicy: IfNotPresent 
  registry: "public.ecr.aws"
  repository: "arkcase/neo4j"
  # Overrides the image tag whose default is the chart appVersion.
  # tag: "latest"

initDependencies:
  enabled: true
  mode: all
  template:
    # Any of the required ports are enough to succeed
    mode: any
    initialDelay: 10
    delay: 10
    timeout: 10
    attempts: 60
  dependencies:
    acme:
      ports:
        - 9000

# You generally shouldn't mess with these. These exist to support some name-generation templates
nameOverride: ""
fullnameOverride: ""

# Custom annotations to apply throughout
annotations:

# Custom labels to apply throughout
labels:

updateStrategy: RollingUpdate
rollingUpdatePartition: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations:
  # Annotations to add to the service account
  labels:
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

securityContext:
  # You must specify an `fsGroup` to allow Neo4j write access to mounted
  # volumes (as long as Solr runs as a non-root user, which should be the
  # case). Any random number will do.
  fsGroup: 1998
  fsGroupChangePolicy: OnRootMismatch

  neo4j:
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true

#autoscaling:
  #enabled: false
  #minReplicas: 1
  #maxReplicas: 100
  #targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector:

tolerations:

affinity:

persistence:
  # If set to `false`, an `emptyDir` will be used instead and all other `persistence.*` parameters
  # are ignored.
  enabled: true

  # Set the default capacity for volumes in case none is assigned explicitly
  # and the default value is insufficient
  volumeSize:
    data: "8Gi"
    logs: "1Gi"

#  The volumes for persistent data
  volumes:
# The volume where the data will be stored (RTFM for more info on how to
# properly declare volumes)
#     data:

service:
  #external: host-or-IP
  ports:
    - name: bolt
      protocol: TCP
      port: &bolt 7687
    - name: http
      protocol: TCP
      port: &http 8443

##
## Configure extra options for containers' liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param service.probes.enabled Enable liveness and readiness probes
## @param service.probes.spec.initialDelaySeconds Initial delay seconds for liveness and readiness probes
## @param service.probes.spec.periodSeconds Period seconds for liveness and readiness probes
## @param service.probes.spec.timeoutSeconds Timeout seconds for liveness and readiness probes
## @param service.probes.spec.failureThreshold Failure threshold for liveness and readiness probes
## @param service.probes.spec.successThreshold Success threshold for liveness and readiness probes
##
  probes:
    enabled: true
    spec:
      tcpSocket:
        port: *bolt
      initialDelaySeconds: 0
      periodSeconds: 10
      timeoutSeconds: 10
      failureThreshold: 1
      successThreshold: 1
    startup:
      failureThreshold: 90
