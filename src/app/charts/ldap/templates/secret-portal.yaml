{{- if and (include "arkcase.subsystem.enabledOrExternal" $) (not (include "arkcase.samba.external" $)) -}}
  {{- $foia := (include "arkcase.foia" $ | fromYaml) -}}
  {{- if $foia -}}
    {{- $ctx := $ -}}
    {{- $service := (include "arkcase.service.name" $ctx) -}}
    {{- $name := (include "arkcase.subsystem-access.name" $ctx) -}}
    {{- $port := 636 -}}
    {{- $url := (include "arkcase.tools.parseUrl" (printf "ldaps://%s:%d" $service $port) | fromYaml) -}}
    {{- $param := (dict "ctx" $ "server" $foia.ldap.server) -}}

    {{- $secret := (include "arkcase.get-existing.secrets" (dict "ctx" $ "name" $name) | fromYaml) }}
    {{- $data := (empty $secret) | ternary "" $secret.data | default dict }}

    {{- $password := "" -}}
    {{- if $data.password -}}
      {{- $password = ($data.password | b64dec) -}}
    {{- end -}}

    {{- if not $password -}}
      {{- $password = (randAlphaNum 64) -}}
    {{- end -}}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name | quote }}
  namespace: {{ $.Release.Namespace | quote }}
  labels: {{- include "arkcase.labels" $ | nindent 4 }}
    {{- with ($.Values.labels).common }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- with ($.Values.annotations).common }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
type: Opaque
stringData:
  url: {{ printf "ldaps://%s" $url.host | quote }}
  host: {{ $url.hostname | quote }}
  port: {{ $url.port | quote }}

  username: {{ printf "%s-ldap-user" $param.server | quote }}

  {{- $password := ($.Values.configuration).password | required "A default domain password is required" }}
  password: {{ $password | quote }}

  {{- $domainName := (include "arkcase.ldap" (merge (dict "value" "domain") $param)) }}
  domain: {{ (include "arkcase.tools.mustHostname" $domainName) | quote }}

  realm: {{ include "arkcase.ldap.realm" $ | quote }}

  rootDn: {{ include "arkcase.ldap.rootDn" $ | quote }}

  {{- $baseDn := (include "arkcase.ldap.baseDn" $) }}
  baseDn: {{ $baseDn | quote }}

  {{- $userBaseDn := (include "arkcase.ldap" (merge (dict "value" "search.users.base") $param)) }}
  userBaseDn: {{ printf "%s,%s" ($userBaseDn | default "cn=Users") $baseDn | quote }}

  {{- $userClass := (include "arkcase.ldap" (merge (dict "value" "search.users.class") $param)) }}
  userClass: {{ $userClass | default "user" | quote }}

  {{- $userNameAttribute := (include "arkcase.ldap" (merge (dict "value" "search.users.attribute") $param)) }}
  userNameAttribute: {{ $userNameAttribute | default "cn" | quote }}

  {{- $userSearchFilter := (include "arkcase.ldap" (merge (dict "value" "search.users.filter") $param) | replace "*" "{0}") }}
  userSearchFilter: {{ $userSearchFilter | default "(&(objectCategory=Person)(sAMAccountName=*))" | quote }}

  {{- $userMembershipAttribute := (include "arkcase.ldap" (merge (dict "value" "search.users.attribute") $param)) }}
  userMembershipAttribute: {{ $userMembershipAttribute | default "memberOf" | quote }}

  {{- $groupBaseDn := (include "arkcase.ldap" (merge (dict "value" "search.groups.base") $param)) }}
  groupBaseDn: {{ printf "%s,%s" ($groupBaseDn | default "cn=Users") $baseDn | quote }}

  {{- $groupClass := (include "arkcase.ldap" (merge (dict "value" "search.groups.class") $param)) }}
  groupClass: {{ $groupClass | default "group" | quote }}

  {{- $groupNameAttribute := (include "arkcase.ldap" (merge (dict "value" "search.groups.attribute") $param)) }}
  groupNameAttribute: {{ $groupNameAttribute | default "cn" | quote }}

  {{- $groupSearchFilter := (include "arkcase.ldap" (merge (dict "value" "search.groups.membership") $param) | replace "*" "{0}") }}
  groupSearchFilter: {{ $groupSearchFilter | default "(&(objectClass=group)(cn=*))" | quote }}

  {{- $groupMemberAttribute := (include "arkcase.ldap" (merge (dict "value" "search.groups.attribute") $param)) }}
  groupMemberAttribute: {{ $groupMemberAttribute | default "member" | quote }}
  {{- end -}}
{{- end -}}
