{{- if (include "arkcase.subsystem.enabled" $) -}}
  {{- $content := (include "arkcase.cm.info" $ | fromYaml) -}}
  {{- $subsys := (include "arkcase.subsystem.name" $) -}}
  {{- range $conn := (list "admin" "main") }}
    {{- $name := (include "arkcase.subsystem-access.name" (dict "ctx" $ "conn" $conn)) }}

    {{- $secret := (include "arkcase.get-existing.secret" (dict "ctx" $ "name" $name) | fromYaml) }}
    {{- $data := (empty $secret) | ternary "" $secret.data | default dict }}

    {{- $user := (get $content.users $conn | default (printf "%s-user" $conn)) }}
    {{- $data = set $data "username" ($user | b64enc) }}
    {{- $data = set $data "password" ($data.password | default (randAlphaNum 64 | b64enc)) }}

    {{- range $key := (keys $content.settings | sortAlpha) }}
      {{- $data = set $data $key ((get $data $key) | default (get $content.settings $key | toString | b64enc)) }}
    {{- end }}

    {{- $groups := (get $content.groups $conn | default "") }}
    {{- if $groups }}
      {{- $groups = (join "," $groups) | upper }}
    {{- end }}
    {{- $data = set $data "group" ($groups | b64enc) }}
    {{- $data = set $data "url" ($content.url | b64enc) }}
    {{- $data = set $data "ui" ($content.ui | b64enc) }}

    {{- if (eq $content.dialect "box") }}
      {{- $license := (include "arkcase.license" (dict "ctx" $ "name" "box") | fromYaml) }}
      {{- if and $license $license.data -}}
        {{- $license = $license.data -}}

        {{- if not (kindIs "string" $license) -}}
          {{- fail (printf "The Box RSA key in global.licenses.box must be a single string, not a %s" (kindOf $license)) -}}
        {{- end }}

        {{- $decodedLicense := regexReplaceAll "\\n+$" ($license | b64dec | toString) "" }}

        {{- if not (regexMatch "^-----BEGIN ENCRYPTED PRIVATE KEY-----" $decodedLicense) }}
          {{- fail "Box RSA key is invalid: missing expected '-----BEGIN ... PRIVATE KEY-----' header" }}
        {{- end }}

        {{- if not (regexMatch "-----END ENCRYPTED PRIVATE KEY-----$" $decodedLicense) }}
          {{- fail "Box RSA key is invalid: missing expected '-----END ... PRIVATE KEY-----' footer" }}
        {{- end }}

        {{- $data = set $data "private-key" $license | default "" }}
      {{- else }}
        {{- fail "Missing required Box RSA key in global.licenses.box" }}
      {{- end }}

      {{- $settings := get $.Values.global.subsys.content "settings" | default dict }}
      {{- $filteredSettings := pick $settings "client-id" "client-secret" "enterprise-id" "public-key-id" "private-key-password" }}

      {{- range $key, $value := $filteredSettings }}
        {{- $data = set $data $key ($value | toString | b64enc) }}
      {{- end }}
    {{- end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name | quote }}
  namespace: {{ $.Release.Namespace | quote }}
  labels: {{- include "arkcase.labels" $ | nindent 4 }}
  {{- with ($.Values.labels).common }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  annotations:
  {{- with ($.Values.annotations).common }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
type: Opaque
data: {{- $data | toYaml | nindent 2 }}
  {{- end }}
{{- end -}}
