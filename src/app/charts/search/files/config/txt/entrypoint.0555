#!/bin/bash
set -euo pipefail
. /.functions

#
# First things first: enable SSL
#
init_ssl

#
# Next, set the correct JVM
#
set-java

#
# Now, continue with the boot
#

set_or_default BASE_DIR "/app"
set_or_default DATA_DIR "/app/data"
set_or_default INIT_MARKER "${DATA_DIR}/.initialized"

# This is important: ${HOME_DIR} must be *ephemeral* - this flag is only meant to
# inform when the init script ran, so we can run the post-init script in the helm chart
set_or_default RUN_MARKER "${HOME_DIR}/.initRan"

if [ -e "${INIT_MARKER}" ] ; then
	say "Persistence is already initialized, proceeding with the normal boot"
else
	say "Persistence has not been initialized, proceeding with the first-time initialization"

	/config-pre.sh || fail "Pre-configuration failed - the Solr initialization may not be complete"

	touch "${INIT_MARKER}"
	touch "${RUN_MARKER}"
fi

set_or_default SOLR_LOGS_DIR "${DATA_DIR}/logs"
[ -v SOLR_LOGS_DIR ] || export SOLR_LOGS_DIR="${DATA_DIR}/logs"

ensure_dir "${SOLR_LOGS_DIR}"

if [ -v ZK_HOST ] ; then

	# Get the hostnames from ZooKeeper
	#
	# This is only needed because Solr doesn't (yet ... 8.11.4) do
	# dynamic reconfiguration based on what ZooKeeper says its ensemble
	# looks like. Thus, we actually have to query ZooKeeper to get that
	# info, and apply it during bootup so we get "green" status on the
	# admin page.
	CONFIG="$(server/scripts/cloud-scripts/zkcli.sh -zkhost "${ZK_HOST}" -cmd get /zookeeper/config)" || fail "Failed to fetch the ZooKeeper configuration using ZK_HOST=${ZK_HOST@Q}"

	NEW_ZK_HOST=""
	while read LINE ; do
		[ -n "${LINE}" ] || continue

		# Parse out the configuration line
		[[ "${LINE}" =~ ^[[:space:]]*([^=]+)[[:space:]]*=[[:space:]]*(.*)[[:space:]]*$ ]] || continue
		KEY="${BASH_REMATCH[1]}"
		VALUE="${BASH_REMATCH[2]}"

		# Parse out the values we seek
		[[ "${KEY}" =~ ^server[.][1-9][0-9]*$ ]] || continue
		[[ "${VALUE}" =~ ^[[:space:]]*([^;]+)[[:space:]]*\;[[:space:]]*(.*)[[:space:]]*$ ]] || continue
		PRIVATE="${BASH_REMATCH[1]}"
		PUBLIC="${BASH_REMATCH[2]}"

		# Parse out the private connection stuff
		[[ "${PRIVATE,,}" =~ ^([^:]+):[1-9][0-9]*:[1-9][0-9]*(:(.*))?$ ]] || continue
		HOST="${BASH_REMATCH[1]}"
		ROLE="${BASH_REMATCH[3]}"
		[ -n "${ROLE}" ] || ROLE="participant"

		[[ "${PUBLIC}" =~ ^(([^:]+):)?([1-9][0-9]*)$ ]] || continue
		ADDX="${BASH_REMATCH[2]}"
		PORT="${BASH_REMATCH[3]}"

		# Append!
		[ -n "${NEW_ZK_HOST}" ] && NEW_ZK_HOST+=","
		NEW_ZK_HOST+="${HOST}:${PORT}"
	done <<< "${CONFIG}"

	say "New ZK_HOST setting: [${NEW_ZK_HOST}]"
	export ZK_HOST="${NEW_ZK_HOST}"
	unset NEW_ZK_HOST

	# Enable HTTPS on the cluster
	say "Enabling SSL on the cluster"
	(
		set -euo pipefail
		cd "${BASE_DIR}/solr"
		exec server/scripts/cloud-scripts/zkcli.sh -zkhost "${ZK_HOST}" -cmd clusterprop -name urlScheme -val https
	)
	say "SSL Enabled!"
fi

set -- "${HOME_DIR}/bin/solr" start -f -cloud
execute "${@}"
