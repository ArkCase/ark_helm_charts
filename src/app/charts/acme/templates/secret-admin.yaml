{{- if (include "arkcase.subsystem.enabled" $) -}}
  {{- $name := (include "arkcase.subsystem-access.name.admin" $) -}}

  {{- /*
    We only take the old secret into account on an upgrade b/c we don't know which pods
    will get rolled, and as a result we don't want to mess with the configuration too
    much.
  */ -}}
  {{- $password := "" -}}

  {{- /* We gate this here to avoid doing the work if it's not an upgrade, but the get-existing stuff does that, too */ -}}
  {{- if $.Release.IsUpgrade -}}
    {{- $legacyName := (printf "%s-%s-shared" $.Release.Name (include "arkcase.subsystem.name" $)) -}}
    {{- $candidates := (dict $name "password" $legacyName "ACME_CLIENT_PASSWORD") -}}
    {{- range $secretName, $key := $candidates -}}
      {{- $secretData := (include "arkcase.get-existing.config" (dict "ctx" $ "name" $secretName)) -}}
      {{- if not $secretData -}}
        {{- continue -}}
      {{- end -}}

      {{- if not (hasKey $secretData $key) -}}
        {{- continue -}}
      {{- end -}}

      {{- $password = (get $secretData $key) -}}
      {{- break -}}
    {{- end -}}
  {{- end -}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name | quote }}
  namespace: {{ $.Release.Namespace | quote }}
  labels: {{- include "arkcase.labels" $ | nindent 4 }}
    {{- with ($.Values.labels).common }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- with ($.Values.annotations).common }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
type: Opaque
data:
  password: {{ $password | default (randAlphaNum 64 | b64enc) | quote }}
{{- end -}}
