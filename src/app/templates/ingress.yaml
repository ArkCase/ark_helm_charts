{{- $baseUrl := (include "arkcase.tools.conf" (dict "ctx" $ "value" "baseUrl") | toString) -}}
{{- if $baseUrl -}}
  {{- $baseUrl = ((include "arkcase.tools.parseUrl" $baseUrl) | fromYaml) -}}
  {{- if (ne "https" ($baseUrl.scheme | lower)) -}}
    {{- fail (printf "The baseUrl must be an https:// URL - [%s]" $baseUrl) -}}
  {{- end -}}

  {{- /* Begin preparations for creating a second, private ingress for support access */ -}}
  {{- $privateUrl := (include "arkcase.tools.conf" (dict "ctx" $ "value" "privateUrl") | toString) -}}
  {{- if $privateUrl -}}
    {{- $privateUrl = ((include "arkcase.tools.parseUrl" $privateUrl) | fromYaml) -}}
    {{- if (ne "https" ($privateUrl.scheme | lower)) -}}
      {{- fail (printf "The privateUrl must be an https:// URL - [%s]" $privateUrl) -}}
    {{- end -}}
  {{- end -}}

  {{- $ingress := ($.Values.global.ingress | default dict) -}}
  {{- $ingress = (kindIs "map" $ingress) | ternary $ingress dict -}}
  {{- $enabled := or (not (hasKey $ingress "enabled")) (not (empty (include "arkcase.toBoolean" $ingress.enabled))) -}}

  {{- $foia := (include "arkcase.foia" $ | fromYaml) -}}
  {{- $content := (include "arkcase.cm.info" $ | fromYaml) -}}
  {{- $dev := (include "arkcase.dev" $ | fromYaml) -}}

  {{- $hostnames := list $baseUrl.hostname -}}
  {{- /* For development mode, we enable other hostnames */ -}}
  {{- if $dev -}}
    {{- $hostnames = append $hostnames "localhost.localdomain" -}}
  {{- end -}}

  {{- if and $enabled $hostnames -}}
    {{- $secretData := dict -}}
    {{- $secretName := (printf "%s-ingress" (include "arkcase.fullname" $)) -}}

    {{- $modules := (include "arkcase.app.ingress.sanitize-modules" $ingress | fromYaml) -}}
    {{- $cloud := (include "arkcase.app.ingress.sanitize-cloud" (dict "ctx" $ "ingress" $ingress "baseUrl" $baseUrl) | fromYaml) -}}

    {{- $secretData = $ingress.secret -}}
    {{- if not $secretData -}}
      {{- if $cloud.providesCertificate -}}
        {{- /* Don't need to render a secret b/c it'll already be provided */ -}}
        {{- $secretData = $secretName -}}
      {{- else -}}
        {{- /* Render temporary TLS certificates */ -}}
        {{- $cert := genSelfSignedCert (first $hostnames) (list "127.0.0.1") $hostnames 365 -}}
        {{- $secretData = dict "crt" $cert.Cert "key" $cert.Key -}}
      {{- end -}}
    {{- end -}}

    {{- if (kindIs "string" $secretData) }}
      {{- $secretName = $secretData }}
    {{- else if (kindIs "map" $secretData) -}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName | quote }}
  namespace: {{ $.Release.Namespace | quote }}
  labels: {{- include "arkcase.labels" $ | nindent 4 }}
      {{- with (include "arkcase.values" (dict "ctx" $ "base" "labels") | fromYaml) }}
        {{- toYaml . | nindent 4 }}
      {{- end }}
  annotations:
      {{- with (include "arkcase.values" (dict "ctx" $ "base" "annotations") | fromYaml) }}
        {{- toYaml . | nindent 4 }}
      {{- end }}
type: kubernetes.io/tls
stringData:
      {{- with $secretData }}
  tls.crt: |- {{- .crt | required "Must provide a certificate in the TLS section (label = 'crt')" | nindent 4 }}
  tls.key: |- {{- .key | required "Must provide a private key in the TLS section (label = 'key')" | nindent 4 }}
        {{- if .ca }}
  ca.crt: |- {{- .ca | nindent 4 }}
        {{- end }}
      {{- end }}
    {{- else }}
      {{- fail (printf "The ingress secret must either be a string or a map (is a %s)" (kindOf $secretData)) -}}
    {{- end }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "arkcase.fullname" $ | quote }}
  namespace: {{ $.Release.Namespace | quote }}
testStringValue: |
  labels: {{- include "arkcase.labels" $ | nindent 4 }}
    {{- with $cloud.labels }}
      {{- . | toYaml | nindent 4 }}
    {{- end }}
    {{- with (include "arkcase.values" (dict "ctx" $ "base" "labels") | fromYaml) }}
      {{- toYaml .value | nindent 4 }}
    {{- end }}
  annotations:
    {{- with $cloud.annotations }}
      {{- . | toYaml | nindent 4 }}
    {{- end }}
    {{- with (include "arkcase.values" (dict "ctx" $ "base" "annotations") | fromYaml) }}
      {{- toYaml .value | nindent 4 }}
    {{- end }}
spec:
    {{- with $cloud.className }}
  ingressClassName: {{ . | quote }}
    {{- end }}
  rules:
    {{- range $host := $hostnames }}
    - host: {{ $host | quote }}
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: "core"
                port:
                  number: 8443
      {{- if $foia }}
          # We'll re-enable this when we figure out how to cleanly
          # expose Neo4j for user consumption
          # - path: "/browser"
          #   pathType: Prefix
          #   backend:
          #     service:
          #       name: "analytics"
          #       port:
          #         number: 8443
      {{- end }}
      {{- if or $dev $modules.entries.artifacts }}
          - path: "/artifacts"
            pathType: Prefix
            backend:
              service:
                name: "app-artifacts"
                port:
                  number: 443
      {{- end }}
      {{- if or $dev $modules.entries.content }}
        {{- if (eq $content.dialect "alfresco") }}
          - path: "/alfresco"
            pathType: Prefix
            backend:
              service:
                name: "content-main"
                port:
                  number: 8443
          - path: "/api-explorer"
            pathType: Prefix
            backend:
              service:
                name: "content-share"
                port:
                  number: 8443
          - path: "/share"
            pathType: Prefix
            backend:
              service:
                name: "content-share"
                port:
                  number: 8443
        {{- end }}
        {{- if (eq $content.dialect "s3") }}
          - path: "/minio"
            pathType: Prefix
            backend:
              service:
                name: "content-main"
                port:
                  number: 9000
        {{- end -}}
      {{- end }}
      {{- if or $dev $modules.entries.messaging }}
          - path: "/console"
            pathType: Prefix
            backend:
              service:
                name: "messaging"
                port:
                  number: 8443
      {{- end }}
      {{- if or $dev $modules.entries.reports }}
          - path: "/pentaho"
            pathType: Prefix
            backend:
              service:
                name: "reports"
                port:
                  number: 8443
      {{- end }}
      {{- if or $dev $modules.entries.search }}
          - path: "/solr"
            pathType: Prefix
            backend:
              service:
                name: "search"
                port:
                  number: 8983
      {{- end }}
    {{- end }}
  tls:
    - secretName: {{ $secretName | quote }}
      hosts: {{- $hostnames | toYaml | nindent 8 }}
  {{- end }}
{{- end }}
