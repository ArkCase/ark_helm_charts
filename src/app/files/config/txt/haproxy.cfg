#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
#	daemon
	ca-base				/usr/local/etc/haproxy/trust/
	log					stdout format raw local0
	log-tag				haproxy
	pidfile				/var/lib/haproxy/haproxy.pid
	maxconn				4000
	ssl-default-bind-options	force-tlsv12
	ssl-default-server-options	force-tlsv12
	tune.ssl.default-dh-param	2048
	ssl-server-verify	required
	stats				socket /var/lib/haproxy/haproxy-stats
	localpeer			"${POD_NAME}"
	lua-load			/usr/local/etc/haproxy/lua/responses.lua

defaults
	log					global
	option				httplog
	option				dontlognull
#	option				httpchk
#	option				dontlog-normal
	option				http-server-close
	option				forwardfor except 127.0.0.0/8
	option				redispatch
	retries				3

	timeout				http-request		20s
	timeout				queue			6m
	timeout				connect			180s
	timeout				client			180s
	timeout				server			10m
	timeout				http-keep-alive		20s
	timeout				check			20s

#	TODO: Provide pretty versions of these!
#	errorfile			502 /usr/local/etc/haproxy/errors/armedia-error-502.http
#	errorfile			503 /usr/local/etc/haproxy/errors/armedia-error-503.http
#	errorfile			504 /usr/local/etc/haproxy/errors/armedia-error-504.http

#---------------------------------------------------------------------
# Management ports for haproxy
#---------------------------------------------------------------------
listen admin
	# Listen on all IP's on port 8181
	bind				*:8181 force-tlsv12 ssl crt /.ssl/haproxy-cert.pem alpn h2,http/1.1
	mode				http
	stats				enable
	stats				hide-version
	stats				refresh 30s
	stats				realm HAProxy\ Statistics
	stats				uri /
	stats				admin if TRUE
	# TODO: Render a different password?
	stats				auth admin:"${ADMIN_PASSWORD}"

listen stats
	# Listen on all IP's on port 9000
	bind				*:9600 force-tlsv12 ssl crt /.ssl/haproxy-cert.pem alpn h2,http/1.1
	mode				http
	stats				enable
	stats				refresh 60s
	stats				show-node
	stats				uri /

#---------------------------------------------------------------------
# Cluster Peer Definitions
#---------------------------------------------------------------------
resolvers k8s
	parse-resolv-conf
	hold nx 10s
	hold refused 10s
	hold timeout 10s
	hold other 10s
	hold valid 10s
	hold obsolete 10s

#---------------------------------------------------------------------
# Front End Definitions
#---------------------------------------------------------------------
frontend healthz
	mode				http
	bind				*:18443 force-tlsv12 ssl crt /.ssl/haproxy-cert.pem alpn h2,http/1.1
	monitor-uri			/healthz
	http-request		use-service	lua.send-404
	no					log

frontend https
	mode				http
	bind				*:8443 force-tlsv12 ssl crt /.ssl/haproxy-cert.pem alpn h2,http/1.1
	redirect			scheme https unless { ssl_fc }

	#
	# ACL to help route ingress traffic
	#
	acl					ingress hdr(host),host_only -i "${INGRESS_HOST}"

	#
	# ACLs to help route to the core service
	#
	acl					svc_core hdr(host),host_only -i core
	acl					svc_core hdr(host),host_only -i core."${DNS_NAMESPACE}"
	acl					svc_core hdr(host),host_only -i core."${DNS_NAMESPACE}".svc
	acl					svc_core hdr(host),host_only -i core."${DNS_NAMESPACE}".svc."${CLUSTER_DOMAIN}"

	acl					path_portal path /"${PORTAL_CONTEXT}"
	acl					path_portal path_beg /"${PORTAL_CONTEXT}"
	acl					path_portal path /arkcase/external-portal
	acl					path_portal path_beg /arkcase/external-portal
	acl					path_core path /arkcase
	acl					path_core path_beg /arkcase/
	acl					path_root path /

	#
	# ACLs to help route to the reports service
	#
	acl					svc_reports hdr(host),host_only -i reports
	acl					svc_reports hdr(host),host_only -i reports."${DNS_NAMESPACE}"
	acl					svc_reports hdr(host),host_only -i reports."${DNS_NAMESPACE}".svc
	acl					svc_reports hdr(host),host_only -i reports."${DNS_NAMESPACE}".svc."${CLUSTER_DOMAIN}"

	acl					path_reports path /pentaho
	acl					path_reports path_beg /pentaho/

	#
	# Backend selections
	#
	use_backend			pentaho if svc_reports
	use_backend			pentaho if ingress path_reports

	use_backend			portal if svc_core path_portal
	use_backend			portal if ingress path_portal

	use_backend			arkcase if svc_core
	use_backend			arkcase if ingress path_core
	use_backend			arkcase if ingress path_root

	default_backend		static

#---------------------------------------------------------------------
# Back End Definitions
#---------------------------------------------------------------------
backend static
	mode			http
	errorfile		400 /usr/local/etc/haproxy/errors/400.http
	errorfile		403 /usr/local/etc/haproxy/errors/403.http
	errorfile		408 /usr/local/etc/haproxy/errors/408.http
	errorfile		500 /usr/local/etc/haproxy/errors/500.http
	errorfile		502 /usr/local/etc/haproxy/errors/502.http
	errorfile		503 /usr/local/etc/haproxy/errors/503.http
	errorfile		504 /usr/local/etc/haproxy/errors/504.http

backend arkcase
	mode			http
	option			httpchk
	http-check		send meth GET uri /arkcase/login
	cookie			ARKCASE_POD insert indirect nocache dynamic maxidle 30m maxlife 8h
	dynamic-cookie-key	${RELEASE_NAME}-${POD_NAMESPACE}
	stick-table		type string len 64 size 30k expire 60m peers cluster
	# stick			store-request req.cook(ARKCASE_SESSIONID)
	stick			store-response res.cook(ARKCASE_SESSIONID)
	stick			on req.cook(ARKCASE_SESSIONID)
	stick			on urlp(ARKCASE_SESSIONID)
	tcp-request		content track-sc0 req.cook(ARKCASE_SESSIONID)
	http-request	set-log-level info
	server-template	arkcase- 0-99 _https._tcp.core-dns.${DNS_NAMESPACE}.svc.${CLUSTER_DOMAIN} resolvers k8s fall 3 rise 2 check init-addr none inter 10s check ssl verify required ca-file /.ssl/ca-chain.pem

backend portal
	mode			http
	option			httpchk
	http-check		send meth GET uri /arkcase/external-portal/rest/request/authenticatedMode
	cookie			PORTAL_POD insert indirect nocache dynamic maxidle 30m maxlife 8h
	dynamic-cookie-key	${RELEASE_NAME}-${POD_NAMESPACE}
	stick-table		type string len 64 size 30k expire 60m peers cluster
	# stick			store-request req.cook(PORTAL_SESSIONID)
	stick			store-response res.cook(PORTAL_SESSIONID)
	stick			on req.cook(PORTAL_SESSIONID)
	stick			on urlp(PORTAL_SESSIONID)
	tcp-request		content track-sc0 req.cook(PORTAL_SESSIONID)
	http-request	set-log-level info
	server-template	arkcase-portal- 0-99 _https._tcp.core-portal-dns.${DNS_NAMESPACE}.svc.${CLUSTER_DOMAIN} resolvers k8s fall 3 rise 2 check init-addr none inter 10s check ssl verify required ca-file /.ssl/ca-chain.pem

backend pentaho
	mode			http
	option			httpchk
	http-check		send meth GET uri /pentaho
	cookie			PENTAHO_POD insert indirect nocache dynamic maxidle 30m maxlife 8h
	dynamic-cookie-key	${RELEASE_NAME}-${POD_NAMESPACE}
	stick-table		type string len 64 size 30k expire 60m peers cluster
	# stick			store-request req.cook(PENTAHO_SESSIONID)
	stick			store-response res.cook(PENTAHO_SESSIONID)
	stick			on req.cook(PENTAHO_SESSIONID)
	stick			on urlp(PENTAHO_SESSIONID)
	tcp-request		content track-sc0 req.cook(PENTAHO_SESSIONID)
	http-request	set-log-level info
	server-template	pentaho- 0-99 _https._tcp.reports-dns.${DNS_NAMESPACE}.svc.${CLUSTER_DOMAIN} resolvers k8s fall 3 rise 2 check init-addr none inter 10s check ssl verify required ca-file /.ssl/ca-chain.pem

#---------------------------------------------------------------------
# End of file
#---------------------------------------------------------------------
