#
#
#
hostname: &hostname "application.dev.arkcase.com"
# backendName: &backendName "iad032-1san01.appdev.armedia.com"
adminUsername: &arkcaseAdminUsername "arkcase-admin"
adminPassword: &arkcaseAdminPassword "$arkcase-admin$"


# global:
#   enterprise: true
#   persistence:
#     enabled: false
#     rootPath: "/opt/app"

#
# This should group all application-specific configurations
#
configuration:

  ldap: &ldapConfig
    default: "arkcase"
    arkcase: &ldapArkcase
      domain: "dev.arkcase.com"
      url: "ldaps://ldap:636"
      # Base DN will be taken as relative from the root DN
      baseDn: "ou=ArkCase"
      bind:
        dn: "cn=ArkCase Administrator,ou=Users,${baseDn}"
        password: *arkcaseAdminPassword
      admin:
        dn: "cn=ArkCase Administrator"
        role: "cn=ARKCASE_ADMINISTRATOR"
      search:
        users:
          base: "ou=Users"
          attribute: "sAMAccountName"
          filter: "(&(objectClass=user)(sAMAccountName={0}))"
          allFilter: "(objectClass=user)"
          prefix: ""
        groups:
          base: "ou=Groups"
          attribute: "cn"
          filter: "(&(objectClass=group)(cn={0}))"
          allFilter: "(objectClass=group)"
          membership: "(&(objectClass=group)(member={0}))"
          ignoreCase: "false"
          subtree: "true"
          rolePrefix: ""
          prefix: ""
    foia:
      <<: *ldapArkcase
      baseDn: "ou=FOIA"
      bind:
        dn: "cn=FOIA Administrator,ou=Users,${baseDn}"
        password: "$foia-admin$"

  db: &dbConfig
    dialect: "postgresql"
    hostname: "rdbms"

  content: &contentConfig
    dialect: "alfresco"
    url: "http://content-main:8080/alfresco"
    shareUrl: "http://content-share:8080/share"
    username: "admin"
    password: "admin"

gateway:
  enabled: false
  configuration:
    proxies:

      # ArkCase Core
      ark-core:
        preserveHosts: true
        locations:
          - url: &coreUrl "http://core:8080/arkcase"
            path: "/arkcase"

      # ArkCase Cloud Configuration
      ark-config:
        preserveHosts: true
        locations:
          - url: &configUrl "http://core:9999/"
            path: "/config"
            html:
              enabled: true
              extended: true
              urlMap:
                - from: *configUrl
                  to: "/config/"
                - from: "/"
                  to: "/config/"

      # ActiveMQ
      ark-messaging:
        preserveHosts: true
        locations:
          - url: "http://messaging:8161/"
            path: "/messaging"
            html:
              enabled: true
              extended: true
              urlMap:
                - from: "http://messaging:8161/admin/"
                  to: "/messaging/admin/"
                - from: "/admin/"
                  to: "/messaging/admin/"
                - from: "http://messaging:8161/api/"
                  to: "/messaging/api/"
                - from: "/api/"
                  to: "/messaging/api/"

      # Solr
      ark-search:
        preserveHosts: true
        locations:
          - url: "http://search:8983/solr/"
            path: "/search"

      # Pentaho
      ark-reports:
        preserveHosts: true
        locations:
          - url: &reportsUrl "http://reports:8080/pentaho/"
            path: "/pentaho"

      # Alfresco
      ark-content:
        preserveHosts: true
        locations:
          - url: "http://content-main:8080/alfresco/"
            path: "/alfresco"
            html:
              enabled: true
              extended: true
          - url: "http://content-share:8080/share/"
            path: "/share"
            html:
              enabled: true
              extended: true

messaging:
  service:
    # external: "www.activemq.com"
  persistence:
    ownership: "1998:1998"
  securityContext:
    activemq:
      runAsUser: 1998
      runAsGroup: 1998
  # image:
  #   tag: 5.16.2
  configuration:
    users:
      arkcase:
        name: &arkcaseMessagingUser "arkcase"
        password: &arkcaseMessagingPassword "Thoan-aeL[u>u7eC"
        roles: "admin"
      cloudconfig:
        name: &cloudConfigMessagingUser "cloudconfig"
        password: &cloudConfigMessagingPassword "mie|Qu}ai8ahniu|"
        roles: "admin"
      guest:
        name: &guestUser "guest"
        password: *guestUser

    groups:
      admins:
        - *arkcaseMessagingUser
        - *cloudConfigMessagingUser

search:
  service:
    # external: ["192.168.3.33", "12.13.14.15"]

rdbms:
  configuration:
    db:
      <<: *dbConfig

  # command: [ "sleep", "infinity" ]
  dbinit:
    admin: "YieghuV!ahh0EoC1"
    users:
      arkcase: &arkcaseDbPassword "ho!aKaeyoh-zo1do"
      cloudconfig: &cloudConfigPassword "phae@y2huso!Yoh8"
      content: &contentDbPassword "eth3be.ox4phah!W"
      jcr: &jcrDbPassword "ong>oo0Ocha~up^e"
      pentaho: &pentahoDbPassword "faiv>a[gheeP3Cai"
      quartz: &quartzDbPassword "lie't+ahra6aiShu"
    databases:
      arkcase: &arkcaseDb "arkcase"
      cloudconfig: &cloudConfigDb "cloudconfig"
      content: &contentDb "content"
      jcr: &jcrDb "jcr"
      pentaho: &pentahoDb "pentaho"
      quartz: &quartzDb "quartz"

ldap:
  configuration:
    ldap:
      <<: *ldapConfig

content:
  configuration:
    ldap:
      <<: *ldapConfig

    content:
      <<: *contentConfig

    db:
      <<: *dbConfig
      schema:
        content:
          database: *contentDb
          username: *contentDb
          password: *contentDbPassword

core:
  configuration:
    ldap:
      <<: *ldapConfig

    content:
      <<: *contentConfig

    db:
      <<: *dbConfig
      schema:
        arkcase: &arkcaseDbConfig
          database: *arkcaseDb
          username: *arkcaseDb
          password: *arkcaseDbPassword
        cloudconfig: &cloudConfigDbConfig
          database: *cloudConfigDb
          username: *cloudConfigDb
          password: *cloudConfigPassword
    arkcase:
      adminUsername: *arkcaseAdminUsername
      adminPassword: *arkcaseAdminPassword
    messaging:
      username: *arkcaseMessagingUser
      password: *arkcaseMessagingPassword
    stomp:
      username: *arkcaseMessagingUser
      password: *arkcaseMessagingPassword

reports:
  configuration:
    arkcase:
       adminUsername: *arkcaseAdminUsername
       adminPassword: *arkcaseAdminPassword
    serverUrl: "http://reports:8080/pentaho/"
    ldap:
      <<: *ldapConfig
    db:
      <<: *dbConfig
      schema:
        arkcase:
          <<: *arkcaseDbConfig
        quartz:
          database: *quartzDb
          username: *quartzDb
          password: *quartzDbPassword
        jackrabbit:
          database: *jcrDb
          username: *jcrDb
          password: *jcrDbPassword
        hibernate:
          database: *pentahoDb
          username: *pentahoDb
          password: *pentahoDbPassword

service:
  artifacts:
    ports:
      - name: artifacts
        protocol: TCP
        port: &artifactsPort 80

##
## Configure extra options for containers' liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param service.probes.enabled Enable liveness and readiness probes
## @param service.probes.spec.initialDelaySeconds Initial delay seconds for liveness and readiness probes
## @param service.probes.spec.periodSeconds Period seconds for liveness and readiness probes
## @param service.probes.spec.timeoutSeconds Timeout seconds for liveness and readiness probes
## @param service.probes.spec.failureThreshold Failure threshold for liveness and readiness probes
## @param service.probes.spec.successThreshold Success threshold for liveness and readiness probes
##
    probes:
      enabled: true
      spec:
        tcpSocket:
          port: *artifactsPort
        initialDelaySeconds: 5
        periodSeconds: 5
        timeoutSeconds: 5
        failureThreshold: 60
        successThreshold: 1

# Please leave the `replicaCount` to 1 for the time being. Clustering is not
# supported yet.
replicaCount: 1

platform: ""

image:
  pullPolicy: IfNotPresent

  pullSecrets:
    - name: aws-arkcase-pull

  registry: "public.ecr.aws"

  repository: "arkcase/shell-operator"

  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

  registry: "public.ecr.aws"

  # Overrides the image tag whose default is the chart appVersion.

  artifacts:
    repository: "arkcase/artifacts-core"
    # tag: &arkcaseVersion "2023.01.01-02"

  artifacts-foia:
    registry: "207428623785.dkr.ecr.us-east-1.amazonaws.com"
    repository: "arkcase/artifacts-foia"
    # tag: &arkcaseVersion "2023.01.01-02"

# You generally shouldn't mess with these. These exist to support some name-generation templates
nameOverride: ""
fullnameOverride: ""

# Custom annotations to apply throughout
annotations:

# Custom labels to apply throughout
labels:

updateStrategy: RollingUpdate
rollingUpdatePartition: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations:
  # Annotations to add to the service account
  labels:
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

securityContext:
  template:
    # You must specify an `fsGroup` to allow ActiveMQ write access to mounted
    # volumes (as long as ActiveMQ runs as a non-root user, which should be the
    # case). Any random number will do.
    # fsGroup: 2000
    # fsGroupChangePolicy: OnRootMismatch
  nettest:
    # privileged: true
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

#autoscaling:
  #enabled: false
  #minReplicas: 1
  #maxReplicas: 100
  #targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector:

tolerations:

affinity:
