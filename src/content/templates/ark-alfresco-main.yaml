{{- if and (include "arkcase.subsystem.enabled" $) (not (include "arkcase.content.external" $)) (eq "alfresco" (include "arkcase.content.info.dialect" $)) -}}
{{- $schema := (include "arkcase.db.schema" (dict "ctx" $ "schema" "content") | fromYaml) -}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "arkcase.fullname" $ | quote }}
  namespace: {{ $.Release.Namespace | quote }}
  labels: {{- include "arkcase.labels" $ | nindent 4 }}
    {{- with (include "arkcase.values" (dict "ctx" $ "base" "labels") | fromYaml) }}
      {{- toYaml .value | nindent 4 }}
    {{- end }}
  annotations:
    {{- with (include "arkcase.values" (dict "ctx" $ "base" "annotations") | fromYaml) }}
      {{- toYaml .value | nindent 4 }}
    {{- end }}
spec:
  {{- if not ($.Values.autoscaling).enabled }}
  replicas: {{ $.Values.replicaCount | default 1 }}
  {{- end }}
  selector:
    matchLabels: {{- include "arkcase.labels.matchLabels" $ | nindent 6 }}
  serviceName: {{ include "arkcase.service.headless" $ | quote }}
  updateStrategy:
    type: {{ $.Values.updateStrategy }}
    {{- if (eq "Recreate" $.Values.updateStrategy) }}
    rollingUpdate: null
    {{- else if $.Values.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ $.Values.rollingUpdatePartition }}
    {{- end }}
  template:
    metadata:
      name: {{ include "arkcase.fullname" $ | quote }}
      namespace: {{ $.Release.Namespace | quote }}
      labels: {{- include "arkcase.labels" $ | nindent 8 }}
        {{- with (include "arkcase.values" (dict "ctx" $ "base" "labels") | fromYaml) }}
          {{- toYaml .value | nindent 8 }}
        {{- end }}
      annotations:
        # NB: Both these annotation values must be of type "string"
        prometheus.io/scrape: "true"
        prometheus.io/port: "9100"
        timestamp: {{ date "20060102150405" now | quote }}
        {{- with (include "arkcase.values" (dict "ctx" $ "base" "annotations") | fromYaml) }}
          {{- toYaml .value | nindent 8 }}
        {{- end }}
    spec:
      {{- include "arkcase.image.pullSecrets" $ | nindent 6 }}
      {{- with (include "arkcase.values" (dict "ctx" $ "base" "hostAliases") | fromYaml) }}
      hostAliases: {{- toYaml .value | nindent 8 }}
      {{- end }}
      {{- with (include "arkcase.values" (dict "ctx" $ "base" "schedulerName") | fromYaml) }}
      schedulerName: {{ .value | quote }}
      {{- end }}
      serviceAccountName: {{ include "arkcase.serviceAccountName" $ | quote }}
      {{- with (include "arkcase.values" (dict "ctx" $ "base" "securityContext") | fromYaml) }}
        {{- with .template }}
      securityContext: {{- toYaml .value | nindent 8 }}
        {{- end }}
      {{- end }}
      initContainers:
        - name: set-permissions
          {{- include "arkcase.image" (dict "ctx" $ "name" "setperm" "repository" "arkcase/setperm") | nindent 10 }}
          env: {{- include "arkcase.tools.baseEnv" $ | nindent 12 }}
            - name: JOBS
              value: |
                jobs:
                  # We know the image uses user 33000:1000
                  - ownership: {{ coalesce ($.Values.persistence).ownership "33000:1000" | quote }}
                    permissions: "u=rwX,g=rX,o="
                    flags: [ "recurse", "noforced", "create", "changes" ]
                    targets: [ "/app/data", "/app/init" ]
          volumeMounts:
            - name: &initVolume "init"
              mountPath: &initDir "/app/init"
            - name: &dataVolume "data"
              mountPath: &dataDir "/app/data"
        {{- include "arkcase.initDependencies.container" $ | nindent 8 }}
      containers:
        - name: {{ include "arkcase.part.name" $ | quote }}
          {{- include "arkcase.image" $ | nindent 10 }}
          {{- include "arkcase.subsystem.ports" $ | nindent 10 }}
          env:
            {{- include "arkcase.acme.env" $ | nindent 12 }}
            - name: JAVA_TOOL_OPTIONS
              value: >-
                -Dencryption.keystore.type=JCEKS
                -Dencryption.cipherAlgorithm=DESede/CBC/PKCS5Padding
                -Dencryption.keyAlgorithm=DESede
                -Dencryption.keystore.location=/usr/local/tomcat/shared/classes/alfresco/extension/keystore/keystore
                -Dmetadata-keystore.password=mp6yc0UD9e
                -Dmetadata-keystore.aliases=metadata
                -Dmetadata-keystore.metadata.password=oKIWzVdEdA
                -Dmetadata-keystore.metadata.algorithm=DESede

            {{- $content := (include "arkcase.content.info" $ | fromYaml) }}
            {{- $indexing := (not (empty (include "arkcase.content.indexing" $))) }}
            # These parameters may eventually be used, once we determine how they work
            #    -Dalfresco_user_store.adminusername={{ $content.username | quote }}
            #    -Dalfresco_user_store.adminpassword={{ $content.password | quote }}
            - name: CATALINA_OPTS
              value: >-
                -XX:MinRAMPercentage=50
                -XX:MaxRAMPercentage=80
                -Ddir.root=/app/data
                -Ddb.driver={{ $schema.jdbc.driver | quote }}
                -Ddb.username={{ $schema.username | quote }}
                -Ddb.password={{ $schema.password | quote }}
                -Ddb.url={{ $schema.jdbc.url | quote }}
                -Dsolr.host={{ include "arkcase.alfresco.service" (dict "ctx" $ "name" "search") | quote }}
                -Dsolr.port=8983
                -Dsolr.secureComms=https
                -Dsolr.base.url=/solr
                -Dsolr.http.connection.timeout=1000
                -Dindex.subsystem.name={{ $indexing | ternary "solr6" "noindex" }}
                -Dshare.host={{ include "arkcase.alfresco.service" (dict "ctx" $ "name" "share") | quote }}
                -Dshare.port=8443
                -Dshare.scheme=https
                -Dalfresco.host={{ $content.url.hostname | quote }}
                -Dalfresco.port=8443
                -Dalfresco.scheme=https
                -Daos.baseUrlOverwrite={{ printf "%s/aos" $content.url.url | quote }}
                -Dopencmis.server.override=true
                -Dopencmis.server.value={{ printf "%s/api" $content.url.url | quote }}
                -Dmessaging.broker.url="failover:(nio+ssl://{{- include "arkcase.alfresco.service" (dict "ctx" $ "name" "activemq") -}}:61616)?timeout=3000&jms.useCompression=true"
                -Ddeployment.method=DOCKER_COMPOSE
                -Dcsrf.filter.enabled=false
                -DlocalTransform.core-aio.url=https://{{- include "arkcase.alfresco.service" (dict "ctx" $ "name" "transform-core-aio") -}}:8090/
              {{- if (include "arkcase.enterprise" $) }}
                -Dsfs.url=https://{{- include "arkcase.alfresco.service" (dict "ctx" $ "name" "sfs") -}}:8099/
                -Dtransform.service.enabled=true
                -Dtransform.service.url=https://{{- include "arkcase.alfresco.service" (dict "ctx" $ "name" "transform-router") -}}:8095
                -Ddsync.service.uris=https://localhost:9090/alfresco
              {{- end }}
          {{- with (include "arkcase.values" (dict "ctx" $ "base" "command") | fromYaml) }}
          command: {{ toJson .value }}
          {{- end }}
          resources: {{- include "arkcase.resources" $ | nindent 12 }}
          volumeMounts:
            {{- include "arkcase.alfresco.license.volumeMounts" (dict "ctx" $ "volume" "secrets" "path" "/usr/local/tomcat/shared/classes/alfresco/extension/license") | nindent 12 }}
            {{- include "arkcase.trusts.mount" $ | nindent 12 }}
            {{- include "arkcase.acme.volumeMount" $ | nindent 12 }}
            - name: *dataVolume
              mountPath: *dataDir
            - name: *initVolume
              mountPath: *initDir
            - name: &secrets "secrets"
              mountPath: "/usr/local/tomcat/shared/classes/alfresco-global.properties"
              subPath: &alfrescoGlobalProperties "alfresco-global.properties"
              readOnly: true
            - name: *secrets
              mountPath: "/usr/local/tomcat/shared/classes/alfresco/extension/subsystems/Authentication/ldap-ad/ldap1/ldap-ad.properties"
              subPath: &ldapAdProperties "ldap-ad.properties"
              readOnly: true
      volumes:
        {{- include "arkcase.trusts.volume" $ | nindent 8 }}
        {{- include "arkcase.acme.volume" $ | nindent 8 }}
        - name: *secrets
          secret:
            optional: false
            secretName: {{ include "arkcase.fullname" $ | quote }}
            defaultMode: 0444
            items:
              {{- include "arkcase.alfresco.license.volumes" $ | nindent 14 }}
              - key: *alfrescoGlobalProperties
                path: *alfrescoGlobalProperties
              - key: *ldapAdProperties
                path: *ldapAdProperties
        {{- include "arkcase.persistence.volume" (dict "ctx" $ "name" "init") | nindent 8 }}
        {{- include "arkcase.persistence.volume" (dict "ctx" $ "name" "data") | nindent 8 }}
      {{- with (include "arkcase.values" (dict "ctx" $ "base" "nodeSelector") | fromYaml) }}
      nodeSelector: {{- toYaml .value | nindent 8 }}
      {{- end }}
      {{- with (include "arkcase.values" (dict "ctx" $ "base" "affinity") | fromYaml) }}
      affinity: {{- toYaml .value | nindent 8 }}
      {{- end }}
      {{- with (include "arkcase.values" (dict "ctx" $ "base" "tolerations") | fromYaml) }}
      tolerations: {{- toYaml .value | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    {{- include "arkcase.persistence.volumeClaimTemplate" (dict "ctx" $ "name" "init") | nindent 4 }}
    {{- include "arkcase.persistence.volumeClaimTemplate" (dict "ctx" $ "name" "data") | nindent 4 }}

  {{- include "arkcase.persistence.declareResources" (dict "ctx" $ "volume" "init") | nindent 0 }}
  {{- include "arkcase.persistence.declareResources" (dict "ctx" $ "volume" "data") | nindent 0 }}
{{- end }}
