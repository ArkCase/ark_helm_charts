# Default values for ark-core.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This can be set to "false" by parent charts. If not defined, it will be taken as true
#enabled: true

#
# This should group all application-specific configurations
#
configuration:

  content:
    dialect: "alfresco"
    url: "http://content:8080/alfresco"
    shareUrl: "http://share:8080/share"
    username: "admin"
    password: "admin"

  ingress:
    enabled: false
    className: haproxy
    # hostName: my.host.name
    # tls: my-secret-name

  db:
    dialect: "postgres"
    hostname: "rdbms"
    # port: ...
    # adminUsername
    # adminPassword

    schema:
      content:
        database: "content"
        # schema: "public"
        # instance: "..."
        username: "content"
        password: "content"

  ldap:
    default: "arkcase"
    arkcase: &ldapArkcase
      domain: "dev.arkcase.com"
      url: "ldaps://ldap:636"
      # Base DN will be taken as relative from the root DN
      baseDn: "ou=ArkCase"
      bind:
        dn: "cn=ArkCase Administrator,ou=Users,${baseDn}"
        password: "$arkcase-admin$"
      admin:
        dn: "cn=ArkCase Administrator"
        role: "cn=ARKCASE_ADMINISTRATOR"
      search:
        users:
          base: "ou=Users"
          attribute: "sAMAccountName"
          filter: "(&(objectClass=user)(sAMAccountName={0}))"
          allFilter: "(objectClass=user)"
          prefix: ""
        groups:
          base: "ou=Groups"
          attribute: "cn"
          filter: "(&(objectClass=group)(cn={0}))"
          allFilter: "(objectClass=group)"
          membership: "(&(objectClass=group)(member={0}))"
          ignoreCase: "false"
          subtree: "true"
          rolePrefix: ""
          prefix: ""
    foia:
      <<: *ldapArkcase
      baseDn: "ou=FOIA"
      bind:
        dn: "cn=FOIA Administrator,ou=Users,${baseDn}"
        password: "$foia-admin$"

initDependencies:
  enabled: true
  mode: all
  template:
    # Any of the required ports are enough to succeed
    mode: any
    initialDelay: 10
    delay: 5
    attempts: 12
  dependencies:
    ldap:
      ports:
        - 389
        - 636
        - 9000
    rdbms:
      ports:
        # In case of SQLServer
        - 1443
        # In case of Oracle
        - 1521
        # In case of MySQL/MariaDB
        - 3306
        # In case of PostgreSQL
        - 5432

resources:
  default:
    activemq: "*-1Gi"
    main: "*-1536Mi"
    search: "*-2Gi"
    sfs: "*-512Mi"
    share: "*-1Gi"
    transform-core-aio: "*-1536Mi"
    transform-router: "*-512Mi"

  development:
    activemq: "200Mi-1Gi,100m-500m"
    main: "200Mi-1536Mi,100m-500m"
    search: "200Mi-2Gi,200m-500m"
    # sfs: "...?"
    share: "400Mi-1Gi,200m-500m"
    transform-core-aio: "200Mi-1536Mi,300m-500m"
    # transform-router: "...?"

platform: ""

image:
  # pullPolicy: IfNotPresent
  registry: "public.ecr.aws"

  minio:
    repository: "arkcase/minio"
    tag: "20230718210538.0.0-01"

  activemq:
    repository: "arkcase/alfresco-activemq"
    tag: "5.17.1"

  search:
    repository: "arkcase/alfresco-search"
    tag: "2.0.5"

  transform-core-aio:
    repository: "arkcase/alfresco-transform-core"
    tag: "3.0.0"

  # setperm:
  #   repository: "arkcase/setperm"
  #   tag: "1.0.2"

  community:
    main:
      repository: "arkcase/alfresco-ce-content"
      tag: &alfrescoVersion "7.3.1-02"

    share:
      repository: "arkcase/alfresco-ce-share"
      tag: *alfrescoVersion

  enterprise: 

    pullSecrets:
      - name: aws-arkcase-pull

    registry: "207428623785.dkr.ecr.us-east-1.amazonaws.com"

    main:
      repository: "arkcase/alfresco-ee-content"
      tag: *alfrescoVersion

    share:
      repository: "arkcase/alfresco-ee-share"
      tag: *alfrescoVersion

    sfs:
      repository: "arkcase/alfresco-ee-fileshare"
      tag: "2.0.0"

    transform-router:
      repository: "arkcase/alfresco-ee-transform-router"
      tag: "2.0.0"

# You generally shouldn't mess with these. These exist to support some name-generation templates
nameOverride: ""
fullnameOverride: ""

# Custom annotations to apply throughout
annotations:

# Custom labels to apply throughout
labels:

updateStrategy: RollingUpdate
rollingUpdatePartition: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations:
  # Annotations to add to the service account
  labels:
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

securityContext:
  template:
    # You must specify an `fsGroup` to allow ActiveMQ write access to mounted
    # volumes (as long as ActiveMQ runs as a non-root user, which should be the
    # case). Any random number will do.
    fsGroup: &fsGroup 1997
    fsGroupChangePolicy: OnRootMismatch
  config:
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: &runAsUser 1997
    # runAsGroup: *fsGroup
  arkcase:
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: &runAsUser 1997
    # runAsGroup: *fsGroup

#autoscaling:
  #enabled: false
  #minReplicas: 1
  #maxReplicas: 100
  #targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector:

tolerations:

affinity:

licenses:
  - "alfresco"

persistence:
  # If set to `false`, an `emptyDir` will be used instead and all other `persistence.*` parameters
  # are ignored.
  enabled: true

  # Set the default capacity for volumes in case none is assigned explicitly
  # and the default value is insufficient
  volumeSize:
    main-init: "2Gi"
    main-data: "8Gi"
    sfs-data: "8Gi"

#  The volumes for persistent data
  volumes:
# The volume where the data will be stored (RTFM for more info on how to
# properly declare volumes)
#     data:

serviceTemplates: &serviceTemplate
  probes: &probesTemplate
    enabled: true
    spec: &probesSpecTemplate
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 1
      failureThreshold: 60
      successThreshold: 1

  ports: &ports {}

service:

  main:
    <<: *serviceTemplate
    ports:
      - name: "cmis"
        protocol: TCP
        port: 8080
      - name: "s3"
        protocol: TCP
        port: 9000
      - name: "s3console"
        protocol: TCP
        port: 9001

  share:
    <<: *serviceTemplate
    ports:
      - name: "http"
        protocol: TCP
        port: 8080
  
  sfs:
    <<: *serviceTemplate
    ports:
      - name: "http"
        protocol: TCP
        port: 8099
  
  activemq:
    <<: *serviceTemplate
    ports:
      - name: "amqp"
        protocol: TCP
        port: 5672
  
      - name: "console"
        protocol: TCP
        port: 8161
  
      - name: "stomp"
        protocol: TCP
        port: 61613
  
      - name: "openwire"
        protocol: TCP
        port: 61616
  
  search:
    <<: *serviceTemplate
    ports:
      - name: "http"
        protocol: TCP
        port: 8983
  
  transform-router:
    <<: *serviceTemplate
    ports:
      - name: "http"
        protocol: TCP
        port: 8095
  
  transform-core-aio:
    <<: *serviceTemplate
    ports:
      - name: "http"
        protocol: TCP
        port: 8090
