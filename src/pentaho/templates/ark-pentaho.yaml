{{- if and (include "arkcase.subsystem.enabled" $) (not (include "arkcase.subsystem.external" $)) }}
{{- $db := (include "arkcase.db.info" $ | fromYaml) -}}
{{- $foia := (include "arkcase.foia" $ | fromYaml) -}}
{{- $cronFoia := (include "arkcase.tools.conf" (dict "ctx" $ "value" "cron.foia")) -}}
{{- $cronAnalytics := (include "arkcase.tools.conf" (dict "ctx" $ "value" "cron.analytics")) -}}
{{- $fullName := (include "arkcase.fullname" $) -}}
{{- $serviceName := (include "arkcase.service.name" $) -}}
{{- $cluster := (include "arkcase.cluster" $ | fromYaml) -}}
{{- $nodes := (min 4 $cluster.nodes) -}}
{{- $maxFailed := (sub $nodes 1) -}}
{{- if (gt $maxFailed 0) }}
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ $fullName | quote }}
  namespace: {{ $.Release.Namespace | quote }}
spec:
  maxUnavailable: {{ $maxFailed }}
  selector:
    matchLabels: {{- include "arkcase.labels.matchLabels" $ | nindent 6 }}
{{- end }}
{{- $serviceAccountName := (include "arkcase.serviceAccountName" $) }}
{{- if $cluster.enabled }}
  {{- $serviceAccountName = (or (empty $serviceAccountName) (eq "default" $serviceAccountName)) | ternary $fullName $serviceAccountName }}
  {{- $roleName := (printf "%s-cluster-membership" $serviceAccountName) }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $serviceAccountName | quote }}
  namespace: {{ $.Release.Namespace | quote }}
  labels: {{- include "arkcase.labels" $ | nindent 4 }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ $roleName | quote }}
  namespace: {{ $.Release.Namespace | quote }}
  labels: {{- include "arkcase.labels" $ | nindent 4 }}
rules:
  # "" indicates the core API group
  - apiGroups: [ "" ]
    resources: [ "pods" ]
    verbs: [ "get", "watch", "list" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ printf "%s:%s" $serviceAccountName $roleName | quote }}
  namespace: {{ $.Release.Namespace | quote }}
  labels: {{- include "arkcase.labels" $ | nindent 4 }}
subjects:
  - kind: ServiceAccount
    name: {{ $serviceAccountName | quote }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ $roleName | quote }}
{{- end }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: &fullName {{ $fullName | quote }}
  namespace: {{ $.Release.Namespace | quote }}
  labels: {{- include "arkcase.labels.service" $ | nindent 4 }}
    {{- with ($.Values.labels).common }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with ($.Values.annotations).common }}
  annotations: {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ $nodes }}
  selector: &labelSelector
    matchLabels: {{- include "arkcase.labels.matchLabels" $ | nindent 6 }}
  serviceName: {{ include "arkcase.service.headless" $ | quote }}
  updateStrategy:
    type: {{ $.Values.updateStrategy }}
    {{- if (eq "Recreate" $.Values.updateStrategy) }}
    rollingUpdate: null
    {{- else if $.Values.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ $.Values.rollingUpdatePartition }}
    {{- end }}
  podManagementPolicy: Parallel
  template:
    metadata:
      name: *fullName
      namespace: {{ $.Release.Namespace | quote }}
      labels: {{- include "arkcase.labels.service" $ | nindent 8 }}
        {{- with ($.Values.labels).common }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        # NB: Both these annotation values must be of type "string"
        prometheus.io/scrape: "true"
        prometheus.io/port: "9100"
        {{- with ($.Values.annotations).common }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      affinity:
        podAntiAffinity:
        {{- if $cluster.onePerHost }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              namespaces: [ {{ $.Release.Namespace | quote }} ]
              labelSelector:
                <<: *labelSelector
        {{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: "kubernetes.io/hostname"
                namespaces: [ {{ $.Release.Namespace | quote }} ]
                labelSelector:
                  <<: *labelSelector
        {{- end }}
      {{- include "arkcase.image.pullSecrets" $ | nindent 6 }}
      {{- with $.Values.hostAliases }}
      hostAliases: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $.Values.schedulerName }}
      schedulerName: {{ $.Values.schedulerName | quote }}
      {{- end }}
      {{- if $serviceAccountName }}
      serviceAccountName: {{ $serviceAccountName | quote }}
      {{- end }}
      securityContext: {{- include "arkcase.securityContext" $ | nindent 8 }}
      initContainers:
        - name: init-deployer
          {{- include "arkcase.image" (dict "ctx" $ "name" "deployer" "repository" "arkcase/deployer") | nindent 10 }}
          env: {{- include "arkcase.tools.baseEnv" $ | nindent 12 }}
            {{- include "arkcase.deployment.env" $ | nindent 12 }}
          volumeMounts:
            - name: &configMap "config-map"
              mountPath: "/deploy"
              subPath: &deploy "deploy"
              readOnly: true
            - name: &initVol "init"
              mountPath: &initPath "/app/init"
            - name: &dataVol "data"
              mountPath: &dataPath "/app/data"
        - name: init-set-permissions
          {{- include "arkcase.image" (dict "ctx" $ "name" "setperm" "repository" "arkcase/setperm") | nindent 10 }}
          env: {{- include "arkcase.tools.baseEnv" $ | nindent 12 }}
            - name: JOBS
              value: |
                jobs:
                  # We know the UID for the Pentaho container is 998:996
                  - ownership: "1998:1998"
                    permissions: "u=rwX,g=rX,o="
                    flags: [ "recurse", "noforced", "create", "changes" ]
                    targets: [ "/app/data", "/app/logs", "/app/init" ]
          volumeMounts:
            - name: *initVol
              mountPath: *initPath
            - name: *dataVol
              mountPath: *dataPath
            - name: &logsVol "logs"
              mountPath: &logsPath "/app/logs"
        {{- include "arkcase.initDependencies.container" $ | nindent 8 }}
      containers:
        - name: pentaho
          {{- include "arkcase.image" $ | nindent 10 }}
          env: {{- include "arkcase.tools.baseEnv" $ | nindent 12 }}
            {{- include "arkcase.cluster.tomcat.env" $ | nindent 12 }}
            {{- include "arkcase.acme.env" $ | nindent 12 }}
            {{- if $cluster.enabled }}
              {{- $zk := (include "arkcase.cluster.zookeeper" $) }}
              {{- if $zk }}
            - name: ZK_HOST
              value: {{ $zk | quote }}
              {{- end }}
            {{- end }}
            - name: DATA_DIR
              value: *dataPath
            - name: INIT_DIR
              value: *initPath
            - name: LOGS_DIR
              value: *logsPath
            - name: DB_DIALECT
              value: {{ $db.filesDialect | quote }}
            - name: DB_SCRIPTS
              value: {{ $db.scripts | quote }}
            - name: ARKCASE_SERVER_URL
              value: "https://core:8443/arkcase"
            - name: PENTAHO_SERVER_URL
              value: {{ printf "https://%s:8443/pentaho" $serviceName }}
            - name: ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: *fullName
                  key: "adminUsername"
            - name: LDAP_DOMAIN
              valueFrom:
                secretKeyRef:
                  name: *fullName
                  key: "ldapDomain"
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: *fullName
                  key: "adminPassword"
            - name: CLUSTER_ENABLED
              value: {{ $cluster.enabled | toString | quote }}
            - name: ADMIN_PORT
              value: {{ $cluster.enabled | ternary 4443 8443 | toString | quote }}
            - name: PENTAHO_INSTALLED_LICENSE_PATH
              value: "/app/data/.installedLicenses.xml"
          {{- include "arkcase.subsystem.ports" ($cluster.enabled | ternary ($.Values.service).clustered ($.Values.service).pentaho) | nindent 10 }}
          {{- with ($.Values.command).pentaho }}
          command: {{ . | toYaml }}
          {{- end }}
          resources: {{- include "arkcase.resources" $ | nindent 12 }}
          securityContext: {{- include "arkcase.securityContext" (dict "ctx" $ "container" "pentaho") | nindent 12 }}
          volumeMounts:
            {{- include "arkcase.pentaho.license.volumeMounts" (dict "ctx" $ "volume" "secrets" "path" "/app/init/licenses") | nindent 12 }}
            {{- include "arkcase.trusts.mount" $ | nindent 12 }}
            {{- include "arkcase.acme.volumeMount" $ | nindent 12 }}
            - name: &ssl "ssl"
              mountPath: &sslDir "/.ssl"
            - name: *dataVol
              mountPath: *dataPath
            - name: *initVol
              mountPath: *initPath
            - name: *logsVol
              mountPath: *logsPath
            - name: &secrets "secrets"
              mountPath: "/.template-vars.yaml"
              subPath: &templateVars "template-vars.yaml"
              readOnly: true
            - name: *secrets
              mountPath: "/app/pentaho/pentaho-server/tomcat/webapps/pentaho/META-INF/context.xml"
              subPath: &contextXml "context.xml"
              readOnly: true
            - name: *secrets
              mountPath: "/app/pentaho/pentaho-server/pentaho-solutions/system/jackrabbit/repository.xml.tpl"
              subPath: &repositoryXmlTpl "repository.xml.tpl"
              readOnly: true
            - name: *secrets
              mountPath: "/app/pentaho/pentaho-server/pentaho-solutions/system/applicationContext-security-ldap.properties"
              subPath: &applicationContextSecurityLdapProperties "applicationContext-security-ldap.properties"
              readOnly: true
            - name: *secrets
              mountPath: "/app/lb/run-liquibase-updates"
              subPath: &runLiquibaseUpdates "run-liquibase-updates"
              readOnly: true
            - name: *configMap
              mountPath: "/entrypoint"
              subPath: &entrypoint "entrypoint"
              readOnly: true
            - name: *configMap
              mountPath: "/config-pre.sh"
              subPath: &configPreSh "config-pre.sh"
              readOnly: true
            - name: *configMap
              mountPath: "/config-post.sh"
              subPath: &configPostSh "config-post.sh"
              readOnly: true
            - name: *configMap
              mountPath: "/usr/local/bin/install-reports"
              subPath: &installReports "install-reports"
              readOnly: true
            - name: *configMap
              mountPath: "/app/pentaho/pentaho-server/pentaho-solutions/system/arkcase-preauth.xml"
              subPath: &arkcasePreauthXml "arkcase-preauth.xml"
              readOnly: true
            - name: *configMap
              mountPath: "/app/pentaho/pentaho-server/pentaho-solutions/system/security.properties"
              subPath: &securityProperties "security.properties"
              readOnly: true
            - name: *configMap
              mountPath: "/app/pentaho/pentaho-server/pentaho-solutions/system/server.properties.tpl"
              subPath: &serverPropertiesTpl "server.properties.tpl"
              readOnly: true
            - name: *configMap
              mountPath: "/app/pentaho/pentaho-server/pentaho-solutions/system/pdi-pur-plugin/plugin.properties.tpl"
              subPath: &pluginPropertiesTpl "plugin.properties.tpl"
              readOnly: true
            - name: *configMap
              mountPath: "/app/pentaho-pdi/data-integration/plugins/pdi-pur-plugin/plugin.properties.tpl"
              subPath: *pluginPropertiesTpl
              readOnly: true
            - name: *configMap
              mountPath: "/app/pentaho/pentaho-server/pentaho-solutions/system/repository.spring.properties"
              subPath: &repositorySpringProperties "repository.spring.properties"
              readOnly: true
            - name: *configMap
              mountPath: "/app/pentaho/pentaho-server/pentaho-solutions/system/applicationContext-spring-security.xml"
              subPath: &applicationContextSpringSecurityXml "applicationContext-spring-security.xml"
              readOnly: true
            - name: *configMap
              mountPath: "/app/pentaho/pentaho-server/pentaho-solutions/system/quartz/quartz.properties"
              subPath: &quartzProperties "quartz.properties"
              readOnly: true
            - name: *configMap
              mountPath: "/app/pentaho/pentaho-server/pentaho-solutions/system/hibernate/hibernate-settings.xml"
              subPath: &hibernateSettingsXml "hibernate-settings.xml"
              readOnly: true
            - name: *configMap
              mountPath: "/app/pentaho/pentaho-server/tomcat/conf/server.xml.tpl"
              subPath: &serverXmlTpl "server.xml.tpl"
              readOnly: true
            - name: *configMap
              mountPath: "/app/pentaho/pentaho-server/tomcat/webapps/pentaho/WEB-INF/classes/log4j2.xml"
              subPath: &log4j2Xml "log4j2.xml"
              readOnly: true
            - name: *configMap
              mountPath: "/app/init/reports/000-base-reports.zip"
              subPath: &baseReportsZip {{ printf "base-reports.%s.zip" $db.reports | quote }}
              readOnly: true
            - name: *configMap
              mountPath: "/usr/local/bin/render-template"
              subPath: &renderTemplate "render-template"
              readOnly: true
            - name: *configMap
              mountPath: "/usr/local/bin/run-kjb"
              subPath: &runKjb "run-kjb"
              readOnly: true
            - name: *configMap
              mountPath: "/usr/local/bin/add-pdi-connection"
              subPath: &addPdiConnection "add-pdi-connection"
              readOnly: true
            - name: *configMap
              mountPath: "/usr/local/bin/install-mondrian-schema"
              subPath: &installMondrianSchema "install-mondrian-schema"
              readOnly: true
            {{- if $foia }}
            - name: *configMap
              mountPath: "/app/init/reports/001-foia-base-reports.zip"
              subPath: &foiaBaseReportsZip {{ printf "foia-base-reports.%s.zip" $db.reports | quote }}
              readOnly: true
            {{- end }}
            - name: *configMap
              mountPath: "/lock-initializer"
              subPath: &lockInitializer "lock-initializer"
            - name: *configMap
              mountPath: "/usr/local/etc/curator-wrapper.yaml"
              subPath: &curatorWrapperYaml "curator-wrapper.yaml"
              readOnly: true
        {{- if $cluster.enabled }}
        - name: haproxy
          {{- include "arkcase.image" (dict "ctx" $ "name" "haproxy" "repository" "haproxy") | nindent 10 }}
          env: {{- include "arkcase.tools.baseEnv" $ | nindent 12 }}
          command: [ "/entrypoint" ]
          {{- include "arkcase.subsystem.ports" ($.Values.service).pentaho | nindent 10 }}
          securityContext: {{- include "arkcase.securityContext" (dict "ctx" $ "container" "haproxy") | nindent 12 }}
          volumeMounts:
            - name: *ssl
              mountPath: *sslDir
              readOnly: true
            - name: *configMap
              mountPath: "/usr/local/etc/haproxy/haproxy.cfg"
              subPath: &haproxyCfg "haproxy.cfg"
              readOnly: true
            - name: *configMap
              mountPath: "/entrypoint"
              subPath: &entrypointHaproxy "entrypoint-haproxy"
              readOnly: true
        {{- end }}
      volumes:
        {{- include "arkcase.trusts.volume" $ | nindent 8 }}
        {{- include "arkcase.acme.volume" $ | nindent 8 }}
        {{- include "arkcase.persistence.volume" (dict "ctx" $ "name" "data") | nindent 8 }}
        {{- include "arkcase.persistence.volume" (dict "ctx" $ "name" "init") | nindent 8 }}
        {{- include "arkcase.persistence.volume" (dict "ctx" $ "name" "logs") | nindent 8 }}
        - name: *ssl
          emptyDir:
            medium: Memory
            sizeLimit: 1Mi
        - name: *secrets
          secret:
            optional: false
            secretName: *fullName
            defaultMode: 0444
            items:
              {{- include "arkcase.pentaho.license.volumes" $ | nindent 14 }}
              - key: *contextXml
                path: *contextXml
              - key: *templateVars
                path: *templateVars
              - key: *repositoryXmlTpl
                path: *repositoryXmlTpl
              - key: *applicationContextSecurityLdapProperties
                path: *applicationContextSecurityLdapProperties
              - key: *runLiquibaseUpdates
                path: *runLiquibaseUpdates
                mode: 0555
        - name: *configMap
          configMap:
            optional: false
            name: *fullName
            defaultMode: 0444
            items:
              - key: *hibernateSettingsXml
                path: *hibernateSettingsXml
              - key: *repositorySpringProperties
                path: *repositorySpringProperties
              - key: *applicationContextSpringSecurityXml
                path: *applicationContextSpringSecurityXml
              - key: *securityProperties
                path: *securityProperties
              - key: *serverPropertiesTpl
                path: *serverPropertiesTpl
              - key: *pluginPropertiesTpl
                path: *pluginPropertiesTpl
              - key: *serverXmlTpl
                path: *serverXmlTpl
              - key: *log4j2Xml
                path: *log4j2Xml
              - key: *quartzProperties
                path: *quartzProperties
              - key: *arkcasePreauthXml
                path: *arkcasePreauthXml
              - key: *deploy
                path: *deploy
                mode: 0555
              - key: *entrypoint
                path: *entrypoint
                mode: 0555
              - key: *configPreSh
                path: *configPreSh
                mode: 0555
              - key: *configPostSh
                path: *configPostSh
                mode: 0555
              - key: *installReports
                path: *installReports
                mode: 0555
              - key: *baseReportsZip
                path: *baseReportsZip
              - key: *renderTemplate
                path: *renderTemplate
                mode: 0555
              - key: *runKjb
                path: *runKjb
                mode: 0555
              - key: *addPdiConnection
                path: *addPdiConnection
                mode: 0555
              - key: *installMondrianSchema
                path: *installMondrianSchema
                mode: 0555
              {{- if $foia }}
              - key: *foiaBaseReportsZip
                path: *foiaBaseReportsZip
              {{- end }}
              - key: *lockInitializer
                path: *lockInitializer
                mode: 0555
              - key: *curatorWrapperYaml
                path: *curatorWrapperYaml
              {{- if $cluster.enabled }}
              - key: *haproxyCfg
                path: *haproxyCfg
              - key: *entrypointHaproxy
                path: *entrypointHaproxy
                mode: 0555
              {{- end }}
      {{- with $.Values.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
    {{- include "arkcase.persistence.volumeClaimTemplate" (dict "ctx" $ "name" "data") | nindent 4 }}
    {{- include "arkcase.persistence.volumeClaimTemplate" (dict "ctx" $ "name" "init") | nindent 4 }}
    {{- include "arkcase.persistence.volumeClaimTemplate" (dict "ctx" $ "name" "logs") | nindent 4 }}

  {{- include "arkcase.persistence.declareResources" (dict "ctx" $ "volume" "data") | nindent 0 }}
  {{- include "arkcase.persistence.declareResources" (dict "ctx" $ "volume" "init") | nindent 0 }}
  {{- include "arkcase.persistence.declareResources" (dict "ctx" $ "volume" "logs") | nindent 0 }}

{{- end }}
