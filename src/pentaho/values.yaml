# Default values for .arkcase_pentaho_ce
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This can be set to "false" by parent charts. If not defined, it will be taken as true
#enabled: true

#
# This should group all application-specific configurations
#
configuration:

  ingress:
    enabled: false
    className: haproxy
    # hostName: my.host.name
    # tls: my-secret-name

  # Console username and password: Please set a secure password
  adminUsername: &adminUsername "admin"
  adminPassword: *adminUsername

  # Use the default journal type. The other type is mem (or memory)
  journalType: db

  db: 
    dialect: "postgres"
    hostname: "rdbms"
    # port: ...
    # adminUsername
    # adminPassword

    schema:
      arkcase:
        database: "arkcase"
        username: "arkcase"
        password: "ArKcAsE"

      quartz:
        database: "quartz"
        username: "pentaho_user"
        password: "PeNtAhOx"

      jackrabbit:
        database: "jackrabbit"
        username: "jcr_user"
        password: "jAcKrAbBiT"

      hibernate:
        database: "hibernate"
        username: "hibuser"
        password: "hIbErNaTe"

  ldap:
    default: "arkcase"
    arkcase: &ldapArkcase
      domain: "dev.arkcase.com"
      url: "ldaps://ldap:636"
      # Base DN will be taken as relative from the root DN
      baseDn: "ou=ArkCase"
      bind:
        dn: "cn=ArkCase Administrator,ou=Users,${baseDn}"
        password: "$arkcase-admin$"
      admin:
        dn: "cn=ArkCase Administrator"
        role: "cn=ARKCASE_ADMINISTRATOR"
      search:
        users:
          base: "ou=Users"
          attribute: "sAMAccountName"
          filter: "(&(objectClass=user)(sAMAccountName={0}))"
          allFilter: "(objectClass=user)"
          prefix: ""
        groups:
          base: "ou=Groups"
          attribute: "cn"
          filter: "(&(objectClass=group)(cn={0}))"
          allFilter: "(objectClass=group)"
          membership: "(&(objectClass=group)(member={0}))"
          ignoreCase: "false"
          subtree: "true"
          rolePrefix: ""
          prefix: ""
    foia:
      <<: *ldapArkcase
      baseDn: "ou=FOIA"
      bind:
        dn: "cn=FOIA Administrator,ou=Users,${baseDn}"
        password: "$foia-admin$"

initDependencies:
  enabled: true
  template:
    mode: any
    initialDelay: 10
    delay: 5
    timeout: 5
    attempts: 12
  mode: all
  dependencies:
    app-artifacts:
      ports:
        - 80

    rdbms:
      # By using the approach that any of these ports is
      # sufficient, we cover all our bases regarding the RDBMS
      # backend in use, be it MS-SQL (1433), Oracle (1521),
      # MySQL (3306), or PostgreSQL (5432)
      ports:
        - 1433
        - 1521
        - 3306
        - 5432

    ldap:
      ports:
        - 389
        - 636
        - 9000

    zookeeper:
      clusterOnly: true
      ports:
        - 2181

resources:
  development:
    limits: "2Gi,1"

platform: ""

image:
  pullPolicy: IfNotPresent
  pullSecrets:
    - name: aws-arkcase-pull

  registry: "public.ecr.aws"

  deployer:
    repository: "arkcase/deployer"
    tag: 1.0.2-01

  community:
    repository: "arkcase/pentaho-ce"
    tag: &pentahoVersion "9.4.0.0-343-07"

  enterprise:
    registry: "207428623785.dkr.ecr.us-east-1.amazonaws.com"
    repository: "arkcase/pentaho-ee"
    tag: *pentahoVersion

  haproxy:
    registry: ""
    repository: "haproxy"
    tag: "2.6"

# You generally shouldn't mess with these. These exist to support some name-generation templates
nameOverride: ""
fullnameOverride: ""

# Custom annotations to apply throughout
annotations:

# Custom labels to apply throughout
labels:

updateStrategy: RollingUpdate
rollingUpdatePartition: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations:
  # Annotations to add to the service account
  labels:
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

securityContext:
  # template:
    # You must specify an `fsGroup` to allow MariaDB write access to mounted
    # volumes (as long as MariaDB runs as a non-root user, which should be the
    # case). Any random number will do.
    # fsGroup: 996
    # fsGroupChangePolicy: OnRootMismatch
  # pentaho:
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true

#autoscaling:
  #enabled: false
  #minReplicas: 1
  #maxReplicas: 100
  #targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector:

tolerations:

affinity:

persistence:
  # If set to `false`, an `emptyDir` will be used instead and all other `persistence.*` parameters
  # are ignored.
  enabled: true

  # Set the default capacity for volumes in case none is assigned explicitly
  # and the default value is insufficient
  volumeSize:
    init: "1Gi"
    data: "4Gi"
    logs: "2Gi"

#  The volumes for persistent data
  volumes:
# The volume where the data will be stored (RTFM for more info on how to
# properly declare volumes)
#     data:

licenses:
  - "pentaho"

service:
  #external: host-or-IP
  ports:
    - name: console
      protocol: TCP
      port: &db 2002
    - name: http
      protocol: TCP
      port: &http 8080
##
## Configure extra options for containers' liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
## @param service.probes.enabled Enable liveness and readiness probes
## @param service.probes.spec.initialDelaySeconds Initial delay seconds for liveness and readiness probes
## @param service.probes.spec.periodSeconds Period seconds for liveness and readiness probes
## @param service.probes.spec.timeoutSeconds Timeout seconds for liveness and readiness probes
## @param service.probes.spec.failureThreshold Failure threshold for liveness and readiness probes
## @param service.probes.spec.successThreshold Success threshold for liveness and readiness probes
##
  probes:
    enabled: true
    spec:
      httpGet:
        path: "/pentaho/Login"
        port: *http
      initialDelaySeconds: 30
      periodSeconds: 5
      timeoutSeconds: 5
      failureThreshold: 60
      successThreshold: 1
