{{- $cluster := (include "arkcase.cluster" $ | fromYaml) -}}
{{- if $cluster.enabled -}}
  {{- $serviceDomain := (include "arkcase.service.headless" $) -}}
  {{- $podName := (include "arkcase.fullname" $) -}}
  {{- $nodes := $cluster.enabled | ternary $cluster.nodes 1 | int -}}
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
	daemon
	ca-base				/usr/local/etc/haproxy/trust/
	log					127.0.0.1:514 local0 debug
	log-tag				haproxy
	pidfile				/var/lib/haproxy/haproxy.pid
	maxconn				4000
#	ssl-default-bind-options	force-tlsv12
#	ssl-default-server-options	force-tlsv12
#	tune.ssl.default-dh-param	2048
#	ssl-server-verify		none
	stats				socket /var/lib/haproxy/haproxy-stats
	localpeer			"${POD_NAME}"

defaults
	log					global
	option				httplog
	option				dontlognull
#	option				httpchk
#	option				dontlog-normal
	option				http-server-close
	option				forwardfor except 127.0.0.0/8
	option				redispatch
	retries				3

	timeout				http-request		20s
	timeout				queue			6m
	timeout				connect			180s
	timeout				client			180s
	timeout				server			10m
	timeout				http-keep-alive		20s
	timeout				check			20s

#	errorfile			502 /usr/local/etc/haproxy/errors/armedia-error-502.http
#	errorfile			503 /usr/local/etc/haproxy/errors/armedia-error-503.http
#	errorfile			504 /usr/local/etc/haproxy/errors/armedia-error-504.http

#---------------------------------------------------------------------
# Management ports for haproxy
#---------------------------------------------------------------------
listen admin
	# Listen on all IP's on port 81
	bind				*:81
	mode				http
	stats				enable
	stats				hide-version
	stats				refresh 30s
	stats				realm HAProxy\ Statistics
	stats				uri /
	stats				admin if TRUE
	# TODO: Render a different password?
	stats				auth admin:admin

listen stats
	# Listen on all IP's on port 9000
	bind				*:9600
	mode				http
	stats				enable
	stats				refresh 60s
	stats				show-node
	stats				uri /

#---------------------------------------------------------------------
# Cluster Peer Definitions
#---------------------------------------------------------------------
peers cluster
	# It's important we use the pod name as the peer ID here, as that's
	# how the local peer will be identified, above (see localpeer)
  {{- range $n := (until $nodes ) }}
    {{- $podId := (printf "%s-%d" $podName .) }}
	peer	{{ $podId }}	{{ $podId }}.{{ $serviceDomain }}:10000
  {{- end }}

#---------------------------------------------------------------------
# Front End Definitions
#---------------------------------------------------------------------
frontend default
	mode				http
	bind				*:8080
#	bind				*:8443 force-tlsv12 ssl crt /usr/local/etc/haproxy/combo/ alpn h2,http/1.1
#	redirect			scheme https unless { ssl_fc }

	default_backend		backend

#---------------------------------------------------------------------
# Back End Definitions
#---------------------------------------------------------------------
backend backend
	mode		http
	cookie		POD_NAME insert indirect nocache maxidle 30m maxlife 8h
	stick-table	type string len 32 size 30k expire 60m peers cluster
	stick		store-response res.cook(JSESSIONID)
	stick		on req.cook(JSESSIONID)
	tcp-request	content track-sc0 req.cook(JSESSIONID)
	http-request	set-log-level silent
	# Here we use the pod name as the cookie value, so it's easier
	# for us to track in the statistics, should we need to
  {{- range $n := (until $nodes ) }}
    {{- $podId := (printf "%s-%d" $podName .) }}
	server		{{ $podId }} {{ $podId }}.{{ $serviceDomain }}:4040 fall 3 rise 2 cookie {{ $podId }} check inter 1s
	# server		{{ $podId }} {{ $podId }}.{{ $serviceDomain }}:4443 fall 3 rise 2 cookie {{ $podId }} check inter 1s check ssl verify required ca-file some-trusted-ca-file.crt
  {{- end }}

#---------------------------------------------------------------------
# End of file
#---------------------------------------------------------------------
{{- end -}}
