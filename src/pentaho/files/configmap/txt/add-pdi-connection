#!/bin/bash

set -euo pipefail

timestamp() {
	date -Ins -u
}

say() {
	echo -e "$(timestamp): ${@}"
}

fail() {
	say "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

usage() {
	echo -e "usage: ${BASH_SOURCE:-${0}} connection.json"
	exit 1
}

is_http_success() {
	local HTTP_CODE="${1}"
	[ ${HTTP_CODE} -ge 200 ] && [ ${HTTP_CODE} -le 299 ] && return 0
	return 1
}

run_curl() {
	local ENDPOINT="${1}"
	local METHOD="${2:-""}"
	local POST_FILE="${3:-""}"
	local CODE_ONLY="${4:-"true"}"

	local HEADERS=()
	if [ -n "${POST_FILE}" ] ; then
		METHOD="POST"
		POST_FILE=(--data "@${POST_FILE}")
		HEADERS=(--header "Content-Type: application/json")
	else
		POST_FILE=()
	fi

	if [ -n "${METHOD}" ] ; then
		METHOD=(--request "${METHOD^^}")
	else
		METHOD=()
	fi

	OUTPUT=()
	case "${CODE_ONLY,,}" in
		true | t | 1 | yes | y | enabled | enable | en )
			CODE_ONLY="true"
			OUTPUT=(-o /dev/null -w "%{http_code}")
			;;
		* )
			CODE_ONLY="false"
			OUTPUT=(--fail)
			;;
	esac

	local RC=0
	local HTTP_CODE="$(curl -kL \
		-sS \
		--disallow-username-in-url \
		--config <(echo -n "--user \"${ADMIN_USERNAME}:${ADMIN_PASSWORD}\"") \
		"${OUTPUT[@]}" \
		"${METHOD[@]}" \
		"${HEADERS[@]}" \
		"${POST_FILE[@]}" \
		"${PENTAHO_URL}${ENDPOINT}")" || RC=${?}

	if ${CODE_ONLY} ; then
		# If it's a 200 code, then return 0
		is_http_success "${HTTP_CODE}" && return 0

		# Else, echo out the code, and return
		echo -n "${HTTP_CODE}"
		return 1
	else
		echo "${HTTP_CODE}"
		return ${RC}
	fi
}

connection_exists() {
	local NAME="${1}"
	run_curl "/plugin/data-access/api/datasource/jdbc/connection" "" "" "false" | \
		jq -r '.Item[]["$"]' | \
		grep -q "^${NAME}$"
}

delete_connection() {
	local NAME="${1}"

	local ENCODED="$(echo -n "${NAME}" | jq -sRr @uri)"
	local RESULT="$(run_curl "/plugin/data-access/api/datasource/jdbc/connection/${ENCODED}" "DELETE")" || true
	[ -n "${RESULT}" ] || return 0
	say "Failed to delete the existing connection [${NAME}](encoded = ${ENCODED}): ${RESULT}"
	return 1
}

create_connection() {
	local FILE="${1}"

	if ! jq -r < "${FILE}" &>/dev/null ; then
		say "The file [${JSON_FILE}] is not properly-formatted JSON"
		return 1
	fi

	local NAME="$(jq -r '.name' < "${FILE}")"
	if [ -z "${NAME}" ] ; then
		say "The connection at [${JSON_FILE}] doesn't have a name"
		return 1
	fi

	if connection_exists "${NAME}" ; then
		local CMD="say"
		${REPLACE} || CMD="fail"
		"${CMD}" "A connection named [${NAME}] already exists"
		say "\t...replacing the existing connection"
		delete_connection "${NAME}" || return ${?}
		say "Existing connection deleted"
	fi

	say "Installing a new connection [${NAME}] from [${FILE}]..."
	local RESULT="$(run_curl "/plugin/data-access/api/connection/add" "POST" "${FILE}")" && return 0
	say "Failed to create the database connection [${NAME}] (http code = ${RESULT})"
	return 1
}

[ ${#} -eq 1 ] || usage

[ -v PENTAHO_URL ] || PENTAHO_URL="http://localhost:8080/pentaho"
[ -v ADMIN_USERNAME ] || ADMIN_USERNAME="arkcase-admin"
[ -v ADMIN_PASSWORD ] || ADMIN_PASSWORD='$arkcase-admin$'
[ -v REPLACE ] || REPLACE="true"

case "${REPLACE,,}" in
	true | t | 1 | yes | y | on | enable | enabled | en ) REPLACE="true" ;;
	* ) REPLACE="false" ;;
esac

JSON_FILE="${1}"

[ -e "${JSON_FILE}" ] || fail "The file [${JSON_FILE}] does not exist"
[ -f "${JSON_FILE}" ] || fail "The path [${JSON_FILE}] is not a regular file"
[ -r "${JSON_FILE}" ] || fail "The file [${JSON_FILE}] is not readable"

create_connection "${JSON_FILE}"
exit ${?}
