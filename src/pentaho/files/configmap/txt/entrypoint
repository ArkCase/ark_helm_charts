#!/bin/bash

timestamp() {
	/usr/bin/date -Isec -u
}

say() {
	echo -e "$(timestamp): ${@}"
}

fail() {
	say "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

set -euo pipefail

[ -v BASE_DIR ] || BASE_DIR="/app"
[ -v PENTAHO_HOME ] || PENTAHO_HOME="${BASE_DIR}/pentaho"

[ -v PENTAHO_SERVER ] || PENTAHO_SERVER="${PENTAHO_HOME}/pentaho-server"
[ -e "${PENTAHO_SERVER}" ] || fail "The Pentaho server directory could not be found at [${PENTAHO_SERVER}], cannot continue."
[ -d "${PENTAHO_SERVER}" ] || fail "The path [${PENTAHO_SERVER}] is not a directory, cannot continue."

###################################################################
# IDENTIFY VALUES FOR CLUSTERING SUPPORT                          #
###################################################################
if [ ! -v NODE_ID ] ; then
	[ -v POD_NAME ] || POD_NAME="$(hostname)"
	POD_NAME="${POD_NAME%%.*}"
	[[ "${POD_NAME}" =~ ^.*-([0-9]+)$ ]] || fail "The pod name [${POD_NAME}] doesn't match the pattern for a stateful pod (must end with a number)"
	NODE_ID="${BASH_REMATCH[1]}"
else
	[[ "${NODE_ID}" =~ ^[1-9][0-9]*$ ]] || fail "The NODE_ID value [${NODE_ID}] is not a valid number"
	[ ${NODE_ID} -gt 0 ] && [ ${NODE_ID} -lt 256 ] || fail "The NODE_ID value must be in the range [1..255]"
fi

# Remove al leading zeros, just in case...
export NODE_ID="$(( 10#${NODE_ID} ))"

#
# Apply the changes to the server.xml template
#
SERVER_XML="/app/pentaho/pentaho-server/tomcat/conf/server.xml.tpl"
if [ -f "${SERVER_XML}" ] ; then
	TARGET="${SERVER_XML//.tpl/}"
	say "Editing [${TARGET}] to remove the redundant cluster member"
	XPATH="//Cluster/Channel/Interceptor/Member[@className = 'org.apache.catalina.tribes.membership.StaticMember' and starts-with(@host, '$(hostname).')]"
	/usr/bin/xmlstarlet ed -P -d "${XPATH}" "${SERVER_XML}" > "${TARGET}"
fi

###################################################################
# CONFIGURE FILESYSTEM PERSISTENCE                                #
###################################################################
[ -v DATA_DIR ] || DATA_DIR="${BASE_DIR}/data"
[ -d "${DATA_DIR}" ] || mkdir -p "${DATA_DIR}"
export DATA_DIR

#
# ActiveMQ Persistence
#
ACTIVEMQ_DATA="${DATA_DIR}/activemq"
[ -d "${ACTIVEMQ_DATA}" ] || mkdir -p "${ACTIVEMQ_DATA}"
export ACTIVEMQ_DATA

#
# Configure Kettle
#
[ -v KETTLE_HOME ] || KETTLE_HOME="${DATA_DIR}/pdi"
[ -d "${KETTLE_HOME}" ] || mkdir -p "${KETTLE_HOME}"
export KETTLE_HOME



[ -v INIT_DIR ] || INIT_DIR="${BASE_DIR}/init"

###################################################################
# UPDATE CA CERTIFICATES                                          #
###################################################################
/update-ssl

###################################################################
# INSTALL ANY LICENSES                                            #
###################################################################

#
# Configure license location
#
[ -v PENTAHO_INSTALLED_LICENSE_PATH ] || PENTAHO_INSTALLED_LICENSE_PATH="${DATA_DIR}/.installedLicenses.xml"
[ -f "${PENTAHO_INSTALLED_LICENSE_PATH}" ] || mkdir -p "$(dirname "${PENTAHO_INSTALLED_LICENSE_PATH}")"
export PENTAHO_INSTALLED_LICENSE_PATH

#
# Install the licenses
#
[ -v LICENSE_DIR ] || LICENSE_DIR="${INIT_DIR}/licenses"
if [ -d "${LICENSE_DIR}" ] ; then
	LICENSE_INSTALLER="${PENTAHO_HOME}/license-installer/install_license.sh"
	say "Installing all available license files from [${LICENSE_DIR}]"
	while read LICENSE ; do
		if /bin/sh "${LICENSE_INSTALLER}" install -q "${LICENSE}" ; then
			say "\tInstalled the license from [${LICENSE}], removing the original file"
			rm -fv "${LICENSE}" &>/dev/null || true
		else
			say "\tERROR: failed to install the license from [${LICENSE}]"
		fi
	done < <(find "${LICENSE_DIR}" -type f -name '*.lic' | sort)
fi

###################################################################
# CONFIGURE LOGGING                                               #
###################################################################
[ -v LOGS_DIR ] || LOGS_DIR="${BASE_DIR}/logs"
[ -d "${LOGS_DIR}" ] || mkdir -p "${LOGS_DIR}"
export LOGS_DIR

#
# This is for debugging - if the log4j2 configuration isn't set already,
# we copy it from the base file
#
LOG4J2_XML="${PENTAHO_SERVER}/tomcat/webapps/pentaho/WEB-INF/classes/log4j2.xml"
[ -f "${LOG4J2_XML}" ] || cp -vf "${LOG$J2_XML}.base" "${LOG4J2_XML}" || fail "Failed to create the Log4J2 configuration"

#
# Tomcat Logging
#
[ -v TOMCAT_LOGS_DIR ] || TOMCAT_LOGS_DIR="${LOGS_DIR}/tomcat"
[ -d "${TOMCAT_LOGS_DIR}" ] || mkdir -p "${TOMCAT_LOGS_DIR}"
export TOMCAT_LOGS_DIR

[ -v INIT_MARKER ] || INIT_MARKER="${DATA_DIR}/.initialized"

# This is important: ${PENTAHO_HOME} must be *ephemeral* - this flag is only meant to
# inform when the init script ran, so we can run the post-init script in the helm chart
[ -v RUN_MARKER ] || RUN_MARKER="${PENTAHO_HOME}/.initRan"

###################################################################
# INITIALIZE PERSISTENT DATA AND CONFIGURATIONS                   #
###################################################################
if [ -e "${INIT_MARKER}" ] ; then
	say "Persistence is already initialized, proceeding with the normal boot"
else
	say "Persistence has not been initialized, proceeding with the first-time initialization"

	/config-pre.sh || fail "Pre-configuration failed - the Pentaho initialization may not be complete"

	touch "${INIT_MARKER}"
	touch "${RUN_MARKER}"
fi

###################################################################
# CLEAN OUT JACKRABBIT TEMPORARY FILES                            #
###################################################################
[ -v JCR_DIR ] || JCR_DIR="${DATA_DIR}/jackrabbit/repository"
[ -d "${JCR_DIR}" ] && rm -rf "${JCR_DIR}" &>/dev/null

###################################################################
# LAUNCH THE SERVER PROCESS                                       #
###################################################################

MAX_BOOT_DELAY="60"
if [ -v BOOT_DELAY ] && [[ "${BOOT_DELAY}" =~ ^[0-9]+$ ]] ; then
	BOOT_DELAY="$(( 10#${BOOT_DELAY} ))"
	if [ ${BOOT_DELAY} -gt 0 ] ; then
		[ ${BOOT_DELAY} -gt ${MAX_BOOT_DELAY} ] && BOOT_DELAY=${MAX_BOOT_DELAY}
		say "Applying a boot delay of ${BOOT_DELAY} seconds"
		START="$(date +%s)"
		while true ; do
			DIFF="$(( $(date +%s) - START ))"
			[ ${DIFF} -ge ${BOOT_DELAY} ] && break
			sleep 1 || fail "Boot delay aborted - exiting"
		done
	fi
fi

CMD=("${PENTAHO_SERVER}/start-pentaho.sh" "${@}")
say "Launching Pentaho as: ${CMD[@]@Q}"
exec "${CMD}"
