#!/bin/bash

timestamp() {
	/usr/bin/date -Isec -u
}

say() {
	echo -e "$(timestamp): ${@}"
}

fail() {
	say "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

set -euo pipefail

[ -v BASE_DIR ] || BASE_DIR="/app"
[ -v PENTAHO_HOME ] || PENTAHO_HOME="${BASE_DIR}/pentaho"
[ -v PENTAHO_PDI_HOME ] || PENTAHO_HOME="${BASE_DIR}/pentaho"
[ -v PENTAHO_PDI_PLUGINS ] || PENTAHO_PDI_PLUGINS="${PENTAHO_PDI_HOME}/data-integration/plugins"

[ -v PENTAHO_SERVER ] || PENTAHO_SERVER="${PENTAHO_HOME}/pentaho-server"
[ -e "${PENTAHO_SERVER}" ] || fail "The Pentaho server directory could not be found at [${PENTAHO_SERVER}], cannot continue."
[ -d "${PENTAHO_SERVER}" ] || fail "The path [${PENTAHO_SERVER}] is not a directory, cannot continue."

###################################################################
# IDENTIFY VALUES FOR CLUSTERING SUPPORT                          #
###################################################################
if [ ! -v NODE_ID ] ; then
	[ -v POD_NAME ] || POD_NAME="$(hostname)"
	POD_NAME="${POD_NAME%%.*}"
	[[ "${POD_NAME}" =~ ^.*-([0-9]+)$ ]] || fail "The pod name [${POD_NAME}] doesn't match the pattern for a stateful pod (must end with a number)"
	NODE_ID="${BASH_REMATCH[1]}"
else
	[[ "${NODE_ID}" =~ ^[1-9][0-9]*$ ]] || fail "The NODE_ID value [${NODE_ID}] is not a valid number"
	[ ${NODE_ID} -gt 0 ] && [ ${NODE_ID} -lt 256 ] || fail "The NODE_ID value must be in the range [1..255]"
fi

# Remove al leading zeros, just in case...
export NODE_ID="$(( 10#${NODE_ID} ))"

#
# Apply the changes to the server.xml template
#
SERVER_XML="/app/pentaho/pentaho-server/tomcat/conf/server.xml.tpl"
if [ -f "${SERVER_XML}" ] ; then
	TARGET="${SERVER_XML%*.tpl}"
	say "Editing [${TARGET}] to remove the redundant cluster member"
	XPATH="//Cluster/Channel/Interceptor/Member[@className = 'org.apache.catalina.tribes.membership.StaticMember' and starts-with(@host, '$(hostname).')]"
	/usr/bin/xmlstarlet ed -P -d "${XPATH}" "${SERVER_XML}" > "${TARGET}"
	unset TARGET XPATH
fi

REPOSITORY_XML="/app/pentaho/pentaho-server/pentaho-solutions/system/jackrabbit/repository.xml.tpl"
if [ -f "${REPOSITORY_XML}" ] ; then
	TARGET="${REPOSITORY_XML%*.tpl}"
	VALUE="$(hostname)"
	say "Editing [${TARGET}] to set the cluster ID"
	/usr/bin/xmlstarlet ed -P --insert "/Repository/Cluster[not(@id)]" \
		--type attr --name "id" --value "${VALUE}" < "${REPOSITORY_XML}" | \
		/usr/bin/xmlstarlet ed -P --update "/Repository/Cluster/@id" \
			--value "${VALUE}" > "${TARGET}"
	unset TARGET VALUE
fi

###################################################################
# CONFIGURE FILESYSTEM PERSISTENCE                                #
###################################################################
[ -v DATA_DIR ] || DATA_DIR="${BASE_DIR}/data"
[ -d "${DATA_DIR}" ] || mkdir -p "${DATA_DIR}"
export DATA_DIR

[ -v INIT_DIR ] || INIT_DIR="${BASE_DIR}/init"

###################################################################
# UPDATE CA CERTIFICATES                                          #
###################################################################
/update-ssl

###################################################################
# INSTALL ANY LICENSES                                            #
###################################################################

#
# Configure license location
#
[ -v PENTAHO_INSTALLED_LICENSE_PATH ] || PENTAHO_INSTALLED_LICENSE_PATH="${DATA_DIR}/.installedLicenses.xml"
[ -f "${PENTAHO_INSTALLED_LICENSE_PATH}" ] || mkdir -p "$(dirname "${PENTAHO_INSTALLED_LICENSE_PATH}")"
export PENTAHO_INSTALLED_LICENSE_PATH

#
# Install the licenses
#
[ -v LICENSE_DIR ] || LICENSE_DIR="${INIT_DIR}/licenses"
if [ -d "${LICENSE_DIR}" ] ; then
	LICENSE_INSTALLER="${PENTAHO_HOME}/license-installer/install_license.sh"
	say "Installing all available license files from [${LICENSE_DIR}]"
	while read LICENSE ; do
		if /bin/sh "${LICENSE_INSTALLER}" install -q "${LICENSE}" ; then
			say "\tInstalled the license from [${LICENSE}], removing the original file"
			rm -fv "${LICENSE}" &>/dev/null || true
		else
			say "\tERROR: failed to install the license from [${LICENSE}]"
		fi
	done < <(find "${LICENSE_DIR}" -type f -name '*.lic' | sort)
fi

###################################################################
# CONFIGURE LOGGING                                               #
###################################################################
[ -v LOGS_DIR ] || LOGS_DIR="${BASE_DIR}/logs"
[ -d "${LOGS_DIR}" ] || mkdir -p "${LOGS_DIR}"
export LOGS_DIR

#
# This is for debugging - if the log4j2 configuration isn't set already,
# we copy it from the base file
#
LOG4J2_XML="${PENTAHO_SERVER}/tomcat/webapps/pentaho/WEB-INF/classes/log4j2.xml"
[ -f "${LOG4J2_XML}" ] || cp -vf "${LOG$J2_XML}.base" "${LOG4J2_XML}" || fail "Failed to create the Log4J2 configuration"

#
# Tomcat Logging
#
[ -v TOMCAT_LOGS_DIR ] || TOMCAT_LOGS_DIR="${LOGS_DIR}/tomcat"
[ -d "${TOMCAT_LOGS_DIR}" ] || mkdir -p "${TOMCAT_LOGS_DIR}"
export TOMCAT_LOGS_DIR

[ -v INIT_MARKER ] || INIT_MARKER="${DATA_DIR}/.initialized"

# This is important: ${PENTAHO_HOME} must be *ephemeral* - this flag is only meant to
# inform when the init script ran, so we can run the post-init script in the helm chart
[ -v RUN_MARKER ] || RUN_MARKER="${PENTAHO_HOME}/.initRan"

###################################################################
# INITIALIZE PERSISTENT DATA AND CONFIGURATIONS                   #
###################################################################
if [ -e "${INIT_MARKER}" ] ; then
	say "Persistence is already initialized, proceeding with the normal boot"
else
	say "Persistence has not been initialized, proceeding with the first-time initialization"

	/config-pre.sh || fail "Pre-configuration failed - the Pentaho initialization may not be complete"

	touch "${INIT_MARKER}"
	touch "${RUN_MARKER}"
fi

###################################################################
# Render the correct server.properties file                       #
###################################################################
PROPERTIES_TEMPLATES=(
	"${PENTAHO_SERVER}/pentaho-solutions/system/server.properties"
	"${PENTAHO_SERVER}/pentaho-solutions/system/pdi-pur-plugin/plugin.properties"
	"${PENTAHO_PDI_PLUGINS}/pdi-pur-plugin/plugin.properties"
)
[ -v PENTAHO_SERVER_URL ] || PENTAHO_SERVER_URL="http://$(hostname -d):8080/pentaho"
for P in "${PROPERTIES_TEMPLATES[@]}" ; do
	T="${P}.tpl"
	[ -e "${T}" ] || continue
	say "Rendering [${P}]..."
	sed \
		-e "s;\${PENTAHO_SERVER_URL};${PENTAHO_SERVER_URL};g" \
		< "${T}" > "${P}"
done

###################################################################
# CLEAN OUT JACKRABBIT TEMPORARY FILES                            #
###################################################################
[ -v JCR_DIR ] || JCR_DIR="${DATA_DIR}/jackrabbit/repository"
[ -d "${JCR_DIR}" ] && rm -rf "${JCR_DIR}" &>/dev/null
mkdir -p "${JCR_DIR}"

# Just in case... for clustering
hostname > "${JCR_DIR}/cluster_node.id"

###################################################################
# LOCK FOR FIRST INITIALIZATION TO AVOID PROBLEMS IN CLUSTERING   #
###################################################################

INITIALIZER_PROCESS="/config-post.sh"
MARKER="$(dd if=/dev/urandom bs=3 count=16 2>/dev/null | base64 --wrap=0)"
say "Acquiring the initializer lock"
coproc "/lock-initializer" "${MARKER}" "${INITIALIZER_PROCESS}"
LOCK_OUT="${COPROC[0]}"
LOCK_PID="${COPROC_PID}"
say "Co-process started (pid=${LOCK_PID}, fd=${LOCK_OUT})"

RC=0
LAUNCH="exec"
LOCK_START="$(date +%s)"
while true ; do
	# Has the marker been output?
	if read -u ${LOCK_OUT} LINE &>/dev/null ; then
		# A successful read ...

		# If it's not our marker, keep reading!
		[ "${LINE}" != "${MARKER}" ] && continue

		# If it was our marker, end the loop!
		say "Initialization lock acquired"
		# Don't use exec to launch Pentaho
		LAUNCH=""
		break
	fi

	# The read failed ... is the coproc still running?
	kill -0 ${LOCK_PID} &>/dev/null && continue

	# It's not running... did it exit successfully?
	wait ${LOCK_PID} &>/dev/null || RC=${?}

	# If it's not running and its exit status is not 0, then there was
	[ ${RC} -eq 0 ] || fail "Initializer lock failed - cannot continue (rc=${RC})"

	say "Another process executed the initialization"
	break
done
LOCK_END="$(date +%s)"

###################################################################
# LAUNCH THE SERVER PROCESS                                       #
###################################################################

CMD=("${PENTAHO_SERVER}/start-pentaho.sh" "${@}")
if [ -n "${LAUNCH}" ] ; then
	CMD=("${LAUNCH}" "${CMD[@]}")

	# If we had to wait more than 10 seconds for the initialization lock
	# then it means this is the first boot, so we do stupid things to
	# deal with stupid issues with Pentaho... otherwise, no wait, just go!
	if [ $(( LOCK_END - LOCK_START )) -ge 10 ] ; then
		[ -v BOOT_DELAY ] || BOOT_DELAY="30"
		[[ "${BOOT_DELAY}" =~ ^[1-9][0-9]*$ ]] || BOOT_DELAY="30"
		say "Applying a delay of ${BOOT_DELAY} seconds (don't ask... thank Hitachi)"
		sleep "${BOOT_DELAY}" || fail "Initial delay interrupted, can't continue"
	fi

	#
	# We didn't own the initialization lock, either because we lost
	# the leadership race, or because this isn't our first boot.
	#
	# In either case, we're not supposed to mess with JCR installation,
	# so we're going to nuke the zip files that would be added as default
	# content
	#
	# This should eliminate all the cluster bootup problems
	#
	say "Avoiding re-installation of JCR default content"
	while read zip ; do
		mv -vf "${zip}" "${zip}.installed"
	done < <(find "${PENTAHO_SERVER}/pentaho-solutions/system/default-content" -type f -name '*.zip')
fi
say "Launching Pentaho as: ${CMD[@]@Q}"
"${CMD[@]}"
