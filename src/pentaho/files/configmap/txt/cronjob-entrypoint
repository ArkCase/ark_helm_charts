#!/bin/bash

timestamp() {
	/usr/bin/date -Isec -u
}

say() {
	echo -e "$(timestamp): ${@}"
}

fail() {
	say "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

set -euo pipefail

[ -v BASE_DIR ] || BASE_DIR="/app"
[ -v PENTAHO_HOME ] || PENTAHO_HOME="${BASE_DIR}/pentaho"
[ -v PENTAHO_PDI_HOME ] || PENTAHO_HOME="${BASE_DIR}/pentaho"
[ -v PENTAHO_PDI_PLUGINS ] || PENTAHO_PDI_PLUGINS="${PENTAHO_PDI_HOME}/data-integration/plugins"

[ -v PENTAHO_SERVER ] || PENTAHO_SERVER="${PENTAHO_HOME}/pentaho-server"
[ -e "${PENTAHO_SERVER}" ] || fail "The Pentaho server directory could not be found at [${PENTAHO_SERVER}], cannot continue."
[ -d "${PENTAHO_SERVER}" ] || fail "The path [${PENTAHO_SERVER}] is not a directory, cannot continue."

###################################################################
# CONFIGURE FILESYSTEM PERSISTENCE                                #
###################################################################
[ -v DATA_DIR ] || DATA_DIR="${BASE_DIR}/data"
[ -d "${DATA_DIR}" ] || mkdir -p "${DATA_DIR}"
export DATA_DIR

[ -v INIT_DIR ] || INIT_DIR="${BASE_DIR}/init"

###################################################################
# UPDATE CA CERTIFICATES                                          #
###################################################################
/update-ssl

###################################################################
# INSTALL ANY LICENSES                                            #
###################################################################

#
# Configure license location
#
[ -v PENTAHO_INSTALLED_LICENSE_PATH ] || PENTAHO_INSTALLED_LICENSE_PATH="${DATA_DIR}/.installedLicenses.xml"
[ -f "${PENTAHO_INSTALLED_LICENSE_PATH}" ] || mkdir -p "$(dirname "${PENTAHO_INSTALLED_LICENSE_PATH}")"
export PENTAHO_INSTALLED_LICENSE_PATH

#
# Install the licenses
#
[ -v LICENSE_DIR ] || LICENSE_DIR="${INIT_DIR}/licenses"
if [ -d "${LICENSE_DIR}" ] ; then
	LICENSE_INSTALLER="${PENTAHO_HOME}/license-installer/install_license.sh"
	say "Installing all available license files from [${LICENSE_DIR}]"
	while read LICENSE ; do
		if /bin/sh "${LICENSE_INSTALLER}" install -q "${LICENSE}" ; then
			say "\tInstalled the license from [${LICENSE}], removing the original file"
			rm -fv "${LICENSE}" &>/dev/null || true
		else
			say "\tERROR: failed to install the license from [${LICENSE}]"
		fi
	done < <(find "${LICENSE_DIR}" -type f -name '*.lic' | sort)
fi

###################################################################
# Render the correct server.properties file                       #
###################################################################
PROPERTIES_TEMPLATES=(
	"${PENTAHO_SERVER}/pentaho-solutions/system/server.properties"
	"${PENTAHO_SERVER}/pentaho-solutions/system/pdi-pur-plugin/plugin.properties"
	"${PENTAHO_PDI_PLUGINS}/pdi-pur-plugin/plugin.properties"
)
for P in "${PROPERTIES_TEMPLATES[@]}" ; do
	T="${P}.tpl"
	[ -e "${T}" ] || continue
	say "Rendering [${P}]..."
	render-template < "${T}" > "${P}"
done

###################################################################
# CONFIGURE LOGGING                                               #
###################################################################
[ -v LOGS_DIR ] || LOGS_DIR="${BASE_DIR}/logs"
[ -d "${LOGS_DIR}" ] || mkdir -p "${LOGS_DIR}"
export LOGS_DIR

exec /usr/local/bin/run-kjb "${@}"
